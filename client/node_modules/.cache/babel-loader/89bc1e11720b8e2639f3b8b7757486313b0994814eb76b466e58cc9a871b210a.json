{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport { TextureCoordinateAttributeType as e } from \"../attributes/TextureCoordinateAttribute.glsl.js\";\nimport { VertexTextureCoordinates as t } from \"../attributes/VertexTextureCoordinates.glsl.js\";\nimport { NormalsDoubleSidedMode as n } from \"./Normals.glsl.js\";\nimport { textureSize as r } from \"../util/WebGL2Utils.js\";\nimport { glsl as a } from \"../../shaderModules/interfaces.js\";\nimport { createTexture2DDrawSizeUniforms as o } from \"../../shaderModules/Texture2DDrawUniform.js\";\nimport { createTexture2DPassSizeUniforms as s } from \"../../shaderModules/Texture2DPassUniform.js\";\nimport { TextureSizeUniformType as d } from \"../../shaderModules/TextureSizeUniformType.js\";\nimport { BindType as m } from \"../../shaderTechnique/BindType.js\";\nimport { VertexAttribute as i } from \"../../../lib/VertexAttribute.js\";\nfunction c(c, u) {\n  const l = c.fragment;\n  if (u.hasVertexTangents ? (c.attributes.add(i.TANGENT, \"vec4\"), c.varyings.add(\"vTangent\", \"vec4\"), u.doubleSidedMode === n.WindingOrder ? l.code.add(a`mat3 computeTangentSpace(vec3 normal) {\nfloat tangentHeadedness = gl_FrontFacing ? vTangent.w : -vTangent.w;\nvec3 tangent = normalize(gl_FrontFacing ? vTangent.xyz : -vTangent.xyz);\nvec3 bitangent = cross(normal, tangent) * tangentHeadedness;\nreturn mat3(tangent, bitangent, normal);\n}`) : l.code.add(a`mat3 computeTangentSpace(vec3 normal) {\nfloat tangentHeadedness = vTangent.w;\nvec3 tangent = normalize(vTangent.xyz);\nvec3 bitangent = cross(normal, tangent) * tangentHeadedness;\nreturn mat3(tangent, bitangent, normal);\n}`)) : (c.extensions.add(\"GL_OES_standard_derivatives\"), l.code.add(a`mat3 computeTangentSpace(vec3 normal, vec3 pos, vec2 st) {\nvec3 Q1 = dFdx(pos);\nvec3 Q2 = dFdy(pos);\nvec2 stx = dFdx(st);\nvec2 sty = dFdy(st);\nfloat det = stx.t * sty.s - sty.t * stx.s;\nvec3 T = stx.t * Q2 - sty.t * Q1;\nT = T - normal * dot(normal, T);\nT *= inversesqrt(max(dot(T,T), 1.e-10));\nvec3 B = sign(det) * cross(normal, T);\nreturn mat3(T, B, normal);\n}`)), u.textureCoordinateType !== e.None) {\n    c.include(t, u);\n    const e = u.supportsTextureAtlas ? u.hasWebGL2Context ? d.None : d.Size : d.None;\n    l.uniforms.add(u.pbrTextureBindType === m.Pass ? s(\"normalTexture\", e => e.textureNormal, e) : o(\"normalTexture\", e => e.textureNormal, e)), l.code.add(a`\n    vec3 computeTextureNormal(mat3 tangentSpace, vec2 uv) {\n      vtc.uv = uv;\n      ${u.supportsTextureAtlas ? a`vtc.size = ${r(u, \"normalTexture\")};` : \"\"}\n      vec3 rawNormal = textureLookup(normalTexture, vtc).rgb * 2.0 - 1.0;\n      return tangentSpace * rawNormal;\n    }\n  `);\n  }\n}\nexport { c as ComputeNormalTexture };","map":{"version":3,"names":["TextureCoordinateAttributeType","e","VertexTextureCoordinates","t","NormalsDoubleSidedMode","n","textureSize","r","glsl","a","createTexture2DDrawSizeUniforms","o","createTexture2DPassSizeUniforms","s","TextureSizeUniformType","d","BindType","m","VertexAttribute","i","c","u","l","fragment","hasVertexTangents","attributes","add","TANGENT","varyings","doubleSidedMode","WindingOrder","code","extensions","textureCoordinateType","None","include","supportsTextureAtlas","hasWebGL2Context","Size","uniforms","pbrTextureBindType","Pass","textureNormal","ComputeNormalTexture"],"sources":["C:/code-challenge-react/client/node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/ComputeNormalTexture.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport{TextureCoordinateAttributeType as e}from\"../attributes/TextureCoordinateAttribute.glsl.js\";import{VertexTextureCoordinates as t}from\"../attributes/VertexTextureCoordinates.glsl.js\";import{NormalsDoubleSidedMode as n}from\"./Normals.glsl.js\";import{textureSize as r}from\"../util/WebGL2Utils.js\";import{glsl as a}from\"../../shaderModules/interfaces.js\";import{createTexture2DDrawSizeUniforms as o}from\"../../shaderModules/Texture2DDrawUniform.js\";import{createTexture2DPassSizeUniforms as s}from\"../../shaderModules/Texture2DPassUniform.js\";import{TextureSizeUniformType as d}from\"../../shaderModules/TextureSizeUniformType.js\";import{BindType as m}from\"../../shaderTechnique/BindType.js\";import{VertexAttribute as i}from\"../../../lib/VertexAttribute.js\";function c(c,u){const l=c.fragment;if(u.hasVertexTangents?(c.attributes.add(i.TANGENT,\"vec4\"),c.varyings.add(\"vTangent\",\"vec4\"),u.doubleSidedMode===n.WindingOrder?l.code.add(a`mat3 computeTangentSpace(vec3 normal) {\nfloat tangentHeadedness = gl_FrontFacing ? vTangent.w : -vTangent.w;\nvec3 tangent = normalize(gl_FrontFacing ? vTangent.xyz : -vTangent.xyz);\nvec3 bitangent = cross(normal, tangent) * tangentHeadedness;\nreturn mat3(tangent, bitangent, normal);\n}`):l.code.add(a`mat3 computeTangentSpace(vec3 normal) {\nfloat tangentHeadedness = vTangent.w;\nvec3 tangent = normalize(vTangent.xyz);\nvec3 bitangent = cross(normal, tangent) * tangentHeadedness;\nreturn mat3(tangent, bitangent, normal);\n}`)):(c.extensions.add(\"GL_OES_standard_derivatives\"),l.code.add(a`mat3 computeTangentSpace(vec3 normal, vec3 pos, vec2 st) {\nvec3 Q1 = dFdx(pos);\nvec3 Q2 = dFdy(pos);\nvec2 stx = dFdx(st);\nvec2 sty = dFdy(st);\nfloat det = stx.t * sty.s - sty.t * stx.s;\nvec3 T = stx.t * Q2 - sty.t * Q1;\nT = T - normal * dot(normal, T);\nT *= inversesqrt(max(dot(T,T), 1.e-10));\nvec3 B = sign(det) * cross(normal, T);\nreturn mat3(T, B, normal);\n}`)),u.textureCoordinateType!==e.None){c.include(t,u);const e=u.supportsTextureAtlas?u.hasWebGL2Context?d.None:d.Size:d.None;l.uniforms.add(u.pbrTextureBindType===m.Pass?s(\"normalTexture\",(e=>e.textureNormal),e):o(\"normalTexture\",(e=>e.textureNormal),e)),l.code.add(a`\n    vec3 computeTextureNormal(mat3 tangentSpace, vec2 uv) {\n      vtc.uv = uv;\n      ${u.supportsTextureAtlas?a`vtc.size = ${r(u,\"normalTexture\")};`:\"\"}\n      vec3 rawNormal = textureLookup(normalTexture, vtc).rgb * 2.0 - 1.0;\n      return tangentSpace * rawNormal;\n    }\n  `)}}export{c as ComputeNormalTexture};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAAOA,8BAA8B,IAAIC,CAAC,QAAK,kDAAkD;AAAC,SAAOC,wBAAwB,IAAIC,CAAC,QAAK,gDAAgD;AAAC,SAAOC,sBAAsB,IAAIC,CAAC,QAAK,mBAAmB;AAAC,SAAOC,WAAW,IAAIC,CAAC,QAAK,wBAAwB;AAAC,SAAOC,IAAI,IAAIC,CAAC,QAAK,mCAAmC;AAAC,SAAOC,+BAA+B,IAAIC,CAAC,QAAK,6CAA6C;AAAC,SAAOC,+BAA+B,IAAIC,CAAC,QAAK,6CAA6C;AAAC,SAAOC,sBAAsB,IAAIC,CAAC,QAAK,+CAA+C;AAAC,SAAOC,QAAQ,IAAIC,CAAC,QAAK,mCAAmC;AAAC,SAAOC,eAAe,IAAIC,CAAC,QAAK,iCAAiC;AAAC,SAASC,CAACA,CAACA,CAAC,EAACC,CAAC,EAAC;EAAC,MAAMC,CAAC,GAACF,CAAC,CAACG,QAAQ;EAAC,IAAGF,CAAC,CAACG,iBAAiB,IAAEJ,CAAC,CAACK,UAAU,CAACC,GAAG,CAACP,CAAC,CAACQ,OAAO,EAAC,MAAM,CAAC,EAACP,CAAC,CAACQ,QAAQ,CAACF,GAAG,CAAC,UAAU,EAAC,MAAM,CAAC,EAACL,CAAC,CAACQ,eAAe,KAAGxB,CAAC,CAACyB,YAAY,GAACR,CAAC,CAACS,IAAI,CAACL,GAAG,CAACjB,CAAE;AACv6B;AACA;AACA;AACA;AACA,EAAE,CAAC,GAACa,CAAC,CAACS,IAAI,CAACL,GAAG,CAACjB,CAAE;AACjB;AACA;AACA;AACA;AACA,EAAE,CAAC,KAAGW,CAAC,CAACY,UAAU,CAACN,GAAG,CAAC,6BAA6B,CAAC,EAACJ,CAAC,CAACS,IAAI,CAACL,GAAG,CAACjB,CAAE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,CAAC,EAACY,CAAC,CAACY,qBAAqB,KAAGhC,CAAC,CAACiC,IAAI,EAAC;IAACd,CAAC,CAACe,OAAO,CAAChC,CAAC,EAACkB,CAAC,CAAC;IAAC,MAAMpB,CAAC,GAACoB,CAAC,CAACe,oBAAoB,GAACf,CAAC,CAACgB,gBAAgB,GAACtB,CAAC,CAACmB,IAAI,GAACnB,CAAC,CAACuB,IAAI,GAACvB,CAAC,CAACmB,IAAI;IAACZ,CAAC,CAACiB,QAAQ,CAACb,GAAG,CAACL,CAAC,CAACmB,kBAAkB,KAAGvB,CAAC,CAACwB,IAAI,GAAC5B,CAAC,CAAC,eAAe,EAAEZ,CAAC,IAAEA,CAAC,CAACyC,aAAa,EAAEzC,CAAC,CAAC,GAACU,CAAC,CAAC,eAAe,EAAEV,CAAC,IAAEA,CAAC,CAACyC,aAAa,EAAEzC,CAAC,CAAC,CAAC,EAACqB,CAAC,CAACS,IAAI,CAACL,GAAG,CAACjB,CAAE;AAC5Q;AACA;AACA,QAAQY,CAAC,CAACe,oBAAoB,GAAC3B,CAAE,cAAaF,CAAC,CAACc,CAAC,EAAC,eAAe,CAAE,GAAE,GAAC,EAAG;AACzE;AACA;AACA;AACA,GAAG,CAAC;EAAA;AAAC;AAAC,SAAOD,CAAC,IAAIuB,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}