{"ast":null,"code":"/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.0.8-next.4\n */\nimport { w as tabbable, x as focusable, y as isTabbable, z as isFocusable, h as focusElement, A as tabbableOptions } from './dom.js';\n\n/*!\n* focus-trap 7.2.0\n* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE\n*/\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\nvar activeFocusTraps = {\n  activateTrap: function activateTrap(trapStack, trap) {\n    if (trapStack.length > 0) {\n      var activeTrap = trapStack[trapStack.length - 1];\n      if (activeTrap !== trap) {\n        activeTrap.pause();\n      }\n    }\n    var trapIndex = trapStack.indexOf(trap);\n    if (trapIndex === -1) {\n      trapStack.push(trap);\n    } else {\n      // move this existing trap to the front of the queue\n      trapStack.splice(trapIndex, 1);\n      trapStack.push(trap);\n    }\n  },\n  deactivateTrap: function deactivateTrap(trapStack, trap) {\n    var trapIndex = trapStack.indexOf(trap);\n    if (trapIndex !== -1) {\n      trapStack.splice(trapIndex, 1);\n    }\n    if (trapStack.length > 0) {\n      trapStack[trapStack.length - 1].unpause();\n    }\n  }\n};\nvar isSelectableInput = function isSelectableInput(node) {\n  return node.tagName && node.tagName.toLowerCase() === 'input' && typeof node.select === 'function';\n};\nvar isEscapeEvent = function isEscapeEvent(e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\nvar isTabEvent = function isTabEvent(e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\n// checks for TAB by default\nvar isKeyForward = function isKeyForward(e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n// checks for SHIFT+TAB by default\nvar isKeyBackward = function isKeyBackward(e) {\n  return isTabEvent(e) && e.shiftKey;\n};\nvar delay = function delay(fn) {\n  return setTimeout(fn, 0);\n};\n\n// Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\nvar findIndex = function findIndex(arr, fn) {\n  var idx = -1;\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n\n  return idx;\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nvar valueOrHandler = function valueOrHandler(value) {\n  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    params[_key - 1] = arguments[_key];\n  }\n  return typeof value === 'function' ? value.apply(void 0, params) : value;\n};\nvar getActualTarget = function getActualTarget(event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function' ? event.composedPath()[0] : event.target;\n};\n\n// NOTE: this must be _outside_ `createFocusTrap()` to make sure all traps in this\n//  current instance use the same stack if `userOptions.trapStack` isn't specified\nvar internalTrapStack = [];\nvar createFocusTrap = function createFocusTrap(elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  var doc = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.document) || document;\n  var trapStack = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.trapStack) || internalTrapStack;\n  var config = _objectSpread2({\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    isKeyForward: isKeyForward,\n    isKeyBackward: isKeyBackward\n  }, userOptions);\n  var state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   firstTabbableNode: HTMLElement|null,\n    //   lastTabbableNode: HTMLElement|null,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [],\n    // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined\n  };\n  var trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  var getOption = function getOption(configOverrideOptions, optionName, configOptionName) {\n    return configOverrideOptions && configOverrideOptions[optionName] !== undefined ? configOverrideOptions[optionName] : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  var findContainerIndex = function findContainerIndex(element) {\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(function (_ref) {\n      var container = _ref.container,\n        tabbableNodes = _ref.tabbableNodes;\n      return container.contains(element) ||\n      // fall back to explicit tabbable search which will take into consideration any\n      //  web components if the `tabbableOptions.getShadowRoot` option was used for\n      //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n      //  look inside web components even if open)\n      tabbableNodes.find(function (node) {\n        return node === element;\n      });\n    });\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n  var getNodeForOption = function getNodeForOption(optionName) {\n    var optionValue = config[optionName];\n    if (typeof optionValue === 'function') {\n      for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        params[_key2 - 1] = arguments[_key2];\n      }\n      optionValue = optionValue.apply(void 0, params);\n    }\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\"`\".concat(optionName, \"` was specified but was not a node, or did not return a node\"));\n    }\n    var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      if (!node) {\n        throw new Error(\"`\".concat(optionName, \"` as selector refers to no known node\"));\n      }\n    }\n    return node;\n  };\n  var getInitialFocusNode = function getInitialFocusNode() {\n    var node = getNodeForOption('initialFocus');\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n    if (node === undefined) {\n      // option not specified: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        var firstTabbableGroup = state.tabbableGroups[0];\n        var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n    if (!node) {\n      throw new Error('Your focus-trap needs to have at least one focusable element');\n    }\n    return node;\n  };\n  var updateTabbableNodes = function updateTabbableNodes() {\n    state.containerGroups = state.containers.map(function (container) {\n      var tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes\n      var focusableNodes = focusable(container, config.tabbableOptions);\n      return {\n        container: container,\n        tabbableNodes: tabbableNodes,\n        focusableNodes: focusableNodes,\n        firstTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[0] : null,\n        lastTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : null,\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode: function nextTabbableNode(node) {\n          var forward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n          // NOTE: If tabindex is positive (in order to manipulate the tab order separate\n          //  from the DOM order), this __will not work__ because the list of focusableNodes,\n          //  while it contains tabbable nodes, does not sort its nodes in any order other\n          //  than DOM order, because it can't: Where would you place focusable (but not\n          //  tabbable) nodes in that order? They have no order, because they aren't tabbale...\n          // Support for positive tabindex is already broken and hard to manage (possibly\n          //  not supportable, TBD), so this isn't going to make things worse than they\n          //  already are, and at least makes things better for the majority of cases where\n          //  tabindex is either 0/unset or negative.\n          // FYI, positive tabindex issue: https://github.com/focus-trap/focus-trap/issues/375\n          var nodeIdx = focusableNodes.findIndex(function (n) {\n            return n === node;\n          });\n          if (nodeIdx < 0) {\n            return undefined;\n          }\n          if (forward) {\n            return focusableNodes.slice(nodeIdx + 1).find(function (n) {\n              return isTabbable(n, config.tabbableOptions);\n            });\n          }\n          return focusableNodes.slice(0, nodeIdx).reverse().find(function (n) {\n            return isTabbable(n, config.tabbableOptions);\n          });\n        }\n      };\n    });\n    state.tabbableGroups = state.containerGroups.filter(function (group) {\n      return group.tabbableNodes.length > 0;\n    });\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (state.tabbableGroups.length <= 0 && !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error('Your focus-trap must have at least one container with at least one tabbable node in it at all times');\n    }\n  };\n  var tryFocus = function tryFocus(node) {\n    if (node === false) {\n      return;\n    }\n    if (node === doc.activeElement) {\n      return;\n    }\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n    node.focus({\n      preventScroll: !!config.preventScroll\n    });\n    state.mostRecentlyFocusedNode = node;\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n  var getReturnFocusNode = function getReturnFocusNode(previousActiveElement) {\n    var node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  var checkPointerDown = function checkPointerDown(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // if, on deactivation, we should return focus to the node originally-focused\n        //  when the trap was activated (or the configured `setReturnFocus` node),\n        //  then assume it's also OK to return focus to the outside node that was\n        //  just clicked, causing deactivation, as long as that node is focusable;\n        //  if it isn't focusable, then return focus to the original node focused\n        //  on activation (or the configured `setReturnFocus` node)\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked, whether it's focusable or not; by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node)\n        returnFocus: config.returnFocusOnDeactivate && !isFocusable(target, config.tabbableOptions)\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  var checkFocusIn = function checkFocusIn(e) {\n    var target = getActualTarget(e);\n    var targetContained = findContainerIndex(target) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      e.stopImmediatePropagation();\n      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n    }\n  };\n\n  // Hijack key nav events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  var checkKeyNav = function checkKeyNav(event) {\n    var isBackward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var target = getActualTarget(event);\n    updateTabbableNodes();\n    var destinationNode = null;\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      var containerIndex = findContainerIndex(target);\n      var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back into...\n        if (isBackward) {\n          // ...the last node in the last group\n          destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (isBackward) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        var startOfGroupIndex = findIndex(state.tabbableGroups, function (_ref2) {\n          var firstTabbableNode = _ref2.firstTabbableNode;\n          return target === firstTabbableNode;\n        });\n        if (startOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;\n          var destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.lastTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target, false);\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        var lastOfGroupIndex = findIndex(state.tabbableGroups, function (_ref3) {\n          var lastTabbableNode = _ref3.lastTabbableNode;\n          return target === lastTabbableNode;\n        });\n        if (lastOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;\n          var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];\n          destinationNode = _destinationGroup.firstTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target);\n        }\n      }\n    } else {\n      // no groups available\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n    if (destinationNode) {\n      if (isTabEvent(event)) {\n        // since tab natively moves focus, we wouldn't have a destination node unless we\n        //  were on the edge of a container and had to move to the next/previous edge, in\n        //  which case we want to prevent default to keep the browser from moving focus\n        //  to where it normally would\n        event.preventDefault();\n      }\n      tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  var checkKey = function checkKey(event) {\n    if (isEscapeEvent(event) && valueOrHandler(config.escapeDeactivates, event) !== false) {\n      event.preventDefault();\n      trap.deactivate();\n      return;\n    }\n    if (config.isKeyForward(event) || config.isKeyBackward(event)) {\n      checkKeyNav(event, config.isKeyBackward(event));\n    }\n  };\n  var checkClick = function checkClick(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target) >= 0) {\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  var addListeners = function addListeners() {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trapStack, trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function () {\n      tryFocus(getInitialFocusNode());\n    }) : tryFocus(getInitialFocusNode());\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false\n    });\n    return trap;\n  };\n  var removeListeners = function removeListeners() {\n    if (!state.active) {\n      return;\n    }\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n    return trap;\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n    get paused() {\n      return state.paused;\n    },\n    activate: function activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n      var onActivate = getOption(activateOptions, 'onActivate');\n      var onPostActivate = getOption(activateOptions, 'onPostActivate');\n      var checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n      if (onActivate) {\n        onActivate();\n      }\n      var finishActivation = function finishActivation() {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        if (onPostActivate) {\n          onPostActivate();\n        }\n      };\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);\n        return this;\n      }\n      finishActivation();\n      return this;\n    },\n    deactivate: function deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n      var options = _objectSpread2({\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus\n      }, deactivateOptions);\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n      activeFocusTraps.deactivateTrap(trapStack, trap);\n      var onDeactivate = getOption(options, 'onDeactivate');\n      var onPostDeactivate = getOption(options, 'onPostDeactivate');\n      var checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      var returnFocus = getOption(options, 'returnFocus', 'returnFocusOnDeactivate');\n      if (onDeactivate) {\n        onDeactivate();\n      }\n      var finishDeactivation = function finishDeactivation() {\n        delay(function () {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          if (onPostDeactivate) {\n            onPostDeactivate();\n          }\n        });\n      };\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n      finishDeactivation();\n      return this;\n    },\n    pause: function pause() {\n      if (state.paused || !state.active) {\n        return this;\n      }\n      state.paused = true;\n      removeListeners();\n      return this;\n    },\n    unpause: function unpause() {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n      state.paused = false;\n      updateTabbableNodes();\n      addListeners();\n      return this;\n    },\n    updateContainerElements: function updateContainerElements(containerElements) {\n      var elementsAsArray = [].concat(containerElements).filter(Boolean);\n      state.containers = elementsAsArray.map(function (element) {\n        return typeof element === 'string' ? doc.querySelector(element) : element;\n      });\n      if (state.active) {\n        updateTabbableNodes();\n      }\n      return this;\n    }\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n  return trap;\n};\nconst trapStack = [];\n/**\n * Helper to set up the FocusTrap component.\n *\n * @param {FocusTrapComponent} component The FocusTrap component.\n */\nfunction connectFocusTrap(component) {\n  const {\n    focusTrapEl\n  } = component;\n  if (!focusTrapEl) {\n    return;\n  }\n  if (focusTrapEl.tabIndex == null) {\n    focusTrapEl.tabIndex = -1;\n  }\n  const focusTrapOptions = {\n    clickOutsideDeactivates: true,\n    document: focusTrapEl.ownerDocument,\n    escapeDeactivates: false,\n    fallbackFocus: focusTrapEl,\n    setReturnFocus: el => {\n      focusElement(el);\n      return false;\n    },\n    tabbableOptions,\n    trapStack\n  };\n  component.focusTrap = createFocusTrap(focusTrapEl, focusTrapOptions);\n}\n/**\n * Helper to activate the FocusTrap component.\n *\n * @param {FocusTrapComponent} component The FocusTrap component.\n */\nfunction activateFocusTrap(component) {\n  if (!component.focusTrapDisabled) {\n    component.focusTrap?.activate();\n  }\n}\n/**\n * Helper to deactivate the FocusTrap component.\n *\n * @param {FocusTrapComponent} component The FocusTrap component.\n */\nfunction deactivateFocusTrap(component) {\n  component.focusTrap?.deactivate();\n}\n/**\n * Helper to update the element(s) that are used within the FocusTrap component.\n *\n * @param {FocusTrapComponent} component The FocusTrap component.\n * @example\n * const modal = document.querySelector(\"calcite-modal\");\n * const input = document.createElement(\"calcite-input\");\n * content.appendChild(input);\n * await input.componentOnReady();\n * await modal.updateFocusTrapElements();\n * requestAnimationFrame(() => input.setFocus());\n */\nfunction updateFocusTrapElements(component) {\n  component.focusTrap?.updateContainerElements(component.focusTrapEl);\n}\nexport { activateFocusTrap as a, connectFocusTrap as c, deactivateFocusTrap as d, updateFocusTrapElements as u };","map":{"version":3,"names":["w","tabbable","x","focusable","y","isTabbable","z","isFocusable","h","focusElement","A","tabbableOptions","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","_toPropertyKey","configurable","writable","_toPrimitive","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","String","Number","arg","activeFocusTraps","activateTrap","trapStack","trap","activeTrap","pause","trapIndex","indexOf","splice","deactivateTrap","unpause","isSelectableInput","node","tagName","toLowerCase","select","isEscapeEvent","e","keyCode","isTabEvent","isKeyForward","shiftKey","isKeyBackward","delay","fn","setTimeout","findIndex","arr","idx","every","valueOrHandler","_len","params","Array","_key","getActualTarget","event","shadowRoot","composedPath","internalTrapStack","createFocusTrap","elements","userOptions","doc","document","config","returnFocusOnDeactivate","escapeDeactivates","delayInitialFocus","state","containers","containerGroups","tabbableGroups","nodeFocusedBeforeActivation","mostRecentlyFocusedNode","active","paused","delayInitialFocusTimer","getOption","configOverrideOptions","optionName","configOptionName","findContainerIndex","element","_ref","container","tabbableNodes","contains","find","getNodeForOption","optionValue","_len2","_key2","Error","concat","querySelector","getInitialFocusNode","activeElement","firstTabbableGroup","firstTabbableNode","updateTabbableNodes","map","focusableNodes","lastTabbableNode","nextTabbableNode","forward","nodeIdx","n","slice","reverse","group","tryFocus","focus","preventScroll","getReturnFocusNode","previousActiveElement","checkPointerDown","clickOutsideDeactivates","deactivate","returnFocus","allowOutsideClick","preventDefault","checkFocusIn","targetContained","Document","stopImmediatePropagation","checkKeyNav","isBackward","destinationNode","containerIndex","containerGroup","startOfGroupIndex","_ref2","destinationGroupIndex","destinationGroup","lastOfGroupIndex","_ref3","_destinationGroupIndex","_destinationGroup","checkKey","checkClick","addListeners","addEventListener","capture","passive","removeListeners","removeEventListener","activate","activateOptions","onActivate","onPostActivate","checkCanFocusTrap","finishActivation","then","deactivateOptions","options","onDeactivate","onPostDeactivate","checkCanReturnFocus","clearTimeout","finishDeactivation","updateContainerElements","containerElements","elementsAsArray","Boolean","connectFocusTrap","component","focusTrapEl","tabIndex","focusTrapOptions","ownerDocument","fallbackFocus","setReturnFocus","el","focusTrap","activateFocusTrap","focusTrapDisabled","deactivateFocusTrap","updateFocusTrapElements","a","c","d","u"],"sources":["C:/code-challenge-react/frontend/node_modules/@esri/calcite-components/dist/components/focusTrapComponent.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.0.8-next.4\n */\nimport { w as tabbable, x as focusable, y as isTabbable, z as isFocusable, h as focusElement, A as tabbableOptions } from './dom.js';\n\n/*!\n* focus-trap 7.2.0\n* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE\n*/\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nvar activeFocusTraps = {\n  activateTrap: function activateTrap(trapStack, trap) {\n    if (trapStack.length > 0) {\n      var activeTrap = trapStack[trapStack.length - 1];\n      if (activeTrap !== trap) {\n        activeTrap.pause();\n      }\n    }\n    var trapIndex = trapStack.indexOf(trap);\n    if (trapIndex === -1) {\n      trapStack.push(trap);\n    } else {\n      // move this existing trap to the front of the queue\n      trapStack.splice(trapIndex, 1);\n      trapStack.push(trap);\n    }\n  },\n  deactivateTrap: function deactivateTrap(trapStack, trap) {\n    var trapIndex = trapStack.indexOf(trap);\n    if (trapIndex !== -1) {\n      trapStack.splice(trapIndex, 1);\n    }\n    if (trapStack.length > 0) {\n      trapStack[trapStack.length - 1].unpause();\n    }\n  }\n};\nvar isSelectableInput = function isSelectableInput(node) {\n  return node.tagName && node.tagName.toLowerCase() === 'input' && typeof node.select === 'function';\n};\nvar isEscapeEvent = function isEscapeEvent(e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\nvar isTabEvent = function isTabEvent(e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\n// checks for TAB by default\nvar isKeyForward = function isKeyForward(e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n// checks for SHIFT+TAB by default\nvar isKeyBackward = function isKeyBackward(e) {\n  return isTabEvent(e) && e.shiftKey;\n};\nvar delay = function delay(fn) {\n  return setTimeout(fn, 0);\n};\n\n// Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\nvar findIndex = function findIndex(arr, fn) {\n  var idx = -1;\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n\n  return idx;\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nvar valueOrHandler = function valueOrHandler(value) {\n  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    params[_key - 1] = arguments[_key];\n  }\n  return typeof value === 'function' ? value.apply(void 0, params) : value;\n};\nvar getActualTarget = function getActualTarget(event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function' ? event.composedPath()[0] : event.target;\n};\n\n// NOTE: this must be _outside_ `createFocusTrap()` to make sure all traps in this\n//  current instance use the same stack if `userOptions.trapStack` isn't specified\nvar internalTrapStack = [];\nvar createFocusTrap = function createFocusTrap(elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  var doc = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.document) || document;\n  var trapStack = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.trapStack) || internalTrapStack;\n  var config = _objectSpread2({\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    isKeyForward: isKeyForward,\n    isKeyBackward: isKeyBackward\n  }, userOptions);\n  var state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   firstTabbableNode: HTMLElement|null,\n    //   lastTabbableNode: HTMLElement|null,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [],\n    // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined\n  };\n  var trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  var getOption = function getOption(configOverrideOptions, optionName, configOptionName) {\n    return configOverrideOptions && configOverrideOptions[optionName] !== undefined ? configOverrideOptions[optionName] : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  var findContainerIndex = function findContainerIndex(element) {\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(function (_ref) {\n      var container = _ref.container,\n        tabbableNodes = _ref.tabbableNodes;\n      return container.contains(element) ||\n      // fall back to explicit tabbable search which will take into consideration any\n      //  web components if the `tabbableOptions.getShadowRoot` option was used for\n      //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n      //  look inside web components even if open)\n      tabbableNodes.find(function (node) {\n        return node === element;\n      });\n    });\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n  var getNodeForOption = function getNodeForOption(optionName) {\n    var optionValue = config[optionName];\n    if (typeof optionValue === 'function') {\n      for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        params[_key2 - 1] = arguments[_key2];\n      }\n      optionValue = optionValue.apply(void 0, params);\n    }\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\"`\".concat(optionName, \"` was specified but was not a node, or did not return a node\"));\n    }\n    var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      if (!node) {\n        throw new Error(\"`\".concat(optionName, \"` as selector refers to no known node\"));\n      }\n    }\n    return node;\n  };\n  var getInitialFocusNode = function getInitialFocusNode() {\n    var node = getNodeForOption('initialFocus');\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n    if (node === undefined) {\n      // option not specified: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        var firstTabbableGroup = state.tabbableGroups[0];\n        var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n    if (!node) {\n      throw new Error('Your focus-trap needs to have at least one focusable element');\n    }\n    return node;\n  };\n  var updateTabbableNodes = function updateTabbableNodes() {\n    state.containerGroups = state.containers.map(function (container) {\n      var tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes\n      var focusableNodes = focusable(container, config.tabbableOptions);\n      return {\n        container: container,\n        tabbableNodes: tabbableNodes,\n        focusableNodes: focusableNodes,\n        firstTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[0] : null,\n        lastTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : null,\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode: function nextTabbableNode(node) {\n          var forward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n          // NOTE: If tabindex is positive (in order to manipulate the tab order separate\n          //  from the DOM order), this __will not work__ because the list of focusableNodes,\n          //  while it contains tabbable nodes, does not sort its nodes in any order other\n          //  than DOM order, because it can't: Where would you place focusable (but not\n          //  tabbable) nodes in that order? They have no order, because they aren't tabbale...\n          // Support for positive tabindex is already broken and hard to manage (possibly\n          //  not supportable, TBD), so this isn't going to make things worse than they\n          //  already are, and at least makes things better for the majority of cases where\n          //  tabindex is either 0/unset or negative.\n          // FYI, positive tabindex issue: https://github.com/focus-trap/focus-trap/issues/375\n          var nodeIdx = focusableNodes.findIndex(function (n) {\n            return n === node;\n          });\n          if (nodeIdx < 0) {\n            return undefined;\n          }\n          if (forward) {\n            return focusableNodes.slice(nodeIdx + 1).find(function (n) {\n              return isTabbable(n, config.tabbableOptions);\n            });\n          }\n          return focusableNodes.slice(0, nodeIdx).reverse().find(function (n) {\n            return isTabbable(n, config.tabbableOptions);\n          });\n        }\n      };\n    });\n    state.tabbableGroups = state.containerGroups.filter(function (group) {\n      return group.tabbableNodes.length > 0;\n    });\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (state.tabbableGroups.length <= 0 && !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error('Your focus-trap must have at least one container with at least one tabbable node in it at all times');\n    }\n  };\n  var tryFocus = function tryFocus(node) {\n    if (node === false) {\n      return;\n    }\n    if (node === doc.activeElement) {\n      return;\n    }\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n    node.focus({\n      preventScroll: !!config.preventScroll\n    });\n    state.mostRecentlyFocusedNode = node;\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n  var getReturnFocusNode = function getReturnFocusNode(previousActiveElement) {\n    var node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  var checkPointerDown = function checkPointerDown(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // if, on deactivation, we should return focus to the node originally-focused\n        //  when the trap was activated (or the configured `setReturnFocus` node),\n        //  then assume it's also OK to return focus to the outside node that was\n        //  just clicked, causing deactivation, as long as that node is focusable;\n        //  if it isn't focusable, then return focus to the original node focused\n        //  on activation (or the configured `setReturnFocus` node)\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked, whether it's focusable or not; by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node)\n        returnFocus: config.returnFocusOnDeactivate && !isFocusable(target, config.tabbableOptions)\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  var checkFocusIn = function checkFocusIn(e) {\n    var target = getActualTarget(e);\n    var targetContained = findContainerIndex(target) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      e.stopImmediatePropagation();\n      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n    }\n  };\n\n  // Hijack key nav events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  var checkKeyNav = function checkKeyNav(event) {\n    var isBackward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var target = getActualTarget(event);\n    updateTabbableNodes();\n    var destinationNode = null;\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      var containerIndex = findContainerIndex(target);\n      var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back into...\n        if (isBackward) {\n          // ...the last node in the last group\n          destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (isBackward) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        var startOfGroupIndex = findIndex(state.tabbableGroups, function (_ref2) {\n          var firstTabbableNode = _ref2.firstTabbableNode;\n          return target === firstTabbableNode;\n        });\n        if (startOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;\n          var destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.lastTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target, false);\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        var lastOfGroupIndex = findIndex(state.tabbableGroups, function (_ref3) {\n          var lastTabbableNode = _ref3.lastTabbableNode;\n          return target === lastTabbableNode;\n        });\n        if (lastOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;\n          var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];\n          destinationNode = _destinationGroup.firstTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target);\n        }\n      }\n    } else {\n      // no groups available\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n    if (destinationNode) {\n      if (isTabEvent(event)) {\n        // since tab natively moves focus, we wouldn't have a destination node unless we\n        //  were on the edge of a container and had to move to the next/previous edge, in\n        //  which case we want to prevent default to keep the browser from moving focus\n        //  to where it normally would\n        event.preventDefault();\n      }\n      tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  var checkKey = function checkKey(event) {\n    if (isEscapeEvent(event) && valueOrHandler(config.escapeDeactivates, event) !== false) {\n      event.preventDefault();\n      trap.deactivate();\n      return;\n    }\n    if (config.isKeyForward(event) || config.isKeyBackward(event)) {\n      checkKeyNav(event, config.isKeyBackward(event));\n    }\n  };\n  var checkClick = function checkClick(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target) >= 0) {\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  var addListeners = function addListeners() {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trapStack, trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function () {\n      tryFocus(getInitialFocusNode());\n    }) : tryFocus(getInitialFocusNode());\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false\n    });\n    return trap;\n  };\n  var removeListeners = function removeListeners() {\n    if (!state.active) {\n      return;\n    }\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n    return trap;\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n    get paused() {\n      return state.paused;\n    },\n    activate: function activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n      var onActivate = getOption(activateOptions, 'onActivate');\n      var onPostActivate = getOption(activateOptions, 'onPostActivate');\n      var checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n      if (onActivate) {\n        onActivate();\n      }\n      var finishActivation = function finishActivation() {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        if (onPostActivate) {\n          onPostActivate();\n        }\n      };\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);\n        return this;\n      }\n      finishActivation();\n      return this;\n    },\n    deactivate: function deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n      var options = _objectSpread2({\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus\n      }, deactivateOptions);\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n      activeFocusTraps.deactivateTrap(trapStack, trap);\n      var onDeactivate = getOption(options, 'onDeactivate');\n      var onPostDeactivate = getOption(options, 'onPostDeactivate');\n      var checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      var returnFocus = getOption(options, 'returnFocus', 'returnFocusOnDeactivate');\n      if (onDeactivate) {\n        onDeactivate();\n      }\n      var finishDeactivation = function finishDeactivation() {\n        delay(function () {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          if (onPostDeactivate) {\n            onPostDeactivate();\n          }\n        });\n      };\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n      finishDeactivation();\n      return this;\n    },\n    pause: function pause() {\n      if (state.paused || !state.active) {\n        return this;\n      }\n      state.paused = true;\n      removeListeners();\n      return this;\n    },\n    unpause: function unpause() {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n      state.paused = false;\n      updateTabbableNodes();\n      addListeners();\n      return this;\n    },\n    updateContainerElements: function updateContainerElements(containerElements) {\n      var elementsAsArray = [].concat(containerElements).filter(Boolean);\n      state.containers = elementsAsArray.map(function (element) {\n        return typeof element === 'string' ? doc.querySelector(element) : element;\n      });\n      if (state.active) {\n        updateTabbableNodes();\n      }\n      return this;\n    }\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n  return trap;\n};\n\nconst trapStack = [];\n/**\n * Helper to set up the FocusTrap component.\n *\n * @param {FocusTrapComponent} component The FocusTrap component.\n */\nfunction connectFocusTrap(component) {\n  const { focusTrapEl } = component;\n  if (!focusTrapEl) {\n    return;\n  }\n  if (focusTrapEl.tabIndex == null) {\n    focusTrapEl.tabIndex = -1;\n  }\n  const focusTrapOptions = {\n    clickOutsideDeactivates: true,\n    document: focusTrapEl.ownerDocument,\n    escapeDeactivates: false,\n    fallbackFocus: focusTrapEl,\n    setReturnFocus: (el) => {\n      focusElement(el);\n      return false;\n    },\n    tabbableOptions,\n    trapStack\n  };\n  component.focusTrap = createFocusTrap(focusTrapEl, focusTrapOptions);\n}\n/**\n * Helper to activate the FocusTrap component.\n *\n * @param {FocusTrapComponent} component The FocusTrap component.\n */\nfunction activateFocusTrap(component) {\n  if (!component.focusTrapDisabled) {\n    component.focusTrap?.activate();\n  }\n}\n/**\n * Helper to deactivate the FocusTrap component.\n *\n * @param {FocusTrapComponent} component The FocusTrap component.\n */\nfunction deactivateFocusTrap(component) {\n  component.focusTrap?.deactivate();\n}\n/**\n * Helper to update the element(s) that are used within the FocusTrap component.\n *\n * @param {FocusTrapComponent} component The FocusTrap component.\n * @example\n * const modal = document.querySelector(\"calcite-modal\");\n * const input = document.createElement(\"calcite-input\");\n * content.appendChild(input);\n * await input.componentOnReady();\n * await modal.updateFocusTrapElements();\n * requestAnimationFrame(() => input.setFocus());\n */\nfunction updateFocusTrapElements(component) {\n  component.focusTrap?.updateContainerElements(component.focusTrapEl);\n}\n\nexport { activateFocusTrap as a, connectFocusTrap as c, deactivateFocusTrap as d, updateFocusTrapElements as u };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}