{"ast":null,"code":"/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { request } from \"./request.js\";\nvar FIVE_MINUTES_IN_MILLISECONDS = 5 * 60 * 1000;\nexport function fetchToken(url, requestOptions) {\n  var options = requestOptions;\n  // we generate a response, so we can't return the raw response\n  options.rawResponse = false;\n  return request(url, options).then(function (response) {\n    var r = {\n      token: response.access_token,\n      username: response.username,\n      expires: new Date(\n      // convert seconds in response to milliseconds and add the value to the current time to calculate a static expiration timestamp\n      // we subtract 5 minutes here to make sure that we refresh the token early if the user makes requests\n      Date.now() + response.expires_in * 1000 - FIVE_MINUTES_IN_MILLISECONDS),\n      ssl: response.ssl === true\n    };\n    if (response.refresh_token) {\n      r.refreshToken = response.refresh_token;\n    }\n    if (response.refresh_token_expires_in) {\n      r.refreshTokenExpires = new Date(\n      // convert seconds in response to milliseconds and add the value to the current time to calculate a static expiration timestamp\n      // we subtract 5 minutes here to make sure that we refresh the token early if the user makes requests\n      Date.now() + response.refresh_token_expires_in * 1000 - FIVE_MINUTES_IN_MILLISECONDS);\n    }\n    return r;\n  });\n}","map":{"version":3,"names":["request","FIVE_MINUTES_IN_MILLISECONDS","fetchToken","url","requestOptions","options","rawResponse","then","response","r","token","access_token","username","expires","Date","now","expires_in","ssl","refresh_token","refreshToken","refresh_token_expires_in","refreshTokenExpires"],"sources":["C:\\code-challenge-react\\node_modules\\@esri\\arcgis-rest-request\\src\\fetch-token.ts"],"sourcesContent":["/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { request } from \"./request.js\";\nimport { IRequestOptions } from \"./utils/IRequestOptions.js\";\nimport { ITokenRequestOptions } from \"./utils/ITokenRequestOptions.js\";\n\nconst FIVE_MINUTES_IN_MILLISECONDS = 5 * 60 * 1000;\n\ninterface IFetchTokenRawResponse {\n  access_token: string;\n  expires_in: number;\n  username: string;\n  ssl?: boolean;\n  refresh_token?: string;\n  refresh_token_expires_in?: number;\n}\n\nexport interface IFetchTokenResponse {\n  token: string;\n  expires: Date;\n  username: string;\n  ssl: boolean;\n  refreshToken?: string;\n  refreshTokenExpires?: Date;\n}\n\nexport function fetchToken(\n  url: string,\n  requestOptions: ITokenRequestOptions\n): Promise<IFetchTokenResponse> {\n  const options: IRequestOptions = requestOptions;\n\n  // we generate a response, so we can't return the raw response\n  options.rawResponse = false;\n\n  return request(url, options).then((response: IFetchTokenRawResponse) => {\n    const r: IFetchTokenResponse = {\n      token: response.access_token,\n      username: response.username,\n      expires: new Date(\n        // convert seconds in response to milliseconds and add the value to the current time to calculate a static expiration timestamp\n        // we subtract 5 minutes here to make sure that we refresh the token early if the user makes requests\n        Date.now() + response.expires_in * 1000 - FIVE_MINUTES_IN_MILLISECONDS\n      ),\n      ssl: response.ssl === true\n    };\n\n    if (response.refresh_token) {\n      r.refreshToken = response.refresh_token;\n    }\n\n    if (response.refresh_token_expires_in) {\n      r.refreshTokenExpires = new Date(\n        // convert seconds in response to milliseconds and add the value to the current time to calculate a static expiration timestamp\n        // we subtract 5 minutes here to make sure that we refresh the token early if the user makes requests\n        Date.now() +\n          response.refresh_token_expires_in * 1000 -\n          FIVE_MINUTES_IN_MILLISECONDS\n      );\n    }\n\n    return r;\n  });\n}\n"],"mappings":"AAAA;;AAGA,SAASA,OAAO,QAAQ,cAAc;AAItC,IAAMC,4BAA4B,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI;AAoBlD,OAAM,SAAUC,UAAUA,CACxBC,GAAW,EACXC,cAAoC;EAEpC,IAAMC,OAAO,GAAoBD,cAAc;EAE/C;EACAC,OAAO,CAACC,WAAW,GAAG,KAAK;EAE3B,OAAON,OAAO,CAACG,GAAG,EAAEE,OAAO,CAAC,CAACE,IAAI,CAAC,UAACC,QAAgC,EAAI;IACrE,IAAMC,CAAC,GAAwB;MAC7BC,KAAK,EAAEF,QAAQ,CAACG,YAAY;MAC5BC,QAAQ,EAAEJ,QAAQ,CAACI,QAAQ;MAC3BC,OAAO,EAAE,IAAIC,IAAI;MACf;MACA;MACAA,IAAI,CAACC,GAAG,EAAE,GAAGP,QAAQ,CAACQ,UAAU,GAAG,IAAI,GAAGf,4BAA4B,CACvE;MACDgB,GAAG,EAAET,QAAQ,CAACS,GAAG,KAAK;KACvB;IAED,IAAIT,QAAQ,CAACU,aAAa,EAAE;MAC1BT,CAAC,CAACU,YAAY,GAAGX,QAAQ,CAACU,aAAa;;IAGzC,IAAIV,QAAQ,CAACY,wBAAwB,EAAE;MACrCX,CAAC,CAACY,mBAAmB,GAAG,IAAIP,IAAI;MAC9B;MACA;MACAA,IAAI,CAACC,GAAG,EAAE,GACRP,QAAQ,CAACY,wBAAwB,GAAG,IAAI,GACxCnB,4BAA4B,CAC/B;;IAGH,OAAOQ,CAAC;EACV,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}