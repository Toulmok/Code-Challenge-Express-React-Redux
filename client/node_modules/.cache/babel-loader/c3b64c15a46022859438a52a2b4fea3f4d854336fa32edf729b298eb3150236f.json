{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport { MAX_ELEVATION_OFFSET as o } from \"../../../collections/Component/Material/shader/ComponentData.glsl.js\";\nimport { DoublePrecision as e } from \"../../../core/shaderLibrary/util/DoublePrecision.glsl.js\";\nimport { RgbaFloatEncoding as r } from \"../../../core/shaderLibrary/util/RgbaFloatEncoding.glsl.js\";\nimport { textureSize as t, texelFetch as a } from \"../../../core/shaderLibrary/util/WebGL2Utils.js\";\nimport { Float3DrawUniform as n } from \"../../../core/shaderModules/Float3DrawUniform.js\";\nimport { Float3PassUniform as l } from \"../../../core/shaderModules/Float3PassUniform.js\";\nimport { FloatPassUniform as d } from \"../../../core/shaderModules/FloatPassUniform.js\";\nimport { glsl as s } from \"../../../core/shaderModules/interfaces.js\";\nimport { Matrix3DrawUniform as m } from \"../../../core/shaderModules/Matrix3DrawUniform.js\";\nimport { Matrix3PassUniform as i } from \"../../../core/shaderModules/Matrix3PassUniform.js\";\nimport { Matrix4PassUniform as c } from \"../../../core/shaderModules/Matrix4PassUniform.js\";\nimport { createTexture2DDrawSizeUniforms as f } from \"../../../core/shaderModules/Texture2DDrawUniform.js\";\nimport { TextureSizeUniformType as u } from \"../../../core/shaderModules/TextureSizeUniformType.js\";\nimport { VertexAttribute as v } from \"../../../lib/VertexAttribute.js\";\nfunction p(p, x) {\n  const F = p.vertex;\n  F.include(r), F.uniforms.add(new d(\"distanceFalloffFactor\", o => o.distanceFalloffFactor)), F.code.add(s`float distanceBasedPerspectiveFactor(float distance) {\nreturn clamp(sqrt(distanceFalloffFactor / distance), 0.0, 1.0);\n}`), F.uniforms.add(f(\"componentDataTex\", o => o.componentDataTexture, x.hasWebGL2Context ? u.None : u.InvSize)), p.attributes.add(v.COMPONENTINDEX, \"float\"), F.constants.add(\"componentColorFieldOffset\", \"float\", 0), F.constants.add(\"componentOtherFieldOffset\", \"float\", 1), F.constants.add(\"componentVerticalOffsetFieldOffset\", \"float\", 2), F.constants.add(\"componentFieldCount\", \"float\", 3), F.constants.add(\"lineWidthFractionFactor\", \"float\", 8), F.constants.add(\"extensionLengthOffset\", \"float\", 128), F.constants.add(\"verticalOffsetScale\", \"float\", 2 * o), F.code.add(s`\n    vec2 _componentTextureCoords(float componentIndex, float fieldOffset) {\n      float fieldIndex = componentFieldCount * componentIndex + fieldOffset;\n\n      vec2 textureSizeInverse = ${t(x, \"componentDataTex\", !0)};\n\n      float colIndex = mod(fieldIndex, 1.0 / textureSizeInverse.x);\n      float rowIndex = floor(fieldIndex * textureSizeInverse.x);\n\n      return vec2(colIndex, rowIndex) + 0.5;\n    }\n\n    struct ComponentData {\n      vec4 color;\n      float lineWidth;\n      float extensionLength;\n      float type;\n      float verticalOffset;\n    };\n\n    ComponentData readComponentData() {\n      vec2 colorIndex = _componentTextureCoords(componentIndex, componentColorFieldOffset);\n      vec2 otherIndex = _componentTextureCoords(componentIndex, componentOtherFieldOffset);\n      vec2 verticalOffsetIndex = _componentTextureCoords(componentIndex, componentVerticalOffsetFieldOffset);\n\n      vec4 colorValue = ${a(x, \"componentDataTex\", \"colorIndex\")};\n      vec4 otherValue = ${a(x, \"componentDataTex\", \"otherIndex\")};\n      float verticalOffset = (rgba2float(${a(x, \"componentDataTex\", \"verticalOffsetIndex\")}) - 0.5) * verticalOffsetScale;\n\n      return ComponentData(\n        vec4(colorValue.rgb, colorValue.a * otherValue.w), // otherValue.w stores separate opacity\n        otherValue.x * (255.0 / lineWidthFractionFactor),\n        otherValue.y * 255.0 - extensionLengthOffset,\n        -(otherValue.z * 255.0) + 0.5, // SOLID (=0/255) needs to be > 0.0, SKETCHY (=1/255) needs to be <= 0;\n        verticalOffset\n      );\n    }\n  `), x.legacy ? F.code.add(s`vec3 _modelToWorldNormal(vec3 normal) {\nreturn (model * vec4(normal, 0.0)).xyz;\n}\nvec3 _modelToViewNormal(vec3 normal) {\nreturn (localView * model * vec4(normal, 0.0)).xyz;\n}`) : (F.uniforms.add(new m(\"transformNormalGlobalFromModel\", o => o.transformNormalGlobalFromModel)), F.code.add(s`vec3 _modelToWorldNormal(vec3 normal) {\nreturn transformNormalGlobalFromModel * normal;\n}`)), x.silhouette ? (p.attributes.add(v.NORMALA, \"vec3\"), p.attributes.add(v.NORMALB, \"vec3\"), F.code.add(s`vec3 worldNormal() {\nreturn _modelToWorldNormal(normalize(normalA + normalB));\n}`)) : (p.attributes.add(v.NORMAL, \"vec3\"), F.code.add(s`vec3 worldNormal() {\nreturn _modelToWorldNormal(normal);\n}`)), x.legacy ? F.code.add(s`void worldAndViewFromModelPosition(vec3 modelPos, float verticalOffset, out vec3 worldPos, out vec3 viewPos) {\nworldPos = (model * vec4(modelPos, 1.0)).xyz;\nviewPos = (localView * vec4(worldPos, 1.0)).xyz;\n}`) : (F.include(e, x), F.include(e, x), F.uniforms.add([new i(\"transformViewFromCameraRelativeRS\", o => o.transformViewFromCameraRelativeRS), new m(\"transformWorldFromModelRS\", o => o.transformWorldFromModelRS), new n(\"transformWorldFromModelTL\", o => o.transformWorldFromModelTL), new n(\"transformWorldFromModelTH\", o => o.transformWorldFromModelTH), new l(\"transformWorldFromViewTL\", o => o.transformWorldFromViewTL), new l(\"transformWorldFromViewTH\", o => o.transformWorldFromViewTH)]), F.code.add(s`\n      void worldAndViewFromModelPosition(vec3 modelPos, float verticalOffset, out vec3 worldPos, out vec3 viewPos) {\n        vec3 rotatedModelPosition = transformWorldFromModelRS * modelPos;\n\n        vec3 transformCameraRelativeFromModel = dpAdd(\n          transformWorldFromModelTL,\n          transformWorldFromModelTH,\n          -transformWorldFromViewTL,\n          -transformWorldFromViewTH\n        );\n\n        worldPos = transformCameraRelativeFromModel + rotatedModelPosition;\n\n        if (verticalOffset != 0.0) {\n          vec3 vUp = ${x.spherical ? s`normalize(transformWorldFromModelTL + rotatedModelPosition);` : s`vec3(0.0, 0.0, 1.0);`}\n          worldPos += verticalOffset * vUp;\n        }\n\n        viewPos = transformViewFromCameraRelativeRS * worldPos;\n      }\n    `)), F.uniforms.add(new c(\"transformProjFromView\", (o, e) => e.camera.projectionMatrix)), F.code.add(s`vec4 projFromViewPosition(vec3 position) {\nreturn transformProjFromView * vec4(position, 1.0);\n}`), F.code.add(s`float calculateExtensionLength(float extensionLength, float lineLength) {\nreturn extensionLength / (log2(max(1.0, 256.0 / lineLength)) * 0.2 + 1.0);\n}`);\n}\nfunction x(o) {\n  return o.mode === w.SKETCH || o.mode === w.MIXED;\n}\nfunction F(o) {\n  return o.mode === w.SOLID || o.mode === w.MIXED;\n}\nvar w, M;\n!function (o) {\n  o[o.SOLID = 0] = \"SOLID\", o[o.SKETCH = 1] = \"SKETCH\", o[o.MIXED = 2] = \"MIXED\", o[o.COUNT = 3] = \"COUNT\";\n}(w || (w = {})), function (o) {\n  o[o.REGULAR = 0] = \"REGULAR\", o[o.SILHOUETTE = 1] = \"SILHOUETTE\";\n}(M || (M = {}));\nexport { M as EdgeSilhouette, p as EdgeUtil, w as EdgeUtilMode, x as usesSketchLogic, F as usesSolidLogic };","map":{"version":3,"names":["MAX_ELEVATION_OFFSET","o","DoublePrecision","e","RgbaFloatEncoding","r","textureSize","t","texelFetch","a","Float3DrawUniform","n","Float3PassUniform","l","FloatPassUniform","d","glsl","s","Matrix3DrawUniform","m","Matrix3PassUniform","i","Matrix4PassUniform","c","createTexture2DDrawSizeUniforms","f","TextureSizeUniformType","u","VertexAttribute","v","p","x","F","vertex","include","uniforms","add","distanceFalloffFactor","code","componentDataTexture","hasWebGL2Context","None","InvSize","attributes","COMPONENTINDEX","constants","legacy","transformNormalGlobalFromModel","silhouette","NORMALA","NORMALB","NORMAL","transformViewFromCameraRelativeRS","transformWorldFromModelRS","transformWorldFromModelTL","transformWorldFromModelTH","transformWorldFromViewTL","transformWorldFromViewTH","spherical","camera","projectionMatrix","mode","w","SKETCH","MIXED","SOLID","M","COUNT","REGULAR","SILHOUETTE","EdgeSilhouette","EdgeUtil","EdgeUtilMode","usesSketchLogic","usesSolidLogic"],"sources":["C:/code-challenge-react/frontend/node_modules/@arcgis/core/views/3d/webgl-engine/shaders/sources/edgeRenderer/EdgeUtil.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport{MAX_ELEVATION_OFFSET as o}from\"../../../collections/Component/Material/shader/ComponentData.glsl.js\";import{DoublePrecision as e}from\"../../../core/shaderLibrary/util/DoublePrecision.glsl.js\";import{RgbaFloatEncoding as r}from\"../../../core/shaderLibrary/util/RgbaFloatEncoding.glsl.js\";import{textureSize as t,texelFetch as a}from\"../../../core/shaderLibrary/util/WebGL2Utils.js\";import{Float3DrawUniform as n}from\"../../../core/shaderModules/Float3DrawUniform.js\";import{Float3PassUniform as l}from\"../../../core/shaderModules/Float3PassUniform.js\";import{FloatPassUniform as d}from\"../../../core/shaderModules/FloatPassUniform.js\";import{glsl as s}from\"../../../core/shaderModules/interfaces.js\";import{Matrix3DrawUniform as m}from\"../../../core/shaderModules/Matrix3DrawUniform.js\";import{Matrix3PassUniform as i}from\"../../../core/shaderModules/Matrix3PassUniform.js\";import{Matrix4PassUniform as c}from\"../../../core/shaderModules/Matrix4PassUniform.js\";import{createTexture2DDrawSizeUniforms as f}from\"../../../core/shaderModules/Texture2DDrawUniform.js\";import{TextureSizeUniformType as u}from\"../../../core/shaderModules/TextureSizeUniformType.js\";import{VertexAttribute as v}from\"../../../lib/VertexAttribute.js\";function p(p,x){const F=p.vertex;F.include(r),F.uniforms.add(new d(\"distanceFalloffFactor\",(o=>o.distanceFalloffFactor))),F.code.add(s`float distanceBasedPerspectiveFactor(float distance) {\nreturn clamp(sqrt(distanceFalloffFactor / distance), 0.0, 1.0);\n}`),F.uniforms.add(f(\"componentDataTex\",(o=>o.componentDataTexture),x.hasWebGL2Context?u.None:u.InvSize)),p.attributes.add(v.COMPONENTINDEX,\"float\"),F.constants.add(\"componentColorFieldOffset\",\"float\",0),F.constants.add(\"componentOtherFieldOffset\",\"float\",1),F.constants.add(\"componentVerticalOffsetFieldOffset\",\"float\",2),F.constants.add(\"componentFieldCount\",\"float\",3),F.constants.add(\"lineWidthFractionFactor\",\"float\",8),F.constants.add(\"extensionLengthOffset\",\"float\",128),F.constants.add(\"verticalOffsetScale\",\"float\",2*o),F.code.add(s`\n    vec2 _componentTextureCoords(float componentIndex, float fieldOffset) {\n      float fieldIndex = componentFieldCount * componentIndex + fieldOffset;\n\n      vec2 textureSizeInverse = ${t(x,\"componentDataTex\",!0)};\n\n      float colIndex = mod(fieldIndex, 1.0 / textureSizeInverse.x);\n      float rowIndex = floor(fieldIndex * textureSizeInverse.x);\n\n      return vec2(colIndex, rowIndex) + 0.5;\n    }\n\n    struct ComponentData {\n      vec4 color;\n      float lineWidth;\n      float extensionLength;\n      float type;\n      float verticalOffset;\n    };\n\n    ComponentData readComponentData() {\n      vec2 colorIndex = _componentTextureCoords(componentIndex, componentColorFieldOffset);\n      vec2 otherIndex = _componentTextureCoords(componentIndex, componentOtherFieldOffset);\n      vec2 verticalOffsetIndex = _componentTextureCoords(componentIndex, componentVerticalOffsetFieldOffset);\n\n      vec4 colorValue = ${a(x,\"componentDataTex\",\"colorIndex\")};\n      vec4 otherValue = ${a(x,\"componentDataTex\",\"otherIndex\")};\n      float verticalOffset = (rgba2float(${a(x,\"componentDataTex\",\"verticalOffsetIndex\")}) - 0.5) * verticalOffsetScale;\n\n      return ComponentData(\n        vec4(colorValue.rgb, colorValue.a * otherValue.w), // otherValue.w stores separate opacity\n        otherValue.x * (255.0 / lineWidthFractionFactor),\n        otherValue.y * 255.0 - extensionLengthOffset,\n        -(otherValue.z * 255.0) + 0.5, // SOLID (=0/255) needs to be > 0.0, SKETCHY (=1/255) needs to be <= 0;\n        verticalOffset\n      );\n    }\n  `),x.legacy?F.code.add(s`vec3 _modelToWorldNormal(vec3 normal) {\nreturn (model * vec4(normal, 0.0)).xyz;\n}\nvec3 _modelToViewNormal(vec3 normal) {\nreturn (localView * model * vec4(normal, 0.0)).xyz;\n}`):(F.uniforms.add(new m(\"transformNormalGlobalFromModel\",(o=>o.transformNormalGlobalFromModel))),F.code.add(s`vec3 _modelToWorldNormal(vec3 normal) {\nreturn transformNormalGlobalFromModel * normal;\n}`)),x.silhouette?(p.attributes.add(v.NORMALA,\"vec3\"),p.attributes.add(v.NORMALB,\"vec3\"),F.code.add(s`vec3 worldNormal() {\nreturn _modelToWorldNormal(normalize(normalA + normalB));\n}`)):(p.attributes.add(v.NORMAL,\"vec3\"),F.code.add(s`vec3 worldNormal() {\nreturn _modelToWorldNormal(normal);\n}`)),x.legacy?F.code.add(s`void worldAndViewFromModelPosition(vec3 modelPos, float verticalOffset, out vec3 worldPos, out vec3 viewPos) {\nworldPos = (model * vec4(modelPos, 1.0)).xyz;\nviewPos = (localView * vec4(worldPos, 1.0)).xyz;\n}`):(F.include(e,x),F.include(e,x),F.uniforms.add([new i(\"transformViewFromCameraRelativeRS\",(o=>o.transformViewFromCameraRelativeRS)),new m(\"transformWorldFromModelRS\",(o=>o.transformWorldFromModelRS)),new n(\"transformWorldFromModelTL\",(o=>o.transformWorldFromModelTL)),new n(\"transformWorldFromModelTH\",(o=>o.transformWorldFromModelTH)),new l(\"transformWorldFromViewTL\",(o=>o.transformWorldFromViewTL)),new l(\"transformWorldFromViewTH\",(o=>o.transformWorldFromViewTH))]),F.code.add(s`\n      void worldAndViewFromModelPosition(vec3 modelPos, float verticalOffset, out vec3 worldPos, out vec3 viewPos) {\n        vec3 rotatedModelPosition = transformWorldFromModelRS * modelPos;\n\n        vec3 transformCameraRelativeFromModel = dpAdd(\n          transformWorldFromModelTL,\n          transformWorldFromModelTH,\n          -transformWorldFromViewTL,\n          -transformWorldFromViewTH\n        );\n\n        worldPos = transformCameraRelativeFromModel + rotatedModelPosition;\n\n        if (verticalOffset != 0.0) {\n          vec3 vUp = ${x.spherical?s`normalize(transformWorldFromModelTL + rotatedModelPosition);`:s`vec3(0.0, 0.0, 1.0);`}\n          worldPos += verticalOffset * vUp;\n        }\n\n        viewPos = transformViewFromCameraRelativeRS * worldPos;\n      }\n    `)),F.uniforms.add(new c(\"transformProjFromView\",((o,e)=>e.camera.projectionMatrix))),F.code.add(s`vec4 projFromViewPosition(vec3 position) {\nreturn transformProjFromView * vec4(position, 1.0);\n}`),F.code.add(s`float calculateExtensionLength(float extensionLength, float lineLength) {\nreturn extensionLength / (log2(max(1.0, 256.0 / lineLength)) * 0.2 + 1.0);\n}`)}function x(o){return o.mode===w.SKETCH||o.mode===w.MIXED}function F(o){return o.mode===w.SOLID||o.mode===w.MIXED}var w,M;!function(o){o[o.SOLID=0]=\"SOLID\",o[o.SKETCH=1]=\"SKETCH\",o[o.MIXED=2]=\"MIXED\",o[o.COUNT=3]=\"COUNT\"}(w||(w={})),function(o){o[o.REGULAR=0]=\"REGULAR\",o[o.SILHOUETTE=1]=\"SILHOUETTE\"}(M||(M={}));export{M as EdgeSilhouette,p as EdgeUtil,w as EdgeUtilMode,x as usesSketchLogic,F as usesSolidLogic};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}