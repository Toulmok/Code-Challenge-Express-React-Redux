{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport \"./has.js\";\nimport { strict as e } from \"./jsonMap.js\";\nimport { isSome as s, unwrapOr as t, isNone as r } from \"./maybe.js\";\nimport { getReferenceEllipsoid as i } from \"../geometry/ellipsoidUtils.js\";\nimport { earth as n, mars as a, moon as u } from \"../geometry/support/Ellipsoid.js\";\nimport { isEarth as c, isWKIDFromMars as o, isWKIDFromMoon as l } from \"../geometry/support/spatialReferenceUtils.js\";\nimport m from \"../geometry/support/WKIDUnitConversion.js\";\nconst f = 39.37,\n  d = n.radius * Math.PI / 200,\n  U = /UNIT\\[([^\\]]+)\\]\\]$/i,\n  q = m,\n  h = /UNIT\\[([^\\]]+)\\]/i,\n  B = new Set([4261, 4305, 4807, 4810, 4811, 4812, 4816, 4819, 4821, 4901, 4902, 37225, 104139, 104140]),\n  k = e()({\n    meter: \"meters\",\n    foot: \"feet\",\n    foot_us: \"us-feet\",\n    foot_clarke: \"clarke-feet\",\n    yard_clarke: \"clarke-yards\",\n    link_clarke: \"clarke-links\",\n    yard_sears: \"sears-yards\",\n    foot_sears: \"sears-feet\",\n    chain_sears: \"sears-chains\",\n    chain_benoit_1895_b: \"benoit-1895-b-chains\",\n    yard_indian: \"indian-yards\",\n    yard_indian_1937: \"indian-1937-yards\",\n    foot_gold_coast: \"gold-coast-feet\",\n    chain_sears_1922_truncated: \"sears-1922-truncated-chains\",\n    \"50_kilometers\": \"50-kilometers\",\n    \"150_kilometers\": \"150-kilometers\"\n  }),\n  b = e => e * e,\n  p = e => e * e * e,\n  y = {\n    length: {\n      baseUnit: \"meters\",\n      units: {\n        millimeters: {\n          inBaseUnits: .001\n        },\n        centimeters: {\n          inBaseUnits: .01\n        },\n        decimeters: {\n          inBaseUnits: .1\n        },\n        meters: {\n          inBaseUnits: 1\n        },\n        kilometers: {\n          inBaseUnits: 1e3\n        },\n        inches: {\n          inBaseUnits: .0254\n        },\n        feet: {\n          inBaseUnits: .3048\n        },\n        yards: {\n          inBaseUnits: .9144\n        },\n        miles: {\n          inBaseUnits: 1609.344\n        },\n        \"nautical-miles\": {\n          inBaseUnits: 1852\n        },\n        \"us-feet\": {\n          inBaseUnits: 1200 / 3937\n        }\n      }\n    },\n    area: {\n      baseUnit: \"square-meters\",\n      units: {\n        \"square-millimeters\": {\n          inBaseUnits: b(.001)\n        },\n        \"square-centimeters\": {\n          inBaseUnits: b(.01)\n        },\n        \"square-decimeters\": {\n          inBaseUnits: b(.1)\n        },\n        \"square-meters\": {\n          inBaseUnits: 1\n        },\n        \"square-kilometers\": {\n          inBaseUnits: b(1e3)\n        },\n        \"square-inches\": {\n          inBaseUnits: b(.0254)\n        },\n        \"square-feet\": {\n          inBaseUnits: b(.3048)\n        },\n        \"square-yards\": {\n          inBaseUnits: b(.9144)\n        },\n        \"square-miles\": {\n          inBaseUnits: b(1609.344)\n        },\n        \"square-us-feet\": {\n          inBaseUnits: b(1200 / 3937)\n        },\n        acres: {\n          inBaseUnits: .0015625 * b(1609.344)\n        },\n        ares: {\n          inBaseUnits: 100\n        },\n        hectares: {\n          inBaseUnits: 1e4\n        }\n      }\n    },\n    volume: {\n      baseUnit: \"liters\",\n      units: {\n        liters: {\n          inBaseUnits: 1\n        },\n        \"cubic-millimeters\": {\n          inBaseUnits: 1e3 * p(.001)\n        },\n        \"cubic-centimeters\": {\n          inBaseUnits: 1e3 * p(.01)\n        },\n        \"cubic-decimeters\": {\n          inBaseUnits: 1e3 * p(.1)\n        },\n        \"cubic-meters\": {\n          inBaseUnits: 1e3\n        },\n        \"cubic-kilometers\": {\n          inBaseUnits: 1e3 * p(1e3)\n        },\n        \"cubic-inches\": {\n          inBaseUnits: 1e3 * p(.0254)\n        },\n        \"cubic-feet\": {\n          inBaseUnits: 1e3 * p(.3048)\n        },\n        \"cubic-yards\": {\n          inBaseUnits: 1e3 * p(.9144)\n        },\n        \"cubic-miles\": {\n          inBaseUnits: 1e3 * p(1609.344)\n        }\n      }\n    },\n    angle: {\n      baseUnit: \"radians\",\n      units: {\n        radians: {\n          inBaseUnits: 1\n        },\n        degrees: {\n          inBaseUnits: Math.PI / 180\n        }\n      }\n    }\n  },\n  _ = (() => {\n    const e = {};\n    for (const s in y) for (const t in y[s].units) e[t] = s;\n    return e;\n  })();\nfunction M(e, s, t) {\n  return e * y[t].units[s].inBaseUnits;\n}\nfunction g(e, s, t) {\n  return e / y[t].units[s].inBaseUnits;\n}\nconst w = [\"metric\", \"imperial\", \"square-inches\", \"square-feet\", \"square-yards\", \"square-miles\", \"square-us-feet\", \"square-meters\", \"square-kilometers\", \"acres\", \"ares\", \"hectares\"],\n  S = [\"metric\", \"imperial\", \"inches\", \"feet\", \"yards\", \"miles\", \"nautical-miles\", \"us-feet\", \"meters\", \"kilometers\"],\n  D = new Map([[\"meters\", \"square-meters\"], [\"feet\", \"square-feet\"], [\"us-feet\", \"square-us-feet\"]]);\nfunction j(e) {\n  return \"imperial\" === e || \"metric\" === e;\n}\nfunction I(e) {\n  const s = _[e];\n  if (!s) throw new Error(\"unknown type\");\n  return s;\n}\nfunction P(e) {\n  return y[e].baseUnit;\n}\nfunction C(e) {\n  return P(I(e));\n}\nfunction x(e) {\n  let s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return s = s || I(e), y[s].baseUnit === e;\n}\nfunction N(e, s, t) {\n  if (s === t) return e;\n  const r = I(s);\n  if (r !== I(t)) throw new Error(\"incompatible units\");\n  const i = x(s, r) ? e : M(e, s, r);\n  return x(t, r) ? i : g(i, t, r);\n}\nfunction v(e, s, t) {\n  switch (t) {\n    case \"metric\":\n      return O(e, s);\n    case \"imperial\":\n      return K(e, s);\n    default:\n      return t;\n  }\n}\nfunction E(e, s, t) {\n  switch (t) {\n    case \"metric\":\n      return J(e, s);\n    case \"imperial\":\n      return R(e, s);\n    default:\n      return t;\n  }\n}\nfunction F(e, s, t) {\n  switch (t) {\n    case \"metric\":\n      return A(e, s);\n    case \"imperial\":\n      return T(e, s);\n    default:\n      return t;\n  }\n}\nfunction O(e, s) {\n  const t = N(e, s, \"meters\");\n  return Math.abs(t) < 3e3 ? \"meters\" : \"kilometers\";\n}\nfunction J(e, s) {\n  const t = N(e, s, \"meters\");\n  return Math.abs(t) < 1e5 ? \"meters\" : \"kilometers\";\n}\nfunction K(e, s) {\n  const t = N(e, s, \"feet\");\n  return Math.abs(t) < 1e3 ? \"feet\" : \"miles\";\n}\nfunction R(e, s) {\n  const t = N(e, s, \"feet\");\n  return Math.abs(t) < 1e5 ? \"feet\" : \"miles\";\n}\nfunction A(e, s) {\n  const t = N(e, s, \"square-meters\");\n  return Math.abs(t) < 3e6 ? \"square-meters\" : \"square-kilometers\";\n}\nfunction T(e, s) {\n  const t = N(e, s, \"square-feet\");\n  return Math.abs(t) < 1e6 ? \"square-feet\" : \"square-miles\";\n}\nfunction Y(e, s, t) {\n  return N(e, s, \"meters\") / (t * Math.PI / 180);\n}\nfunction G(e) {\n  return k.fromJSON(e.toLowerCase()) || null;\n}\nfunction H(e) {\n  return k.toJSON(e) || null;\n}\nfunction L(e) {\n  if (s(e) && !c(e)) return 1;\n  const t = $(e);\n  return t > 1e5 ? 1 : t;\n}\nfunction W(e) {\n  return $(e) >= i(e).metersPerDegree ? \"meters\" : X(e);\n}\nfunction $(e) {\n  let s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : n.metersPerDegree;\n  return t(z(e, !0), s);\n}\nfunction z(e) {\n  let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !1;\n  const r = s(e) ? e.wkid : null,\n    i = s(e) ? e.wkt : null;\n  let n = null;\n  if (r) {\n    if (o(r)) return a.metersPerDegree;\n    if (l(r)) return u.metersPerDegree;\n    n = q.values[q[r]], !n && t && B.has(r) && (n = d);\n  } else i && (re(i) ? n = Q(U.exec(i), n) : te(i) && (n = Q(h.exec(i), n)));\n  return n;\n}\nfunction Q(e, s) {\n  return e && e[1] ? V(e[1]) : s;\n}\nfunction V(e) {\n  return parseFloat(e.split(\",\")[1]);\n}\nfunction X(e) {\n  const t = s(e) ? e.wkid : null,\n    r = s(e) ? e.wkt : null;\n  let i = null;\n  if (t) i = q.units[q[t]];else if (r) {\n    const e = re(r) ? U : te(r) ? h : null;\n    if (e) {\n      const s = e.exec(r);\n      s && s[1] && (i = ne(s[1]));\n    }\n  }\n  return s(i) ? G(i) : null;\n}\nfunction Z(e) {\n  const s = X(e);\n  return r(s) || !S.includes(s) ? null : s;\n}\nfunction ee(e) {\n  const s = W(e);\n  return r(s) || !S.includes(s) ? null : s;\n}\nfunction se(e) {\n  const s = X(e);\n  return r(s) ? null : D.get(s);\n}\nfunction te(e) {\n  return /^GEOCCS/i.test(e);\n}\nfunction re(e) {\n  return /^PROJCS/i.test(e);\n}\nconst ie = 1e-7;\nfunction ne(e) {\n  const s = /[\\\\\"\\\\']{1}([^\\\\\"\\\\']+)/.exec(e);\n  let t = s && s[1];\n  if (!t || !q.units.includes(t)) {\n    const s = V(e);\n    t = null;\n    const r = q.values;\n    for (let e = 0; e < r.length; ++e) if (Math.abs(s - r[e]) < ie) {\n      t = q.units[e];\n      break;\n    }\n  }\n  return t;\n}\nfunction ae(e) {\n  const s = X(e);\n  if (r(s)) return null;\n  switch (s) {\n    case \"feet\":\n    case \"us-feet\":\n    case \"clarke-feet\":\n    case \"clarke-yards\":\n    case \"clarke-links\":\n    case \"sears-yards\":\n    case \"sears-feet\":\n    case \"sears-chains\":\n    case \"benoit-1895-b-chains\":\n    case \"indian-yards\":\n    case \"indian-1937-yards\":\n    case \"gold-coast-feet\":\n    case \"sears-1922-truncated-chains\":\n      return \"imperial\";\n    case \"50-kilometers\":\n    case \"150-kilometers\":\n    case \"meters\":\n      return \"metric\";\n  }\n  return null;\n}\nconst ue = {\n    esriAcres: \"acres\",\n    esriAres: \"ares\",\n    esriHectares: \"hectares\",\n    esriSquareCentimeters: \"square-centimeters\",\n    esriSquareDecimeters: \"square-decimeters\",\n    esriSquareFeet: \"square-feet\",\n    esriSquareInches: \"square-inches\",\n    esriSquareKilometers: \"square-kilometers\",\n    esriSquareMeters: \"square-meters\",\n    esriSquareMiles: \"square-miles\",\n    esriSquareMillimeters: \"square-millimeters\",\n    esriSquareUsFeet: \"square-us-feet\",\n    esriSquareYards: \"square-yards\"\n  },\n  ce = {\n    esriCentimeters: \"centimeters\",\n    esriDecimeters: \"decimeters\",\n    esriFeet: \"feet\",\n    esriInches: \"inches\",\n    esriKilometers: \"kilometers\",\n    esriMeters: \"meters\",\n    esriMiles: \"miles\",\n    esriMillimeters: \"millimeters\",\n    esriNauticalMiles: \"nautical-miles\",\n    esriYards: \"yards\"\n  },\n  oe = {\n    esriDUDecimalDegrees: \"degrees\",\n    esriDURadians: \"radians\"\n  },\n  le = e()(ue),\n  me = e()(ce),\n  fe = e()(oe);\nexport { fe as angleUnitsJSONMap, se as areaUnitFromSpatialReference, le as areaUnitsJSONMap, C as baseUnitForUnit, P as baseUnitForUnitType, N as convertUnit, ae as getDefaultUnitSystem, z as getMetersPerUnit, $ as getMetersPerUnitForSR, L as getMetersPerVerticalUnitForSR, X as getUnitString, W as getVerticalUnitStringForSR, f as inchesPerMeter, x as isBaseUnit, j as isMeasurementSystem, Y as lengthToDegrees, Z as lengthUnitFromSpatialReference, me as lengthUnitsJSONMap, w as measurementAreaUnits, S as measurementLengthUnits, F as preferredAreaUnit, T as preferredImperialAreaUnit, K as preferredImperialLengthUnit, R as preferredImperialVerticalLengthUnit, v as preferredLengthUnit, A as preferredMetricAreaUnit, O as preferredMetricLengthUnit, J as preferredMetricVerticalLengthUnit, E as preferredVerticalLengthUnit, G as unitFromRESTJSON, H as unitToRESTJSON, I as unitType, ee as verticalLengthUnitFromSpatialReference };","map":{"version":3,"names":["strict","e","isSome","s","unwrapOr","t","isNone","r","getReferenceEllipsoid","i","earth","n","mars","a","moon","u","isEarth","c","isWKIDFromMars","o","isWKIDFromMoon","l","m","f","d","radius","Math","PI","U","q","h","B","Set","k","meter","foot","foot_us","foot_clarke","yard_clarke","link_clarke","yard_sears","foot_sears","chain_sears","chain_benoit_1895_b","yard_indian","yard_indian_1937","foot_gold_coast","chain_sears_1922_truncated","b","p","y","length","baseUnit","units","millimeters","inBaseUnits","centimeters","decimeters","meters","kilometers","inches","feet","yards","miles","area","acres","ares","hectares","volume","liters","angle","radians","degrees","_","M","g","w","S","D","Map","j","I","Error","P","C","x","arguments","undefined","N","v","O","K","E","J","R","F","A","T","abs","Y","G","fromJSON","toLowerCase","H","toJSON","L","$","W","metersPerDegree","X","z","wkid","wkt","values","has","re","Q","exec","te","V","parseFloat","split","ne","Z","includes","ee","se","get","test","ie","ae","ue","esriAcres","esriAres","esriHectares","esriSquareCentimeters","esriSquareDecimeters","esriSquareFeet","esriSquareInches","esriSquareKilometers","esriSquareMeters","esriSquareMiles","esriSquareMillimeters","esriSquareUsFeet","esriSquareYards","ce","esriCentimeters","esriDecimeters","esriFeet","esriInches","esriKilometers","esriMeters","esriMiles","esriMillimeters","esriNauticalMiles","esriYards","oe","esriDUDecimalDegrees","esriDURadians","le","me","fe","angleUnitsJSONMap","areaUnitFromSpatialReference","areaUnitsJSONMap","baseUnitForUnit","baseUnitForUnitType","convertUnit","getDefaultUnitSystem","getMetersPerUnit","getMetersPerUnitForSR","getMetersPerVerticalUnitForSR","getUnitString","getVerticalUnitStringForSR","inchesPerMeter","isBaseUnit","isMeasurementSystem","lengthToDegrees","lengthUnitFromSpatialReference","lengthUnitsJSONMap","measurementAreaUnits","measurementLengthUnits","preferredAreaUnit","preferredImperialAreaUnit","preferredImperialLengthUnit","preferredImperialVerticalLengthUnit","preferredLengthUnit","preferredMetricAreaUnit","preferredMetricLengthUnit","preferredMetricVerticalLengthUnit","preferredVerticalLengthUnit","unitFromRESTJSON","unitToRESTJSON","unitType","verticalLengthUnitFromSpatialReference"],"sources":["C:/code-challenge-react/frontend/node_modules/@arcgis/core/core/unitUtils.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport\"./has.js\";import{strict as e}from\"./jsonMap.js\";import{isSome as s,unwrapOr as t,isNone as r}from\"./maybe.js\";import{getReferenceEllipsoid as i}from\"../geometry/ellipsoidUtils.js\";import{earth as n,mars as a,moon as u}from\"../geometry/support/Ellipsoid.js\";import{isEarth as c,isWKIDFromMars as o,isWKIDFromMoon as l}from\"../geometry/support/spatialReferenceUtils.js\";import m from\"../geometry/support/WKIDUnitConversion.js\";const f=39.37,d=n.radius*Math.PI/200,U=/UNIT\\[([^\\]]+)\\]\\]$/i,q=m,h=/UNIT\\[([^\\]]+)\\]/i,B=new Set([4261,4305,4807,4810,4811,4812,4816,4819,4821,4901,4902,37225,104139,104140]),k=e()({meter:\"meters\",foot:\"feet\",foot_us:\"us-feet\",foot_clarke:\"clarke-feet\",yard_clarke:\"clarke-yards\",link_clarke:\"clarke-links\",yard_sears:\"sears-yards\",foot_sears:\"sears-feet\",chain_sears:\"sears-chains\",chain_benoit_1895_b:\"benoit-1895-b-chains\",yard_indian:\"indian-yards\",yard_indian_1937:\"indian-1937-yards\",foot_gold_coast:\"gold-coast-feet\",chain_sears_1922_truncated:\"sears-1922-truncated-chains\",\"50_kilometers\":\"50-kilometers\",\"150_kilometers\":\"150-kilometers\"}),b=e=>e*e,p=e=>e*e*e,y={length:{baseUnit:\"meters\",units:{millimeters:{inBaseUnits:.001},centimeters:{inBaseUnits:.01},decimeters:{inBaseUnits:.1},meters:{inBaseUnits:1},kilometers:{inBaseUnits:1e3},inches:{inBaseUnits:.0254},feet:{inBaseUnits:.3048},yards:{inBaseUnits:.9144},miles:{inBaseUnits:1609.344},\"nautical-miles\":{inBaseUnits:1852},\"us-feet\":{inBaseUnits:1200/3937}}},area:{baseUnit:\"square-meters\",units:{\"square-millimeters\":{inBaseUnits:b(.001)},\"square-centimeters\":{inBaseUnits:b(.01)},\"square-decimeters\":{inBaseUnits:b(.1)},\"square-meters\":{inBaseUnits:1},\"square-kilometers\":{inBaseUnits:b(1e3)},\"square-inches\":{inBaseUnits:b(.0254)},\"square-feet\":{inBaseUnits:b(.3048)},\"square-yards\":{inBaseUnits:b(.9144)},\"square-miles\":{inBaseUnits:b(1609.344)},\"square-us-feet\":{inBaseUnits:b(1200/3937)},acres:{inBaseUnits:.0015625*b(1609.344)},ares:{inBaseUnits:100},hectares:{inBaseUnits:1e4}}},volume:{baseUnit:\"liters\",units:{liters:{inBaseUnits:1},\"cubic-millimeters\":{inBaseUnits:1e3*p(.001)},\"cubic-centimeters\":{inBaseUnits:1e3*p(.01)},\"cubic-decimeters\":{inBaseUnits:1e3*p(.1)},\"cubic-meters\":{inBaseUnits:1e3},\"cubic-kilometers\":{inBaseUnits:1e3*p(1e3)},\"cubic-inches\":{inBaseUnits:1e3*p(.0254)},\"cubic-feet\":{inBaseUnits:1e3*p(.3048)},\"cubic-yards\":{inBaseUnits:1e3*p(.9144)},\"cubic-miles\":{inBaseUnits:1e3*p(1609.344)}}},angle:{baseUnit:\"radians\",units:{radians:{inBaseUnits:1},degrees:{inBaseUnits:Math.PI/180}}}},_=(()=>{const e={};for(const s in y)for(const t in y[s].units)e[t]=s;return e})();function M(e,s,t){return e*y[t].units[s].inBaseUnits}function g(e,s,t){return e/y[t].units[s].inBaseUnits}const w=[\"metric\",\"imperial\",\"square-inches\",\"square-feet\",\"square-yards\",\"square-miles\",\"square-us-feet\",\"square-meters\",\"square-kilometers\",\"acres\",\"ares\",\"hectares\"],S=[\"metric\",\"imperial\",\"inches\",\"feet\",\"yards\",\"miles\",\"nautical-miles\",\"us-feet\",\"meters\",\"kilometers\"],D=new Map([[\"meters\",\"square-meters\"],[\"feet\",\"square-feet\"],[\"us-feet\",\"square-us-feet\"]]);function j(e){return\"imperial\"===e||\"metric\"===e}function I(e){const s=_[e];if(!s)throw new Error(\"unknown type\");return s}function P(e){return y[e].baseUnit}function C(e){return P(I(e))}function x(e,s=null){return s=s||I(e),y[s].baseUnit===e}function N(e,s,t){if(s===t)return e;const r=I(s);if(r!==I(t))throw new Error(\"incompatible units\");const i=x(s,r)?e:M(e,s,r);return x(t,r)?i:g(i,t,r)}function v(e,s,t){switch(t){case\"metric\":return O(e,s);case\"imperial\":return K(e,s);default:return t}}function E(e,s,t){switch(t){case\"metric\":return J(e,s);case\"imperial\":return R(e,s);default:return t}}function F(e,s,t){switch(t){case\"metric\":return A(e,s);case\"imperial\":return T(e,s);default:return t}}function O(e,s){const t=N(e,s,\"meters\");return Math.abs(t)<3e3?\"meters\":\"kilometers\"}function J(e,s){const t=N(e,s,\"meters\");return Math.abs(t)<1e5?\"meters\":\"kilometers\"}function K(e,s){const t=N(e,s,\"feet\");return Math.abs(t)<1e3?\"feet\":\"miles\"}function R(e,s){const t=N(e,s,\"feet\");return Math.abs(t)<1e5?\"feet\":\"miles\"}function A(e,s){const t=N(e,s,\"square-meters\");return Math.abs(t)<3e6?\"square-meters\":\"square-kilometers\"}function T(e,s){const t=N(e,s,\"square-feet\");return Math.abs(t)<1e6?\"square-feet\":\"square-miles\"}function Y(e,s,t){return N(e,s,\"meters\")/(t*Math.PI/180)}function G(e){return k.fromJSON(e.toLowerCase())||null}function H(e){return k.toJSON(e)||null}function L(e){if(s(e)&&!c(e))return 1;const t=$(e);return t>1e5?1:t}function W(e){return $(e)>=i(e).metersPerDegree?\"meters\":X(e)}function $(e,s=n.metersPerDegree){return t(z(e,!0),s)}function z(e,t=!1){const r=s(e)?e.wkid:null,i=s(e)?e.wkt:null;let n=null;if(r){if(o(r))return a.metersPerDegree;if(l(r))return u.metersPerDegree;n=q.values[q[r]],!n&&t&&B.has(r)&&(n=d)}else i&&(re(i)?n=Q(U.exec(i),n):te(i)&&(n=Q(h.exec(i),n)));return n}function Q(e,s){return e&&e[1]?V(e[1]):s}function V(e){return parseFloat(e.split(\",\")[1])}function X(e){const t=s(e)?e.wkid:null,r=s(e)?e.wkt:null;let i=null;if(t)i=q.units[q[t]];else if(r){const e=re(r)?U:te(r)?h:null;if(e){const s=e.exec(r);s&&s[1]&&(i=ne(s[1]))}}return s(i)?G(i):null}function Z(e){const s=X(e);return r(s)||!S.includes(s)?null:s}function ee(e){const s=W(e);return r(s)||!S.includes(s)?null:s}function se(e){const s=X(e);return r(s)?null:D.get(s)}function te(e){return/^GEOCCS/i.test(e)}function re(e){return/^PROJCS/i.test(e)}const ie=1e-7;function ne(e){const s=/[\\\\\"\\\\']{1}([^\\\\\"\\\\']+)/.exec(e);let t=s&&s[1];if(!t||!q.units.includes(t)){const s=V(e);t=null;const r=q.values;for(let e=0;e<r.length;++e)if(Math.abs(s-r[e])<ie){t=q.units[e];break}}return t}function ae(e){const s=X(e);if(r(s))return null;switch(s){case\"feet\":case\"us-feet\":case\"clarke-feet\":case\"clarke-yards\":case\"clarke-links\":case\"sears-yards\":case\"sears-feet\":case\"sears-chains\":case\"benoit-1895-b-chains\":case\"indian-yards\":case\"indian-1937-yards\":case\"gold-coast-feet\":case\"sears-1922-truncated-chains\":return\"imperial\";case\"50-kilometers\":case\"150-kilometers\":case\"meters\":return\"metric\"}return null}const ue={esriAcres:\"acres\",esriAres:\"ares\",esriHectares:\"hectares\",esriSquareCentimeters:\"square-centimeters\",esriSquareDecimeters:\"square-decimeters\",esriSquareFeet:\"square-feet\",esriSquareInches:\"square-inches\",esriSquareKilometers:\"square-kilometers\",esriSquareMeters:\"square-meters\",esriSquareMiles:\"square-miles\",esriSquareMillimeters:\"square-millimeters\",esriSquareUsFeet:\"square-us-feet\",esriSquareYards:\"square-yards\"},ce={esriCentimeters:\"centimeters\",esriDecimeters:\"decimeters\",esriFeet:\"feet\",esriInches:\"inches\",esriKilometers:\"kilometers\",esriMeters:\"meters\",esriMiles:\"miles\",esriMillimeters:\"millimeters\",esriNauticalMiles:\"nautical-miles\",esriYards:\"yards\"},oe={esriDUDecimalDegrees:\"degrees\",esriDURadians:\"radians\"},le=e()(ue),me=e()(ce),fe=e()(oe);export{fe as angleUnitsJSONMap,se as areaUnitFromSpatialReference,le as areaUnitsJSONMap,C as baseUnitForUnit,P as baseUnitForUnitType,N as convertUnit,ae as getDefaultUnitSystem,z as getMetersPerUnit,$ as getMetersPerUnitForSR,L as getMetersPerVerticalUnitForSR,X as getUnitString,W as getVerticalUnitStringForSR,f as inchesPerMeter,x as isBaseUnit,j as isMeasurementSystem,Y as lengthToDegrees,Z as lengthUnitFromSpatialReference,me as lengthUnitsJSONMap,w as measurementAreaUnits,S as measurementLengthUnits,F as preferredAreaUnit,T as preferredImperialAreaUnit,K as preferredImperialLengthUnit,R as preferredImperialVerticalLengthUnit,v as preferredLengthUnit,A as preferredMetricAreaUnit,O as preferredMetricLengthUnit,J as preferredMetricVerticalLengthUnit,E as preferredVerticalLengthUnit,G as unitFromRESTJSON,H as unitToRESTJSON,I as unitType,ee as verticalLengthUnitFromSpatialReference};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}