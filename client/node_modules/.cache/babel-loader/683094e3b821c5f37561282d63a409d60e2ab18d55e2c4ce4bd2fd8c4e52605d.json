{"ast":null,"code":"import Portal from '@arcgis/core/portal/Portal';\nimport PortalItem from '@arcgis/core/portal/PortalItem';\nimport { unwrapOrThrow } from '@arcgis/core/core/maybe';\nimport arcgisError from '@arcgis/core/core/Error';\nimport { LOAD_PORTAL, SET_IDENTITY, GET_USER_ITEMS, SET_USER_ITEMS, GET_USER_TAGS, SET_USER_TAGS, UPDATE_ITEM_TAGS } from '../constants/action-types';\nconst portal = new Portal({\n  authMode: 'immediate'\n});\nconst qParamArray = ['title', 'type', 'created', 'tag'];\n\n/**\r\n * Middleware function with the signature\r\n *\r\n * storeInstance =>\r\n * functionToCallWithAnActionThatWillSendItToTheNextMiddleware =>\r\n * actionThatDispatchWasCalledWith =>\r\n * valueToUseAsTheReturnValueOfTheDispatchCall\r\n *\r\n * Typically written as\r\n *\r\n * store => next => action => result\r\n */\nconst arcgisMiddleWare = store => next => action => {\n  switch (action.type) {\n    case LOAD_PORTAL:\n      {\n        portal.load().then(() => {\n          store.dispatch({\n            type: SET_IDENTITY,\n            username: portal.user.username,\n            fullname: portal.user.fullName,\n            email: portal.user.email,\n            thumbnailurl: portal.user.thumbnailUrl\n          });\n          store.dispatch({\n            type: GET_USER_ITEMS\n          });\n        }).then(() => {\n          store.dispatch({\n            type: GET_USER_TAGS\n          });\n        });\n        break;\n      }\n    case GET_USER_ITEMS:\n      {\n        //Does this sanitize?\n        let myUrlGet = new URL(window.location.href); //console.log(myUrlGet.toString())\n        let myUrlHas = new URLSearchParams(myUrlGet.search);\n        let qString = '';\n        if (myUrlHas.has(\"dcreated\")) {\n          let qDCreated = myUrlHas.get(\"dcreated\"); //console.log(qDCreated)\n          if (qDCreated !== '') {\n            let created = new Date(qDCreated);\n            let createdUnix = created.getTime().toString();\n            if (myUrlHas.get(\"rcreated\") === \"before\") {\n              createdUnix = '[0 TO ' + createdUnix + ']';\n            } else if (myUrlHas.get(\"rcreated\") === \"after\") {\n              createdUnix = '[' + createdUnix + ' TO 99999999999999]';\n            } //console.log(createdUnix)\n            myUrlHas.set(\"created\", createdUnix);\n          }\n        }\n        myUrlGet.search = myUrlHas.toString();\n        //const new_url = myUrlGet.toString(); console.log(new_url)\n        window.history.replaceState('', '', myUrlGet.search);\n        for (const field of qParamArray) {\n          if (myUrlHas.has(field)) {\n            if (myUrlGet.searchParams.get(field) !== '') {\n              qString += ' AND ' + field + ':' + myUrlGet.searchParams.get(field);\n            }\n          }\n        }\n        if (portal.user !== null) {\n          //console.log(\"query string is \" + qString)\n          try {\n            return portal.queryItems({\n              //portal.user.fetchItems() might be better\n              query: `owner:${portal.user.username}` + qString,\n              sortField: 'modified',\n              sortOrder: 'desc',\n              num: 20,\n              //max is 100, default is 10\n              start: 1\n            }).then(_ref => {\n              let {\n                results\n              } = _ref;\n              //console.log(results)\n              store.dispatch({\n                type: SET_USER_ITEMS,\n                userItems: results\n              });\n            });\n          } catch (err) {\n            console.log(err.message);\n          } finally {\n            console.log(portal.user.username + ' is getting items');\n          }\n        }\n        break;\n      }\n    case GET_USER_TAGS:\n      {\n        if (portal.user != null) {\n          try {\n            return portal.user.fetchTags().then(result => {\n              //console.log(result.map(({tag}) => tag))\n              store.dispatch({\n                type: SET_USER_TAGS,\n                userTags: result.map(_ref2 => {\n                  let {\n                    tag\n                  } = _ref2;\n                  return tag;\n                })\n              });\n            });\n          } catch (err) {\n            console.log(err.message);\n          } finally {\n            console.log(portal.user.username + ' is fetching tags');\n          }\n        }\n        break;\n      }\n    case UPDATE_ITEM_TAGS:\n      {\n        const tagsCsv = []; //: { id: string, tag: string, }[] = []\n        document.querySelectorAll(\"input.inputTags\").forEach(input => {\n          if (input.value !== '') {\n            tagsCsv.push({\n              id: input.id.replace('input', ''),\n              //(option as HTMLInputElement)\n              tag: input.value\n            });\n          }\n        }); //console.log(tagsCsv)\n        document.querySelectorAll(\"select.selectTags option:checked\").forEach(option => {\n          if (option.id !== '') {\n            tagsCsv.push({\n              id: option.id.replace(option.value, ''),\n              tag: option.value\n            });\n          }\n        }); //console.log(tagsCsv)\n\n        tagsCsv.forEach(item => {\n          //__esri.PortalItemUpdateParams\n          const portalItem = new PortalItem({\n            id: item.id\n          });\n          const tags = {\n            data: {\n              tags: item.tag\n            }\n          }; //{data: {tags:'tag'}}\n\n          try {\n            portalItem.id ? portalItem.load().then(() => unwrapOrThrow(portalItem.portal).signIn()).then(() => {\n              const t = tags && tags.data;\n              const i = {\n                method: \"post\"\n              };\n              let tagsJSON = portalItem.toJSON().tags;\n              i.query = {};\n              i.query.clearEmptyFields = true;\n              if (tagsJSON) {\n                tagsJSON.sort();\n                tagsJSON = tagsJSON.join(\", \");\n              } //console.log(itemJSON)\n\n              return null != t && \"object\" == typeof t && (i.query.tags = tagsJSON + \", \" + t.tags), portalItem.portal.request(`${portalItem.userItemUrl}/update`, i).then(() => portalItem.reload());\n            }).then(() => window.location.reload()) : Promise.reject(new arcgisError(\"portal:item-does-not-exist\", \"The item does not exist yet and cannot be updated\"));\n          } catch (err) {\n            console.log(err);\n          } finally {\n            console.log(portal.user.username + ' is updating tags');\n          }\n        });\n        return next(action);\n      }\n    default:\n      {\n        return next(action);\n      }\n  }\n};\nexport default arcgisMiddleWare;","map":{"version":3,"names":["Portal","PortalItem","unwrapOrThrow","arcgisError","LOAD_PORTAL","SET_IDENTITY","GET_USER_ITEMS","SET_USER_ITEMS","GET_USER_TAGS","SET_USER_TAGS","UPDATE_ITEM_TAGS","portal","authMode","qParamArray","arcgisMiddleWare","store","next","action","type","load","then","dispatch","username","user","fullname","fullName","email","thumbnailurl","thumbnailUrl","myUrlGet","URL","window","location","href","myUrlHas","URLSearchParams","search","qString","has","qDCreated","get","created","Date","createdUnix","getTime","toString","set","history","replaceState","field","searchParams","queryItems","query","sortField","sortOrder","num","start","_ref","results","userItems","err","console","log","message","fetchTags","result","userTags","map","_ref2","tag","tagsCsv","document","querySelectorAll","forEach","input","value","push","id","replace","option","item","portalItem","tags","data","signIn","t","i","method","tagsJSON","toJSON","clearEmptyFields","sort","join","request","userItemUrl","reload","Promise","reject"],"sources":["C:/code-challenge-react/frontend/src/middleware/arcgis-portal.js"],"sourcesContent":["import Portal from '@arcgis/core/portal/Portal'\r\nimport PortalItem from '@arcgis/core/portal/PortalItem'\r\nimport { unwrapOrThrow } from '@arcgis/core/core/maybe'\r\nimport arcgisError from '@arcgis/core/core/Error'\r\n\r\nimport {\r\n  LOAD_PORTAL,\r\n  SET_IDENTITY,\r\n  GET_USER_ITEMS,\r\n  SET_USER_ITEMS,\r\n  GET_USER_TAGS,\r\n  SET_USER_TAGS,\r\n  UPDATE_ITEM_TAGS,\r\n} from '../constants/action-types'\r\n\r\nconst portal = new Portal({ authMode: 'immediate' })\r\nconst qParamArray = ['title','type','created','tag']\r\n\r\n/**\r\n * Middleware function with the signature\r\n *\r\n * storeInstance =>\r\n * functionToCallWithAnActionThatWillSendItToTheNextMiddleware =>\r\n * actionThatDispatchWasCalledWith =>\r\n * valueToUseAsTheReturnValueOfTheDispatchCall\r\n *\r\n * Typically written as\r\n *\r\n * store => next => action => result\r\n */\r\nconst arcgisMiddleWare = store => next => (action) => {\r\n  switch (action.type) {\r\n    case LOAD_PORTAL: {\r\n      portal.load()\r\n      .then(() => {\r\n        store.dispatch({\r\n          type: SET_IDENTITY,\r\n          username: portal.user.username,\r\n          fullname: portal.user.fullName,\r\n          email: portal.user.email,\r\n          thumbnailurl: portal.user.thumbnailUrl,\r\n        })\r\n        store.dispatch({ type: GET_USER_ITEMS })\r\n      }).then(() => {\r\n        store.dispatch({ type: GET_USER_TAGS })\r\n      })\r\n      break\r\n    }\r\n\r\n    case GET_USER_ITEMS: {\r\n      //Does this sanitize?\r\n      let myUrlGet = new URL(window.location.href); //console.log(myUrlGet.toString())\r\n      let myUrlHas = new URLSearchParams(myUrlGet.search)\r\n      let qString = ''\r\n\r\n      if(myUrlHas.has(\"dcreated\")) {\r\n        let qDCreated = myUrlHas.get(\"dcreated\"); //console.log(qDCreated)\r\n        if((qDCreated !== '')){\r\n          let created = new Date(qDCreated)\r\n          let createdUnix = created.getTime().toString()\r\n          if(myUrlHas.get(\"rcreated\")===\"before\") {\r\n            createdUnix = '[0 TO ' + createdUnix + ']'\r\n          } else if (myUrlHas.get(\"rcreated\")===\"after\") {\r\n            createdUnix = '[' + createdUnix + ' TO 99999999999999]'\r\n          } //console.log(createdUnix)\r\n          myUrlHas.set(\"created\",createdUnix)\r\n        }\r\n      }\r\n\r\n      myUrlGet.search = myUrlHas.toString()\r\n      //const new_url = myUrlGet.toString(); console.log(new_url)\r\n      window.history.replaceState('','',myUrlGet.search)\r\n\r\n      for (const field of qParamArray) {\r\n        if(myUrlHas.has(field)) {\r\n          if((myUrlGet.searchParams.get(field) !== '')){\r\n            qString += ' AND ' + field + ':' + myUrlGet.searchParams.get(field)\r\n          }\r\n        }\r\n      }\r\n      \r\n      if (portal.user !== null) { //console.log(\"query string is \" + qString)\r\n        try { \r\n          return portal.queryItems({ //portal.user.fetchItems() might be better\r\n            query: `owner:${portal.user.username}` + qString,\r\n            sortField: 'modified',\r\n            sortOrder: 'desc',\r\n            num: 20, //max is 100, default is 10\r\n            start: 1,\r\n          })\r\n          .then(({ results }) => { //console.log(results)\r\n            store.dispatch({ \r\n              type: SET_USER_ITEMS, userItems: results,\r\n            })\r\n          })\r\n        }\r\n        catch(err) { console.log(err.message) }\r\n        finally { console.log(portal.user.username + ' is getting items') }\r\n      }\r\n      break\r\n    }\r\n\r\n    case GET_USER_TAGS: {\r\n      if (portal.user != null) {\r\n        try { \r\n          return portal.user.fetchTags()\r\n          .then((result) => { //console.log(result.map(({tag}) => tag))\r\n            store.dispatch({ \r\n              type: SET_USER_TAGS, userTags: result.map(({tag}) => tag)\r\n            })\r\n          })\r\n        }\r\n        catch(err) { console.log(err.message) }\r\n        finally { console.log(portal.user.username + ' is fetching tags') }\r\n      }\r\n      break\r\n    }\r\n\r\n    case UPDATE_ITEM_TAGS: {\r\n      const tagsCsv = [] //: { id: string, tag: string, }[] = []\r\n      document.querySelectorAll(\"input.inputTags\").forEach(input => {\r\n        if (input.value !== '') {\r\n          tagsCsv.push({\r\n            id: input.id.replace('input',''), //(option as HTMLInputElement)\r\n            tag: input.value,\r\n          })\r\n        }\r\n      }); //console.log(tagsCsv)\r\n      document.querySelectorAll(\"select.selectTags option:checked\").forEach(option => {\r\n        if (option.id !== '') {\r\n          tagsCsv.push({\r\n            id: option.id.replace((option.value),''),\r\n            tag: option.value,\r\n          })\r\n        }\r\n      }); //console.log(tagsCsv)\r\n\r\n      tagsCsv.forEach((item) => { //__esri.PortalItemUpdateParams\r\n        const portalItem = new PortalItem({id: item.id})\r\n        const tags = {data: {tags:item.tag}} //{data: {tags:'tag'}}\r\n\r\n        try{\r\n          portalItem.id?\r\n            portalItem.load()\r\n              .then((()=>unwrapOrThrow(portalItem.portal).signIn()))\r\n                .then(()=>{\r\n                    const t = tags&&tags.data\r\n                    const i = {method:\"post\"}\r\n                    let tagsJSON = (portalItem.toJSON()).tags\r\n                    i.query = {}\r\n                    i.query.clearEmptyFields = true\r\n\r\n                    if(tagsJSON) {\r\n                      tagsJSON.sort()\r\n                      tagsJSON=tagsJSON.join(\", \")\r\n                    } //console.log(itemJSON)\r\n                \r\n                    return null!=t&&(\r\n                        \"object\"==typeof t&&(i.query.tags=(tagsJSON + \", \" + t.tags))\r\n                      ),\r\n                      portalItem.portal.request(`${portalItem.userItemUrl}/update`,i)\r\n                        .then((()=>portalItem.reload()))\r\n                })\r\n                  .then(() => window.location.reload())\r\n          :Promise.reject(\r\n            new arcgisError(\"portal:item-does-not-exist\",\r\n              \"The item does not exist yet and cannot be updated\"\r\n            )\r\n          )\r\n        }\r\n        catch(err) { console.log(err) }\r\n        finally { console.log(portal.user.username + ' is updating tags') }\r\n      })\r\n      return(next(action))\r\n    }\r\n\r\n    default: {\r\n      return next(action)\r\n    }\r\n  }\r\n}\r\n\r\nexport default arcgisMiddleWare"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}