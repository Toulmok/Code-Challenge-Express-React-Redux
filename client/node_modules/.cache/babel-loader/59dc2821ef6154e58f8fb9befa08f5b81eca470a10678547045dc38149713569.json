{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport { s as e } from \"../../../../../../chunks/vec2.js\";\nimport { a as t } from \"../../../../../../chunks/vec2f64.js\";\nimport { s as r } from \"../../../../../../chunks/vec4.js\";\nimport { c as a } from \"../../../../../../chunks/vec4f64.js\";\nimport { FoamIntensity as o } from \"./FoamRendering.glsl.js\";\nimport { Float2PassUniform as m } from \"../../shaderModules/Float2PassUniform.js\";\nimport { Float4PassUniform as s } from \"../../shaderModules/Float4PassUniform.js\";\nimport { glsl as v, NoParameters as u } from \"../../shaderModules/interfaces.js\";\nimport { Texture2DPassUniform as l } from \"../../shaderModules/Texture2DPassUniform.js\";\nfunction i(t) {\n  t.fragment.uniforms.add(new l(\"texWaveNormal\", e => e.waveNormal)), t.fragment.uniforms.add(new l(\"texWavePerturbation\", e => e.wavePertubation)), t.fragment.uniforms.add([new s(\"waveParams\", e => r(f, e.waveStrength, e.waveTextureRepeat, e.flowStrength, e.flowOffset)), new m(\"waveDirection\", t => e(c, t.waveDirection[0] * t.waveVelocity, t.waveDirection[1] * t.waveVelocity))]), t.include(o), t.fragment.code.add(v`const vec2  FLOW_JUMP = vec2(6.0/25.0, 5.0/24.0);\nvec2 textureDenormalized2D(sampler2D _tex, vec2 _uv) {\nreturn 2.0 * texture2D(_tex, _uv).rg - 1.0;\n}\nfloat sampleNoiseTexture(vec2 _uv) {\nreturn texture2D(texWavePerturbation, _uv).b;\n}\nvec3 textureDenormalized3D(sampler2D _tex, vec2 _uv) {\nreturn 2.0 * texture2D(_tex, _uv).rgb - 1.0;\n}\nfloat computeProgress(vec2 uv, float time) {\nreturn fract(time);\n}\nfloat computeWeight(vec2 uv, float time) {\nfloat progress = computeProgress(uv, time);\nreturn 1.0 - abs(1.0 - 2.0 * progress);\n}\nvec3 computeUVPerturbedWeigth(sampler2D texFlow, vec2 uv, float time, float phaseOffset) {\nfloat flowStrength = waveParams[2];\nfloat flowOffset = waveParams[3];\nvec2 flowVector = textureDenormalized2D(texFlow, uv) * flowStrength;\nfloat progress = computeProgress(uv, time + phaseOffset);\nfloat weight = computeWeight(uv, time + phaseOffset);\nvec2 result = uv;\nresult -= flowVector * (progress + flowOffset);\nresult += phaseOffset;\nresult += (time - progress) * FLOW_JUMP;\nreturn vec3(result, weight);\n}\nconst float TIME_NOISE_TEXTURE_REPEAT = 0.3737;\nconst float TIME_NOISE_STRENGTH = 7.77;\nvec3 getWaveLayer(sampler2D _texNormal, sampler2D _dudv, vec2 _uv, vec2 _waveDir, float time) {\nfloat waveStrength = waveParams[0];\nvec2 waveMovement = time * -_waveDir;\nfloat timeNoise = sampleNoiseTexture(_uv * TIME_NOISE_TEXTURE_REPEAT) * TIME_NOISE_STRENGTH;\nvec3 uv_A = computeUVPerturbedWeigth(_dudv, _uv + waveMovement, time + timeNoise, 0.0);\nvec3 uv_B = computeUVPerturbedWeigth(_dudv, _uv + waveMovement, time + timeNoise, 0.5);\nvec3 normal_A = textureDenormalized3D(_texNormal, uv_A.xy) * uv_A.z;\nvec3 normal_B = textureDenormalized3D(_texNormal, uv_B.xy) * uv_B.z;\nvec3 mixNormal = normalize(normal_A + normal_B);\nmixNormal.xy *= waveStrength;\nmixNormal.z = sqrt(1.0 - dot(mixNormal.xy, mixNormal.xy));\nreturn mixNormal;\n}\nvec4 getSurfaceNormalAndFoam(vec2 _uv, float _time) {\nfloat waveTextureRepeat = waveParams[1];\nvec3 normal = getWaveLayer(texWaveNormal, texWavePerturbation, _uv * waveTextureRepeat, waveDirection, _time);\nfloat foam  = normals2FoamIntensity(normal, waveParams[0]);\nreturn vec4(normal, foam);\n}`);\n}\nclass n extends u {}\nconst f = a(),\n  c = t();\nexport { i as WaterDistortion, n as WaterDistortionPassParameters };","map":{"version":3,"names":["s","e","a","t","r","c","FoamIntensity","o","Float2PassUniform","m","Float4PassUniform","glsl","v","NoParameters","u","Texture2DPassUniform","l","i","fragment","uniforms","add","waveNormal","wavePertubation","f","waveStrength","waveTextureRepeat","flowStrength","flowOffset","waveDirection","waveVelocity","include","code","n","WaterDistortion","WaterDistortionPassParameters"],"sources":["C:/code-challenge-react/frontend/node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/WaterDistortion.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport{s as e}from\"../../../../../../chunks/vec2.js\";import{a as t}from\"../../../../../../chunks/vec2f64.js\";import{s as r}from\"../../../../../../chunks/vec4.js\";import{c as a}from\"../../../../../../chunks/vec4f64.js\";import{FoamIntensity as o}from\"./FoamRendering.glsl.js\";import{Float2PassUniform as m}from\"../../shaderModules/Float2PassUniform.js\";import{Float4PassUniform as s}from\"../../shaderModules/Float4PassUniform.js\";import{glsl as v,NoParameters as u}from\"../../shaderModules/interfaces.js\";import{Texture2DPassUniform as l}from\"../../shaderModules/Texture2DPassUniform.js\";function i(t){t.fragment.uniforms.add(new l(\"texWaveNormal\",(e=>e.waveNormal))),t.fragment.uniforms.add(new l(\"texWavePerturbation\",(e=>e.wavePertubation))),t.fragment.uniforms.add([new s(\"waveParams\",(e=>r(f,e.waveStrength,e.waveTextureRepeat,e.flowStrength,e.flowOffset))),new m(\"waveDirection\",(t=>e(c,t.waveDirection[0]*t.waveVelocity,t.waveDirection[1]*t.waveVelocity)))]),t.include(o),t.fragment.code.add(v`const vec2  FLOW_JUMP = vec2(6.0/25.0, 5.0/24.0);\nvec2 textureDenormalized2D(sampler2D _tex, vec2 _uv) {\nreturn 2.0 * texture2D(_tex, _uv).rg - 1.0;\n}\nfloat sampleNoiseTexture(vec2 _uv) {\nreturn texture2D(texWavePerturbation, _uv).b;\n}\nvec3 textureDenormalized3D(sampler2D _tex, vec2 _uv) {\nreturn 2.0 * texture2D(_tex, _uv).rgb - 1.0;\n}\nfloat computeProgress(vec2 uv, float time) {\nreturn fract(time);\n}\nfloat computeWeight(vec2 uv, float time) {\nfloat progress = computeProgress(uv, time);\nreturn 1.0 - abs(1.0 - 2.0 * progress);\n}\nvec3 computeUVPerturbedWeigth(sampler2D texFlow, vec2 uv, float time, float phaseOffset) {\nfloat flowStrength = waveParams[2];\nfloat flowOffset = waveParams[3];\nvec2 flowVector = textureDenormalized2D(texFlow, uv) * flowStrength;\nfloat progress = computeProgress(uv, time + phaseOffset);\nfloat weight = computeWeight(uv, time + phaseOffset);\nvec2 result = uv;\nresult -= flowVector * (progress + flowOffset);\nresult += phaseOffset;\nresult += (time - progress) * FLOW_JUMP;\nreturn vec3(result, weight);\n}\nconst float TIME_NOISE_TEXTURE_REPEAT = 0.3737;\nconst float TIME_NOISE_STRENGTH = 7.77;\nvec3 getWaveLayer(sampler2D _texNormal, sampler2D _dudv, vec2 _uv, vec2 _waveDir, float time) {\nfloat waveStrength = waveParams[0];\nvec2 waveMovement = time * -_waveDir;\nfloat timeNoise = sampleNoiseTexture(_uv * TIME_NOISE_TEXTURE_REPEAT) * TIME_NOISE_STRENGTH;\nvec3 uv_A = computeUVPerturbedWeigth(_dudv, _uv + waveMovement, time + timeNoise, 0.0);\nvec3 uv_B = computeUVPerturbedWeigth(_dudv, _uv + waveMovement, time + timeNoise, 0.5);\nvec3 normal_A = textureDenormalized3D(_texNormal, uv_A.xy) * uv_A.z;\nvec3 normal_B = textureDenormalized3D(_texNormal, uv_B.xy) * uv_B.z;\nvec3 mixNormal = normalize(normal_A + normal_B);\nmixNormal.xy *= waveStrength;\nmixNormal.z = sqrt(1.0 - dot(mixNormal.xy, mixNormal.xy));\nreturn mixNormal;\n}\nvec4 getSurfaceNormalAndFoam(vec2 _uv, float _time) {\nfloat waveTextureRepeat = waveParams[1];\nvec3 normal = getWaveLayer(texWaveNormal, texWavePerturbation, _uv * waveTextureRepeat, waveDirection, _time);\nfloat foam  = normals2FoamIntensity(normal, waveParams[0]);\nreturn vec4(normal, foam);\n}`)}class n extends u{}const f=a(),c=t();export{i as WaterDistortion,n as WaterDistortionPassParameters};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAAOA,CAAC,IAAIC,CAAC,QAAK,kCAAkC;AAAC,SAAOC,CAAC,IAAIC,CAAC,QAAK,qCAAqC;AAAC,SAAOH,CAAC,IAAII,CAAC,QAAK,kCAAkC;AAAC,SAAOC,CAAC,IAAIH,CAAC,QAAK,qCAAqC;AAAC,SAAOI,aAAa,IAAIC,CAAC,QAAK,yBAAyB;AAAC,SAAOC,iBAAiB,IAAIC,CAAC,QAAK,0CAA0C;AAAC,SAAOC,iBAAiB,IAAIV,CAAC,QAAK,0CAA0C;AAAC,SAAOW,IAAI,IAAIC,CAAC,EAACC,YAAY,IAAIC,CAAC,QAAK,mCAAmC;AAAC,SAAOC,oBAAoB,IAAIC,CAAC,QAAK,6CAA6C;AAAC,SAASC,CAACA,CAACd,CAAC,EAAC;EAACA,CAAC,CAACe,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAIJ,CAAC,CAAC,eAAe,EAAEf,CAAC,IAAEA,CAAC,CAACoB,UAAU,CAAE,CAAC,EAAClB,CAAC,CAACe,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAIJ,CAAC,CAAC,qBAAqB,EAAEf,CAAC,IAAEA,CAAC,CAACqB,eAAe,CAAE,CAAC,EAACnB,CAAC,CAACe,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,CAAC,IAAIpB,CAAC,CAAC,YAAY,EAAEC,CAAC,IAAEG,CAAC,CAACmB,CAAC,EAACtB,CAAC,CAACuB,YAAY,EAACvB,CAAC,CAACwB,iBAAiB,EAACxB,CAAC,CAACyB,YAAY,EAACzB,CAAC,CAAC0B,UAAU,CAAC,CAAE,EAAC,IAAIlB,CAAC,CAAC,eAAe,EAAEN,CAAC,IAAEF,CAAC,CAACI,CAAC,EAACF,CAAC,CAACyB,aAAa,CAAC,CAAC,CAAC,GAACzB,CAAC,CAAC0B,YAAY,EAAC1B,CAAC,CAACyB,aAAa,CAAC,CAAC,CAAC,GAACzB,CAAC,CAAC0B,YAAY,CAAC,CAAE,CAAC,CAAC,EAAC1B,CAAC,CAAC2B,OAAO,CAACvB,CAAC,CAAC,EAACJ,CAAC,CAACe,QAAQ,CAACa,IAAI,CAACX,GAAG,CAACR,CAAE;AACv+B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC;AAAA;AAAC,MAAMoB,CAAC,SAASlB,CAAC;AAAE,MAAMS,CAAC,GAACrB,CAAC,EAAE;EAACG,CAAC,GAACF,CAAC,EAAE;AAAC,SAAOc,CAAC,IAAIgB,eAAe,EAACD,CAAC,IAAIE,6BAA6B"},"metadata":{},"sourceType":"module","externalDependencies":[]}