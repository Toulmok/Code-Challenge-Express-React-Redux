{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport \"../../core/has.js\";\nimport { isPowerOfTwo as t } from \"../../core/mathUtils.js\";\nimport { isSome as e, isNone as i, unwrap as r } from \"../../core/maybe.js\";\nimport { checkWebGLError as o } from \"./checkWebGLError.js\";\nimport { ContextType as s } from \"./context-util.js\";\nimport { TextureType as a, TextureSamplingMode as n, TextureWrapMode as l, ResourceType as h, PixelType as p, PixelFormat as _, SizedPixelFormat as m, CompressedTextureFormat as d } from \"./enums.js\";\nconst u = {\n    target: a.TEXTURE_2D,\n    samplingMode: n.LINEAR,\n    wrapMode: l.REPEAT,\n    flipped: !1,\n    hasMipmap: !1,\n    isOpaque: !1,\n    unpackAlignment: 4,\n    preMultiplyAlpha: !1,\n    isImmutable: !1\n  },\n  c = 4;\nlet E = class {\n  constructor(t, e) {\n    let i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    this._context = t, this.type = \"texture\", this._glName = null, this._samplingModeDirty = !1, this._wrapModeDirty = !1, this._wasImmutablyAllocated = !1, t.instanceCounter.increment(h.Texture, this), this._descriptor = {\n      ...u,\n      ...e\n    };\n    for (const r in u) {\n      void 0 === this._descriptor[r] && (this._descriptor[r] = u[r]);\n    }\n    if (t.type !== s.WEBGL2 && (this._descriptor.isImmutable && (this._descriptor.isImmutable = !1), A(this._descriptor.target))) throw new Error(\"3D and array textures are not supported in WebGL1\");\n    this._descriptor.target === a.TEXTURE_CUBE_MAP ? this._setDataCubeMap(i) : this.setData(i);\n  }\n  get glName() {\n    return this._glName;\n  }\n  get descriptor() {\n    return this._descriptor;\n  }\n  get isDirty() {\n    return this._samplingModeDirty || this._wrapModeDirty;\n  }\n  dispose() {\n    this._context.gl && this._glName && (this._context.unbindTexture(this), this._context.gl.deleteTexture(this._glName), this._glName = null, this._context.instanceCounter.decrement(h.Texture, this));\n  }\n  release() {\n    this.dispose();\n  }\n  resize(t, e) {\n    const i = this._descriptor;\n    if (i.width !== t || i.height !== e) {\n      if (this._wasImmutablyAllocated) throw new Error(\"Immutable textures can't be resized!\");\n      i.width = t, i.height = e, this._descriptor.target === a.TEXTURE_CUBE_MAP ? this._setDataCubeMap(null) : this.setData(null);\n    }\n  }\n  _setDataCubeMap() {\n    let t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    for (let e = a.TEXTURE_CUBE_MAP_POSITIVE_X; e <= a.TEXTURE_CUBE_MAP_NEGATIVE_Z; e++) this._setData(t, e);\n  }\n  setData(t) {\n    this._setData(t);\n  }\n  _setData(t, i) {\n    if (!this._context || !this._context.gl) return;\n    const r = this._context.gl;\n    this._glName || (this._glName = r.createTexture()), void 0 === t && (t = null);\n    const s = this._descriptor,\n      a = i ?? s.target,\n      n = A(a);\n    null === t && (s.width = s.width || c, s.height = s.height || c, n && (s.depth = s.depth ?? 1));\n    const l = this._context.bindTexture(this, E.TEXTURE_UNIT_FOR_UPDATES);\n    this._context.setActiveTexture(E.TEXTURE_UNIT_FOR_UPDATES), E._validateTexture(this._context, s), this._configurePixelStorage(), o(r);\n    const h = s.pixelFormat;\n    let p = s.internalFormat ?? this._deriveInternalFormat(h, s.dataType);\n    if (f(t)) {\n      let e = t.width,\n        i = t.height;\n      const l = 1;\n      t instanceof HTMLVideoElement && (e = t.videoWidth, i = t.videoHeight), s.width && s.height, n && s.depth, s.isImmutable && !this._wasImmutablyAllocated && this._texStorage(a, p, s.hasMipmap, e, i, l), this._texImage(a, 0, p, e, i, l, t), o(r), s.hasMipmap && this.generateMipmap(), void 0 === s.width && (s.width = e), void 0 === s.height && (s.height = i), n && void 0 === s.depth && (s.depth = l);\n    } else {\n      const {\n        width: i,\n        height: l,\n        depth: h\n      } = s;\n      if (null == i || null == l) throw new Error(\"Width and height must be specified!\");\n      if (n && null == h) throw new Error(\"Depth must be specified!\");\n      if (s.isImmutable && !this._wasImmutablyAllocated && this._texStorage(a, p, s.hasMipmap, i, l, h), r.DEPTH24_STENCIL8 && p === r.DEPTH_STENCIL && (p = r.DEPTH24_STENCIL8), x(t)) {\n        const o = t.levels,\n          n = w(a, i, l, h),\n          _ = Math.min(n - 1, o.length - 1);\n        e(this._context.gl2) ? r.texParameteri(s.target, this._context.gl2.TEXTURE_MAX_LEVEL, _) : s.hasMipmap = s.hasMipmap && n === o.length;\n        const m = p;\n        if (!T(m)) throw new Error(\"Attempting to use compressed data with an umcompressed format!\");\n        this._forEachMipmapLevel((t, e, i, r) => {\n          const s = o[Math.min(t, o.length - 1)];\n          this._compressedTexImage(a, t, m, e, i, r, s);\n        }, _);\n      } else e(t) ? (this._texImage(a, 0, p, i, l, h, t), o(r), s.hasMipmap && this.generateMipmap()) : this._forEachMipmapLevel((t, e, i, s) => {\n        this._texImage(a, t, p, e, i, s, null), o(r);\n      });\n    }\n    E._applySamplingMode(r, this._descriptor), E._applyWrapMode(r, this._descriptor), E._applyAnisotropicFilteringParameters(this._context, this._descriptor), o(r), this._context.bindTexture(l, E.TEXTURE_UNIT_FOR_UPDATES);\n  }\n  updateData(t, r, o, s, a, n) {\n    let l = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n    n || console.error(\"An attempt to use uninitialized data!\"), this._glName || console.error(\"An attempt to update uninitialized texture!\");\n    const h = this._context.gl,\n      p = this._descriptor,\n      {\n        pixelFormat: _,\n        dataType: m,\n        target: d,\n        isImmutable: u\n      } = p,\n      c = p.internalFormat ?? this._deriveInternalFormat(_, m);\n    if (u && !this._wasImmutablyAllocated) throw new Error(\"Cannot update immutable texture before allocation!\");\n    const g = this._context.bindTexture(this, E.TEXTURE_UNIT_FOR_UPDATES, !0);\n    if ((r < 0 || o < 0 || s > p.width || a > p.height || r + s > p.width || o + a > p.height) && console.error(\"An attempt to update out of bounds of the texture!\"), this._configurePixelStorage(), l) {\n      if (i(this._context.gl2)) return void console.error(\"Webgl2 must be enabled to use dataRowOffset!\");\n      h.pixelStorei(this._context.gl2.UNPACK_SKIP_ROWS, l);\n    }\n    if (f(n) ? e(this._context.gl2) ? this._context.gl2.texSubImage2D(d, t, r, o, s, a, _, m, n) : h.texSubImage2D(d, t, r, o, _, m, n) : x(n) ? h.compressedTexSubImage2D(d, t, r, o, s, a, c, n.levels[t]) : h.texSubImage2D(d, t, r, o, s, a, _, m, n), l) {\n      if (i(this._context.gl2)) return void console.error(\"Webgl2 must be enabled to use dataRowOffset!\");\n      h.pixelStorei(this._context.gl2.UNPACK_SKIP_ROWS, 0);\n    }\n    this._context.bindTexture(g, E.TEXTURE_UNIT_FOR_UPDATES);\n  }\n  updateData3D(t, e, r, o, s, a, n, l) {\n    l || console.error(\"An attempt to use uninitialized data!\"), this._glName || console.error(\"An attempt to update uninitialized texture!\");\n    const h = this._context.gl2;\n    if (i(h)) throw new Error(\"3D textures are not supported in WebGL1\");\n    const p = this._descriptor,\n      {\n        pixelFormat: _,\n        dataType: m,\n        isImmutable: d,\n        target: u\n      } = p,\n      c = p.internalFormat ?? this._deriveInternalFormat(_, m);\n    if (d && !this._wasImmutablyAllocated) throw new Error(\"Cannot update immutable texture before allocation!\");\n    A(u) || console.warn(\"Attempting to set 3D texture data on a non-3D texture\");\n    const g = this._context.bindTexture(this, E.TEXTURE_UNIT_FOR_UPDATES);\n    if (this._context.setActiveTexture(E.TEXTURE_UNIT_FOR_UPDATES), (e < 0 || r < 0 || o < 0 || s > p.width || a > p.height || n > p.depth || e + s > p.width || r + a > p.height || o + n > p.depth) && console.error(\"An attempt to update out of bounds of the texture!\"), this._configurePixelStorage(), x(l)) l = l.levels[t], h.compressedTexSubImage3D(u, t, e, r, o, s, a, n, c, l);else {\n      const i = l;\n      h.texSubImage3D(u, t, e, r, o, s, a, n, _, m, i);\n    }\n    this._context.bindTexture(g, E.TEXTURE_UNIT_FOR_UPDATES);\n  }\n  generateMipmap() {\n    const t = this._descriptor;\n    if (!t.hasMipmap) {\n      if (this._wasImmutablyAllocated) throw new Error(\"Cannot add mipmaps to immutable texture after allocation\");\n      t.hasMipmap = !0, this._samplingModeDirty = !0, E._validateTexture(this._context, t);\n    }\n    t.samplingMode === n.LINEAR ? (this._samplingModeDirty = !0, t.samplingMode = n.LINEAR_MIPMAP_NEAREST) : t.samplingMode === n.NEAREST && (this._samplingModeDirty = !0, t.samplingMode = n.NEAREST_MIPMAP_NEAREST);\n    const e = this._context.bindTexture(this, E.TEXTURE_UNIT_FOR_UPDATES);\n    this._context.setActiveTexture(E.TEXTURE_UNIT_FOR_UPDATES);\n    this._context.gl.generateMipmap(t.target), this._context.bindTexture(e, E.TEXTURE_UNIT_FOR_UPDATES);\n  }\n  setSamplingMode(t) {\n    t !== this._descriptor.samplingMode && (this._descriptor.samplingMode = t, this._samplingModeDirty = !0);\n  }\n  setWrapMode(t) {\n    t !== this._descriptor.wrapMode && (this._descriptor.wrapMode = t, E._validateTexture(this._context, this._descriptor), this._wrapModeDirty = !0);\n  }\n  applyChanges() {\n    const t = this._context.gl,\n      e = this._descriptor;\n    this._samplingModeDirty && (E._applySamplingMode(t, e), this._samplingModeDirty = !1), this._wrapModeDirty && (E._applyWrapMode(t, e), this._wrapModeDirty = !1);\n  }\n  _deriveInternalFormat(t, e) {\n    if (this._context.type === s.WEBGL1) return t;\n    switch (e) {\n      case p.FLOAT:\n        switch (t) {\n          case _.RGBA:\n            return m.RGBA32F;\n          case _.RGB:\n            return m.RGB32F;\n          default:\n            throw new Error(\"Unable to derive format\");\n        }\n      case p.UNSIGNED_BYTE:\n        switch (t) {\n          case _.RGBA:\n            return m.RGBA8;\n          case _.RGB:\n            return m.RGB8;\n        }\n      default:\n        return t;\n    }\n  }\n  _configurePixelStorage() {\n    const t = this._context.gl,\n      {\n        unpackAlignment: e,\n        flipped: i,\n        preMultiplyAlpha: r\n      } = this._descriptor;\n    t.pixelStorei(t.UNPACK_ALIGNMENT, e), t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL, i ? 1 : 0), t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL, r ? 1 : 0);\n  }\n  _texStorage(t, e, r, o, s, a) {\n    const n = this._context.gl2;\n    if (i(n)) throw new Error(\"Immutable textures are not supported in WebGL1\");\n    if (!g(e)) throw new Error(\"Immutable textures must have a sized internal format\");\n    if (!this._descriptor.isImmutable) return;\n    const l = r ? w(t, o, s, a) : 1;\n    if (A(t)) {\n      if (null == a) throw new Error(\"Missing depth dimension for 3D texture upload\");\n      n.texStorage3D(t, l, e, o, s, a);\n    } else n.texStorage2D(t, l, e, o, s);\n    this._wasImmutablyAllocated = !0;\n  }\n  _texImage(t, i, o, a, n, l, h) {\n    const p = this._context.gl;\n    let _ = null;\n    const m = this._context.type === s.WEBGL2,\n      d = A(t),\n      {\n        isImmutable: u,\n        pixelFormat: c,\n        dataType: E\n      } = this._descriptor;\n    if (m && (_ = p), m || !f(h)) {\n      if (u) {\n        if (e(h)) {\n          const e = h;\n          if (d) {\n            if (null == l) throw new Error(\"Missing depth dimension for 3D texture upload\");\n            _.texSubImage3D(t, i, 0, 0, 0, a, n, l, c, E, e);\n          } else p.texSubImage2D(t, i, 0, 0, a, n, c, E, e);\n        }\n      } else {\n        const e = r(h);\n        if (d) {\n          if (null == l) throw new Error(\"Missing depth dimension for 3D texture upload\");\n          _.texImage3D(t, i, o, a, n, l, 0, c, E, e);\n        } else p.texImage2D(t, i, o, a, n, 0, c, E, e);\n      }\n    } else p.texImage2D(t, 0, o, c, E, h);\n  }\n  _compressedTexImage(t, i, r, o, a, n, l) {\n    const h = this._context.gl;\n    let p = null;\n    const _ = A(t),\n      m = this._descriptor.isImmutable;\n    if (_) {\n      if (this._context.type !== s.WEBGL2) throw new Error(\"3D textures are not supported in WebGL1\");\n      p = h;\n    }\n    if (m) {\n      if (e(l)) if (_) {\n        if (null == n) throw new Error(\"Missing depth dimension for 3D texture upload\");\n        p.compressedTexSubImage3D(t, i, 0, 0, 0, o, a, n, r, l);\n      } else h.compressedTexSubImage2D(t, i, 0, 0, o, a, r, l);\n    } else if (_) {\n      if (null == n) throw new Error(\"Missing depth dimension for 3D texture upload\");\n      p.compressedTexImage3D(t, i, r, o, a, n, 0, l);\n    } else h.compressedTexImage2D(t, i, r, o, a, 0, l);\n  }\n  _forEachMipmapLevel(t) {\n    let e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1 / 0;\n    let {\n      width: i,\n      height: r,\n      depth: o,\n      hasMipmap: s,\n      target: n\n    } = this._descriptor;\n    const l = n === a.TEXTURE_3D;\n    if (null == i || null == r || l && null == o) throw new Error(\"Missing texture dimensions for mipmap calculation\");\n    for (let a = 0; t(a, i, r, o), s && (1 !== i || 1 !== r || l && 1 !== o) && !(a >= e); ++a) i = Math.max(1, i >> 1), r = Math.max(1, r >> 1), l && (o = Math.max(1, o >> 1));\n  }\n  static _validateTexture(e, i) {\n    (null != i.width && i.width < 0 || null != i.height && i.height < 0 || null != i.depth && i.depth < 0) && console.error(\"Negative dimension parameters are not allowed!\");\n    const r = e.type === s.WEBGL2,\n      o = null != i.width && t(i.width) && null != i.height && t(i.height);\n    r || !i.isImmutable && !A(i.target) || console.error(\"Immutable and 3D-like textures are not supported in WebGL1!\"), r || o || (\"number\" == typeof i.wrapMode ? i.wrapMode !== l.CLAMP_TO_EDGE && console.error(\"Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!\") : i.wrapMode.s === l.CLAMP_TO_EDGE && i.wrapMode.t === l.CLAMP_TO_EDGE || console.error(\"Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!\"), i.hasMipmap && console.error(\"Mipmapping requires power-of-two textures!\"));\n  }\n  static _applySamplingMode(t, e) {\n    let i = e.samplingMode,\n      r = e.samplingMode;\n    i === n.LINEAR_MIPMAP_NEAREST || i === n.LINEAR_MIPMAP_LINEAR ? (i = n.LINEAR, e.hasMipmap || (r = n.LINEAR)) : i !== n.NEAREST_MIPMAP_NEAREST && i !== n.NEAREST_MIPMAP_LINEAR || (i = n.NEAREST, e.hasMipmap || (r = n.NEAREST)), t.texParameteri(e.target, t.TEXTURE_MAG_FILTER, i), t.texParameteri(e.target, t.TEXTURE_MIN_FILTER, r);\n  }\n  static _applyWrapMode(t, e) {\n    \"number\" == typeof e.wrapMode ? (t.texParameteri(e.target, t.TEXTURE_WRAP_S, e.wrapMode), t.texParameteri(e.target, t.TEXTURE_WRAP_T, e.wrapMode)) : (t.texParameteri(e.target, t.TEXTURE_WRAP_S, e.wrapMode.s), t.texParameteri(e.target, t.TEXTURE_WRAP_T, e.wrapMode.t));\n  }\n  static _applyAnisotropicFilteringParameters(t, e) {\n    const i = t.capabilities.textureFilterAnisotropic;\n    if (!i) return;\n    t.gl.texParameterf(e.target, i.TEXTURE_MAX_ANISOTROPY, e.maxAnisotropy ?? 1);\n  }\n};\nfunction g(t) {\n  return t in m;\n}\nfunction T(t) {\n  return t in d;\n}\nfunction x(t) {\n  return e(t) && \"type\" in t && \"compressed\" === t.type;\n}\nfunction M(t) {\n  return e(t) && \"byteLength\" in t;\n}\nfunction f(t) {\n  return e(t) && !x(t) && !M(t);\n}\nfunction A(t) {\n  return t === a.TEXTURE_3D || t === a.TEXTURE_2D_ARRAY;\n}\nfunction w(t, e, i) {\n  let r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  let o = Math.max(e, i);\n  return t === a.TEXTURE_3D && (o = Math.max(o, r)), Math.round(Math.log(o) / Math.LN2) + 1;\n}\nE.TEXTURE_UNIT_FOR_UPDATES = 0;\nexport { E as Texture };","map":{"version":3,"names":["isPowerOfTwo","t","isSome","e","isNone","i","unwrap","r","checkWebGLError","o","ContextType","s","TextureType","a","TextureSamplingMode","n","TextureWrapMode","l","ResourceType","h","PixelType","p","PixelFormat","_","SizedPixelFormat","m","CompressedTextureFormat","d","u","target","TEXTURE_2D","samplingMode","LINEAR","wrapMode","REPEAT","flipped","hasMipmap","isOpaque","unpackAlignment","preMultiplyAlpha","isImmutable","c","E","constructor","arguments","length","undefined","_context","type","_glName","_samplingModeDirty","_wrapModeDirty","_wasImmutablyAllocated","instanceCounter","increment","Texture","_descriptor","WEBGL2","A","Error","TEXTURE_CUBE_MAP","_setDataCubeMap","setData","glName","descriptor","isDirty","dispose","gl","unbindTexture","deleteTexture","decrement","release","resize","width","height","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_Z","_setData","createTexture","depth","bindTexture","TEXTURE_UNIT_FOR_UPDATES","setActiveTexture","_validateTexture","_configurePixelStorage","pixelFormat","internalFormat","_deriveInternalFormat","dataType","f","HTMLVideoElement","videoWidth","videoHeight","_texStorage","_texImage","generateMipmap","DEPTH24_STENCIL8","DEPTH_STENCIL","x","levels","w","Math","min","gl2","texParameteri","TEXTURE_MAX_LEVEL","T","_forEachMipmapLevel","_compressedTexImage","_applySamplingMode","_applyWrapMode","_applyAnisotropicFilteringParameters","updateData","console","error","g","pixelStorei","UNPACK_SKIP_ROWS","texSubImage2D","compressedTexSubImage2D","updateData3D","warn","compressedTexSubImage3D","texSubImage3D","LINEAR_MIPMAP_NEAREST","NEAREST","NEAREST_MIPMAP_NEAREST","setSamplingMode","setWrapMode","applyChanges","WEBGL1","FLOAT","RGBA","RGBA32F","RGB","RGB32F","UNSIGNED_BYTE","RGBA8","RGB8","UNPACK_ALIGNMENT","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","texStorage3D","texStorage2D","texImage3D","texImage2D","compressedTexImage3D","compressedTexImage2D","TEXTURE_3D","max","CLAMP_TO_EDGE","LINEAR_MIPMAP_LINEAR","NEAREST_MIPMAP_LINEAR","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","capabilities","textureFilterAnisotropic","texParameterf","TEXTURE_MAX_ANISOTROPY","maxAnisotropy","M","TEXTURE_2D_ARRAY","round","log","LN2"],"sources":["C:/code-challenge-react/frontend/node_modules/@arcgis/core/views/webgl/Texture.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport\"../../core/has.js\";import{isPowerOfTwo as t}from\"../../core/mathUtils.js\";import{isSome as e,isNone as i,unwrap as r}from\"../../core/maybe.js\";import{checkWebGLError as o}from\"./checkWebGLError.js\";import{ContextType as s}from\"./context-util.js\";import{TextureType as a,TextureSamplingMode as n,TextureWrapMode as l,ResourceType as h,PixelType as p,PixelFormat as _,SizedPixelFormat as m,CompressedTextureFormat as d}from\"./enums.js\";const u={target:a.TEXTURE_2D,samplingMode:n.LINEAR,wrapMode:l.REPEAT,flipped:!1,hasMipmap:!1,isOpaque:!1,unpackAlignment:4,preMultiplyAlpha:!1,isImmutable:!1},c=4;let E=class{constructor(t,e,i=null){this._context=t,this.type=\"texture\",this._glName=null,this._samplingModeDirty=!1,this._wrapModeDirty=!1,this._wasImmutablyAllocated=!1,t.instanceCounter.increment(h.Texture,this),this._descriptor={...u,...e};for(const r in u){void 0===this._descriptor[r]&&(this._descriptor[r]=u[r])}if(t.type!==s.WEBGL2&&(this._descriptor.isImmutable&&(this._descriptor.isImmutable=!1),A(this._descriptor.target)))throw new Error(\"3D and array textures are not supported in WebGL1\");this._descriptor.target===a.TEXTURE_CUBE_MAP?this._setDataCubeMap(i):this.setData(i)}get glName(){return this._glName}get descriptor(){return this._descriptor}get isDirty(){return this._samplingModeDirty||this._wrapModeDirty}dispose(){this._context.gl&&this._glName&&(this._context.unbindTexture(this),this._context.gl.deleteTexture(this._glName),this._glName=null,this._context.instanceCounter.decrement(h.Texture,this))}release(){this.dispose()}resize(t,e){const i=this._descriptor;if(i.width!==t||i.height!==e){if(this._wasImmutablyAllocated)throw new Error(\"Immutable textures can't be resized!\");i.width=t,i.height=e,this._descriptor.target===a.TEXTURE_CUBE_MAP?this._setDataCubeMap(null):this.setData(null)}}_setDataCubeMap(t=null){for(let e=a.TEXTURE_CUBE_MAP_POSITIVE_X;e<=a.TEXTURE_CUBE_MAP_NEGATIVE_Z;e++)this._setData(t,e)}setData(t){this._setData(t)}_setData(t,i){if(!this._context||!this._context.gl)return;const r=this._context.gl;this._glName||(this._glName=r.createTexture()),void 0===t&&(t=null);const s=this._descriptor,a=i??s.target,n=A(a);null===t&&(s.width=s.width||c,s.height=s.height||c,n&&(s.depth=s.depth??1));const l=this._context.bindTexture(this,E.TEXTURE_UNIT_FOR_UPDATES);this._context.setActiveTexture(E.TEXTURE_UNIT_FOR_UPDATES),E._validateTexture(this._context,s),this._configurePixelStorage(),o(r);const h=s.pixelFormat;let p=s.internalFormat??this._deriveInternalFormat(h,s.dataType);if(f(t)){let e=t.width,i=t.height;const l=1;t instanceof HTMLVideoElement&&(e=t.videoWidth,i=t.videoHeight),s.width&&s.height,n&&s.depth,s.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(a,p,s.hasMipmap,e,i,l),this._texImage(a,0,p,e,i,l,t),o(r),s.hasMipmap&&this.generateMipmap(),void 0===s.width&&(s.width=e),void 0===s.height&&(s.height=i),n&&void 0===s.depth&&(s.depth=l)}else{const{width:i,height:l,depth:h}=s;if(null==i||null==l)throw new Error(\"Width and height must be specified!\");if(n&&null==h)throw new Error(\"Depth must be specified!\");if(s.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(a,p,s.hasMipmap,i,l,h),r.DEPTH24_STENCIL8&&p===r.DEPTH_STENCIL&&(p=r.DEPTH24_STENCIL8),x(t)){const o=t.levels,n=w(a,i,l,h),_=Math.min(n-1,o.length-1);e(this._context.gl2)?r.texParameteri(s.target,this._context.gl2.TEXTURE_MAX_LEVEL,_):s.hasMipmap=s.hasMipmap&&n===o.length;const m=p;if(!T(m))throw new Error(\"Attempting to use compressed data with an umcompressed format!\");this._forEachMipmapLevel(((t,e,i,r)=>{const s=o[Math.min(t,o.length-1)];this._compressedTexImage(a,t,m,e,i,r,s)}),_)}else e(t)?(this._texImage(a,0,p,i,l,h,t),o(r),s.hasMipmap&&this.generateMipmap()):this._forEachMipmapLevel(((t,e,i,s)=>{this._texImage(a,t,p,e,i,s,null),o(r)}))}E._applySamplingMode(r,this._descriptor),E._applyWrapMode(r,this._descriptor),E._applyAnisotropicFilteringParameters(this._context,this._descriptor),o(r),this._context.bindTexture(l,E.TEXTURE_UNIT_FOR_UPDATES)}updateData(t,r,o,s,a,n,l=0){n||console.error(\"An attempt to use uninitialized data!\"),this._glName||console.error(\"An attempt to update uninitialized texture!\");const h=this._context.gl,p=this._descriptor,{pixelFormat:_,dataType:m,target:d,isImmutable:u}=p,c=p.internalFormat??this._deriveInternalFormat(_,m);if(u&&!this._wasImmutablyAllocated)throw new Error(\"Cannot update immutable texture before allocation!\");const g=this._context.bindTexture(this,E.TEXTURE_UNIT_FOR_UPDATES,!0);if((r<0||o<0||s>p.width||a>p.height||r+s>p.width||o+a>p.height)&&console.error(\"An attempt to update out of bounds of the texture!\"),this._configurePixelStorage(),l){if(i(this._context.gl2))return void console.error(\"Webgl2 must be enabled to use dataRowOffset!\");h.pixelStorei(this._context.gl2.UNPACK_SKIP_ROWS,l)}if(f(n)?e(this._context.gl2)?this._context.gl2.texSubImage2D(d,t,r,o,s,a,_,m,n):h.texSubImage2D(d,t,r,o,_,m,n):x(n)?h.compressedTexSubImage2D(d,t,r,o,s,a,c,n.levels[t]):h.texSubImage2D(d,t,r,o,s,a,_,m,n),l){if(i(this._context.gl2))return void console.error(\"Webgl2 must be enabled to use dataRowOffset!\");h.pixelStorei(this._context.gl2.UNPACK_SKIP_ROWS,0)}this._context.bindTexture(g,E.TEXTURE_UNIT_FOR_UPDATES)}updateData3D(t,e,r,o,s,a,n,l){l||console.error(\"An attempt to use uninitialized data!\"),this._glName||console.error(\"An attempt to update uninitialized texture!\");const h=this._context.gl2;if(i(h))throw new Error(\"3D textures are not supported in WebGL1\");const p=this._descriptor,{pixelFormat:_,dataType:m,isImmutable:d,target:u}=p,c=p.internalFormat??this._deriveInternalFormat(_,m);if(d&&!this._wasImmutablyAllocated)throw new Error(\"Cannot update immutable texture before allocation!\");A(u)||console.warn(\"Attempting to set 3D texture data on a non-3D texture\");const g=this._context.bindTexture(this,E.TEXTURE_UNIT_FOR_UPDATES);if(this._context.setActiveTexture(E.TEXTURE_UNIT_FOR_UPDATES),(e<0||r<0||o<0||s>p.width||a>p.height||n>p.depth||e+s>p.width||r+a>p.height||o+n>p.depth)&&console.error(\"An attempt to update out of bounds of the texture!\"),this._configurePixelStorage(),x(l))l=l.levels[t],h.compressedTexSubImage3D(u,t,e,r,o,s,a,n,c,l);else{const i=l;h.texSubImage3D(u,t,e,r,o,s,a,n,_,m,i)}this._context.bindTexture(g,E.TEXTURE_UNIT_FOR_UPDATES)}generateMipmap(){const t=this._descriptor;if(!t.hasMipmap){if(this._wasImmutablyAllocated)throw new Error(\"Cannot add mipmaps to immutable texture after allocation\");t.hasMipmap=!0,this._samplingModeDirty=!0,E._validateTexture(this._context,t)}t.samplingMode===n.LINEAR?(this._samplingModeDirty=!0,t.samplingMode=n.LINEAR_MIPMAP_NEAREST):t.samplingMode===n.NEAREST&&(this._samplingModeDirty=!0,t.samplingMode=n.NEAREST_MIPMAP_NEAREST);const e=this._context.bindTexture(this,E.TEXTURE_UNIT_FOR_UPDATES);this._context.setActiveTexture(E.TEXTURE_UNIT_FOR_UPDATES);this._context.gl.generateMipmap(t.target),this._context.bindTexture(e,E.TEXTURE_UNIT_FOR_UPDATES)}setSamplingMode(t){t!==this._descriptor.samplingMode&&(this._descriptor.samplingMode=t,this._samplingModeDirty=!0)}setWrapMode(t){t!==this._descriptor.wrapMode&&(this._descriptor.wrapMode=t,E._validateTexture(this._context,this._descriptor),this._wrapModeDirty=!0)}applyChanges(){const t=this._context.gl,e=this._descriptor;this._samplingModeDirty&&(E._applySamplingMode(t,e),this._samplingModeDirty=!1),this._wrapModeDirty&&(E._applyWrapMode(t,e),this._wrapModeDirty=!1)}_deriveInternalFormat(t,e){if(this._context.type===s.WEBGL1)return t;switch(e){case p.FLOAT:switch(t){case _.RGBA:return m.RGBA32F;case _.RGB:return m.RGB32F;default:throw new Error(\"Unable to derive format\")}case p.UNSIGNED_BYTE:switch(t){case _.RGBA:return m.RGBA8;case _.RGB:return m.RGB8}default:return t}}_configurePixelStorage(){const t=this._context.gl,{unpackAlignment:e,flipped:i,preMultiplyAlpha:r}=this._descriptor;t.pixelStorei(t.UNPACK_ALIGNMENT,e),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,i?1:0),t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,r?1:0)}_texStorage(t,e,r,o,s,a){const n=this._context.gl2;if(i(n))throw new Error(\"Immutable textures are not supported in WebGL1\");if(!g(e))throw new Error(\"Immutable textures must have a sized internal format\");if(!this._descriptor.isImmutable)return;const l=r?w(t,o,s,a):1;if(A(t)){if(null==a)throw new Error(\"Missing depth dimension for 3D texture upload\");n.texStorage3D(t,l,e,o,s,a)}else n.texStorage2D(t,l,e,o,s);this._wasImmutablyAllocated=!0}_texImage(t,i,o,a,n,l,h){const p=this._context.gl;let _=null;const m=this._context.type===s.WEBGL2,d=A(t),{isImmutable:u,pixelFormat:c,dataType:E}=this._descriptor;if(m&&(_=p),m||!f(h))if(u){if(e(h)){const e=h;if(d){if(null==l)throw new Error(\"Missing depth dimension for 3D texture upload\");_.texSubImage3D(t,i,0,0,0,a,n,l,c,E,e)}else p.texSubImage2D(t,i,0,0,a,n,c,E,e)}}else{const e=r(h);if(d){if(null==l)throw new Error(\"Missing depth dimension for 3D texture upload\");_.texImage3D(t,i,o,a,n,l,0,c,E,e)}else p.texImage2D(t,i,o,a,n,0,c,E,e)}else p.texImage2D(t,0,o,c,E,h)}_compressedTexImage(t,i,r,o,a,n,l){const h=this._context.gl;let p=null;const _=A(t),m=this._descriptor.isImmutable;if(_){if(this._context.type!==s.WEBGL2)throw new Error(\"3D textures are not supported in WebGL1\");p=h}if(m){if(e(l))if(_){if(null==n)throw new Error(\"Missing depth dimension for 3D texture upload\");p.compressedTexSubImage3D(t,i,0,0,0,o,a,n,r,l)}else h.compressedTexSubImage2D(t,i,0,0,o,a,r,l)}else if(_){if(null==n)throw new Error(\"Missing depth dimension for 3D texture upload\");p.compressedTexImage3D(t,i,r,o,a,n,0,l)}else h.compressedTexImage2D(t,i,r,o,a,0,l)}_forEachMipmapLevel(t,e=1/0){let{width:i,height:r,depth:o,hasMipmap:s,target:n}=this._descriptor;const l=n===a.TEXTURE_3D;if(null==i||null==r||l&&null==o)throw new Error(\"Missing texture dimensions for mipmap calculation\");for(let a=0;t(a,i,r,o),s&&(1!==i||1!==r||l&&1!==o)&&!(a>=e);++a)i=Math.max(1,i>>1),r=Math.max(1,r>>1),l&&(o=Math.max(1,o>>1))}static _validateTexture(e,i){(null!=i.width&&i.width<0||null!=i.height&&i.height<0||null!=i.depth&&i.depth<0)&&console.error(\"Negative dimension parameters are not allowed!\");const r=e.type===s.WEBGL2,o=null!=i.width&&t(i.width)&&null!=i.height&&t(i.height);r||!i.isImmutable&&!A(i.target)||console.error(\"Immutable and 3D-like textures are not supported in WebGL1!\"),r||o||(\"number\"==typeof i.wrapMode?i.wrapMode!==l.CLAMP_TO_EDGE&&console.error(\"Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!\"):i.wrapMode.s===l.CLAMP_TO_EDGE&&i.wrapMode.t===l.CLAMP_TO_EDGE||console.error(\"Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!\"),i.hasMipmap&&console.error(\"Mipmapping requires power-of-two textures!\"))}static _applySamplingMode(t,e){let i=e.samplingMode,r=e.samplingMode;i===n.LINEAR_MIPMAP_NEAREST||i===n.LINEAR_MIPMAP_LINEAR?(i=n.LINEAR,e.hasMipmap||(r=n.LINEAR)):i!==n.NEAREST_MIPMAP_NEAREST&&i!==n.NEAREST_MIPMAP_LINEAR||(i=n.NEAREST,e.hasMipmap||(r=n.NEAREST)),t.texParameteri(e.target,t.TEXTURE_MAG_FILTER,i),t.texParameteri(e.target,t.TEXTURE_MIN_FILTER,r)}static _applyWrapMode(t,e){\"number\"==typeof e.wrapMode?(t.texParameteri(e.target,t.TEXTURE_WRAP_S,e.wrapMode),t.texParameteri(e.target,t.TEXTURE_WRAP_T,e.wrapMode)):(t.texParameteri(e.target,t.TEXTURE_WRAP_S,e.wrapMode.s),t.texParameteri(e.target,t.TEXTURE_WRAP_T,e.wrapMode.t))}static _applyAnisotropicFilteringParameters(t,e){const i=t.capabilities.textureFilterAnisotropic;if(!i)return;t.gl.texParameterf(e.target,i.TEXTURE_MAX_ANISOTROPY,e.maxAnisotropy??1)}};function g(t){return t in m}function T(t){return t in d}function x(t){return e(t)&&\"type\"in t&&\"compressed\"===t.type}function M(t){return e(t)&&\"byteLength\"in t}function f(t){return e(t)&&!x(t)&&!M(t)}function A(t){return t===a.TEXTURE_3D||t===a.TEXTURE_2D_ARRAY}function w(t,e,i,r=1){let o=Math.max(e,i);return t===a.TEXTURE_3D&&(o=Math.max(o,r)),Math.round(Math.log(o)/Math.LN2)+1}E.TEXTURE_UNIT_FOR_UPDATES=0;export{E as Texture};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}