{"ast":null,"code":"import esriConfig from '@arcgis/core/config';\nimport OAuthInfo from '@arcgis/core/identity/OAuthInfo';\nimport IdentityManager from '@arcgis/core/identity/IdentityManager';\nimport Portal from '@arcgis/core/portal/Portal';\nimport { APP_ID, APP_PORTAL_URL } from '../constants/app-constants';\nimport { GET_IDENTITY, SET_IDENTITY, SIGN_IN, SIGN_OUT, GET_USER_ITEMS, SET_USER_ITEMS } from '../constants/action-types';\nesriConfig.portalUrl = APP_PORTAL_URL;\nconst info = new OAuthInfo({\n  appId: APP_ID,\n  popup: false,\n  portalUrl: APP_PORTAL_URL\n});\nconst portal = new Portal({\n  authMode: 'immediate'\n});\nIdentityManager.registerOAuthInfos([info]);\n\n/**\r\n * Middleware function with the signature\r\n *\r\n * storeInstance =>\r\n * functionToCallWithAnActionThatWillSendItToTheNextMiddleware =>\r\n * actionThatDispatchWasCalledWith =>\r\n * valueToUseAsTheReturnValueOfTheDispatchCall\r\n *\r\n * Typically written as\r\n * store => next => action => result\r\n */\nconst arcgisMiddleWare = store => next => action => {\n  switch (action.type) {\n    case GET_IDENTITY:\n      next(action);\n      return IdentityManager.checkSignInStatus(`${info.portalUrl}/sharing`).then(() => portal.load()).then(() => {\n        store.dispatch({\n          type: SET_IDENTITY,\n          username: portal.user.username,\n          fullname: portal.user.fullName,\n          email: portal.user.email,\n          thumbnailurl: portal.user.thumbnailUrl\n        });\n        store.dispatch({\n          type: GET_USER_ITEMS\n        });\n      });\n    case SIGN_IN:\n      IdentityManager.getCredential(`${info.portalUrl}/sharing`);\n      return next(action);\n    case SIGN_OUT:\n      IdentityManager.destroyCredentials();\n      window.location.reload();\n      return next(action);\n    case GET_USER_ITEMS:\n      next(action);\n      return portal.queryItems({\n        query: `owner:${portal.user.username}`,\n        sortField: 'modified',\n        sortOrder: 'desc',\n        num: 15\n      }).then(_ref => {\n        let {\n          results\n        } = _ref;\n        return store.dispatch({\n          type: SET_USER_ITEMS,\n          userItems: results\n        });\n      });\n    default:\n      return next(action);\n  }\n};\nexport default arcgisMiddleWare;","map":{"version":3,"names":["esriConfig","OAuthInfo","IdentityManager","Portal","APP_ID","APP_PORTAL_URL","GET_IDENTITY","SET_IDENTITY","SIGN_IN","SIGN_OUT","GET_USER_ITEMS","SET_USER_ITEMS","portalUrl","info","appId","popup","portal","authMode","registerOAuthInfos","arcgisMiddleWare","store","next","action","type","checkSignInStatus","then","load","dispatch","username","user","fullname","fullName","email","thumbnailurl","thumbnailUrl","getCredential","destroyCredentials","window","location","reload","queryItems","query","sortField","sortOrder","num","_ref","results","userItems"],"sources":["C:/code-challenge-react/frontend/src/middleware/arcgis-authentication.js"],"sourcesContent":["import esriConfig from '@arcgis/core/config'\r\nimport OAuthInfo from '@arcgis/core/identity/OAuthInfo'\r\nimport IdentityManager from '@arcgis/core/identity/IdentityManager'\r\nimport Portal from '@arcgis/core/portal/Portal'\r\n\r\nimport { APP_ID, APP_PORTAL_URL } from '../constants/app-constants'\r\n\r\nimport {\r\n  GET_IDENTITY,\r\n  SET_IDENTITY,\r\n  SIGN_IN,\r\n  SIGN_OUT,\r\n  GET_USER_ITEMS,\r\n  SET_USER_ITEMS,\r\n} from '../constants/action-types'\r\n\r\nesriConfig.portalUrl = APP_PORTAL_URL\r\nconst info = new OAuthInfo({ appId: APP_ID, popup: false, portalUrl: APP_PORTAL_URL })\r\nconst portal = new Portal({ authMode: 'immediate' })\r\n\r\nIdentityManager.registerOAuthInfos([info])\r\n\r\n/**\r\n * Middleware function with the signature\r\n *\r\n * storeInstance =>\r\n * functionToCallWithAnActionThatWillSendItToTheNextMiddleware =>\r\n * actionThatDispatchWasCalledWith =>\r\n * valueToUseAsTheReturnValueOfTheDispatchCall\r\n *\r\n * Typically written as\r\n * store => next => action => result\r\n */\r\nconst arcgisMiddleWare = store => next => (action) => {\r\n  switch (action.type) {\r\n    case GET_IDENTITY:\r\n      next(action);\r\n      return IdentityManager.checkSignInStatus(`${info.portalUrl}/sharing`)\r\n        .then(() => portal.load())\r\n        .then(() => {\r\n          store.dispatch({\r\n            type: SET_IDENTITY,\r\n            username: portal.user.username,\r\n            fullname: portal.user.fullName,\r\n            email: portal.user.email,\r\n            thumbnailurl: portal.user.thumbnailUrl,\r\n          });\r\n\r\n          store.dispatch({ type: GET_USER_ITEMS });\r\n        });\r\n\r\n    case SIGN_IN:\r\n      IdentityManager.getCredential(`${info.portalUrl}/sharing`)\r\n      return next(action)\r\n\r\n    case SIGN_OUT:\r\n      IdentityManager.destroyCredentials()\r\n      window.location.reload()\r\n      return next(action)\r\n\r\n    case GET_USER_ITEMS:\r\n      next(action);\r\n      return portal.queryItems({\r\n        query: `owner:${portal.user.username}`,\r\n        sortField: 'modified',\r\n        sortOrder: 'desc',\r\n        num: 15,\r\n      })\r\n        .then(({ results }) => store.dispatch({\r\n          type: SET_USER_ITEMS,\r\n          userItems: results,\r\n        }));\r\n\r\n    default:\r\n      return next(action);\r\n  }\r\n}\r\n\r\nexport default arcgisMiddleWare"],"mappings":"AAAA,OAAOA,UAAU,MAAM,qBAAqB;AAC5C,OAAOC,SAAS,MAAM,iCAAiC;AACvD,OAAOC,eAAe,MAAM,uCAAuC;AACnE,OAAOC,MAAM,MAAM,4BAA4B;AAE/C,SAASC,MAAM,EAAEC,cAAc,QAAQ,4BAA4B;AAEnE,SACEC,YAAY,EACZC,YAAY,EACZC,OAAO,EACPC,QAAQ,EACRC,cAAc,EACdC,cAAc,QACT,2BAA2B;AAElCX,UAAU,CAACY,SAAS,GAAGP,cAAc;AACrC,MAAMQ,IAAI,GAAG,IAAIZ,SAAS,CAAC;EAAEa,KAAK,EAAEV,MAAM;EAAEW,KAAK,EAAE,KAAK;EAAEH,SAAS,EAAEP;AAAe,CAAC,CAAC;AACtF,MAAMW,MAAM,GAAG,IAAIb,MAAM,CAAC;EAAEc,QAAQ,EAAE;AAAY,CAAC,CAAC;AAEpDf,eAAe,CAACgB,kBAAkB,CAAC,CAACL,IAAI,CAAC,CAAC;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMM,gBAAgB,GAAGC,KAAK,IAAIC,IAAI,IAAKC,MAAM,IAAK;EACpD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKjB,YAAY;MACfe,IAAI,CAACC,MAAM,CAAC;MACZ,OAAOpB,eAAe,CAACsB,iBAAiB,CAAE,GAAEX,IAAI,CAACD,SAAU,UAAS,CAAC,CAClEa,IAAI,CAAC,MAAMT,MAAM,CAACU,IAAI,EAAE,CAAC,CACzBD,IAAI,CAAC,MAAM;QACVL,KAAK,CAACO,QAAQ,CAAC;UACbJ,IAAI,EAAEhB,YAAY;UAClBqB,QAAQ,EAAEZ,MAAM,CAACa,IAAI,CAACD,QAAQ;UAC9BE,QAAQ,EAAEd,MAAM,CAACa,IAAI,CAACE,QAAQ;UAC9BC,KAAK,EAAEhB,MAAM,CAACa,IAAI,CAACG,KAAK;UACxBC,YAAY,EAAEjB,MAAM,CAACa,IAAI,CAACK;QAC5B,CAAC,CAAC;QAEFd,KAAK,CAACO,QAAQ,CAAC;UAAEJ,IAAI,EAAEb;QAAe,CAAC,CAAC;MAC1C,CAAC,CAAC;IAEN,KAAKF,OAAO;MACVN,eAAe,CAACiC,aAAa,CAAE,GAAEtB,IAAI,CAACD,SAAU,UAAS,CAAC;MAC1D,OAAOS,IAAI,CAACC,MAAM,CAAC;IAErB,KAAKb,QAAQ;MACXP,eAAe,CAACkC,kBAAkB,EAAE;MACpCC,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;MACxB,OAAOlB,IAAI,CAACC,MAAM,CAAC;IAErB,KAAKZ,cAAc;MACjBW,IAAI,CAACC,MAAM,CAAC;MACZ,OAAON,MAAM,CAACwB,UAAU,CAAC;QACvBC,KAAK,EAAG,SAAQzB,MAAM,CAACa,IAAI,CAACD,QAAS,EAAC;QACtCc,SAAS,EAAE,UAAU;QACrBC,SAAS,EAAE,MAAM;QACjBC,GAAG,EAAE;MACP,CAAC,CAAC,CACCnB,IAAI,CAACoB,IAAA;QAAA,IAAC;UAAEC;QAAQ,CAAC,GAAAD,IAAA;QAAA,OAAKzB,KAAK,CAACO,QAAQ,CAAC;UACpCJ,IAAI,EAAEZ,cAAc;UACpBoC,SAAS,EAAED;QACb,CAAC,CAAC;MAAA,EAAC;IAEP;MACE,OAAOzB,IAAI,CAACC,MAAM,CAAC;EAAC;AAE1B,CAAC;AAED,eAAeH,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}