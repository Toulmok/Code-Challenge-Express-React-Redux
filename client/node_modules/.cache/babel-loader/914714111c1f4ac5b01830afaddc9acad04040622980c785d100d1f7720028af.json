{"ast":null,"code":"import { base64UrlEncode } from \"./base-64-url.js\";\n/**\n * Utility to generate a random string to use as our `code_verifier`\n *\n * @param win the global `window` object for accepting a mock while testing.\n */\nexport function generateRandomString(win) {\n  /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n  if (!win && window) {\n    win = window;\n  }\n  var randomBytes = win.crypto.getRandomValues(new Uint8Array(32));\n  return base64UrlEncode(randomBytes);\n}","map":{"version":3,"names":["base64UrlEncode","generateRandomString","win","window","randomBytes","crypto","getRandomValues","Uint8Array"],"sources":["C:\\code-challenge-react\\node_modules\\@esri\\arcgis-rest-request\\src\\utils\\generate-random-string.ts"],"sourcesContent":["import { base64UrlEncode } from \"./base-64-url.js\";\n\n/**\n * Utility to generate a random string to use as our `code_verifier`\n *\n * @param win the global `window` object for accepting a mock while testing.\n */\nexport function generateRandomString(win?: any) {\n  /* istanbul ignore next: must pass in a mockwindow for tests so we can't cover the other branch */\n  if (!win && window) {\n    win = window;\n  }\n\n  const randomBytes = win.crypto.getRandomValues(new Uint8Array(32));\n  return base64UrlEncode(randomBytes);\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,kBAAkB;AAElD;;;;;AAKA,OAAM,SAAUC,oBAAoBA,CAACC,GAAS;EAC5C;EACA,IAAI,CAACA,GAAG,IAAIC,MAAM,EAAE;IAClBD,GAAG,GAAGC,MAAM;;EAGd,IAAMC,WAAW,GAAGF,GAAG,CAACG,MAAM,CAACC,eAAe,CAAC,IAAIC,UAAU,CAAC,EAAE,CAAC,CAAC;EAClE,OAAOP,eAAe,CAACI,WAAW,CAAC;AACrC"},"metadata":{},"sourceType":"module","externalDependencies":[]}