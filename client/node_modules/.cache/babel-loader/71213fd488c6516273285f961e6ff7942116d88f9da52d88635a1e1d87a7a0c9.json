{"ast":null,"code":"var _jsxFileName = \"C:\\\\code-challenge-react\\\\frontend\\\\src\\\\components\\\\Auth.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n//import { authStores, initialize } from '../stores/authStores'\n//const useAuthStores = authStores()\n//const { userId, status } = storeToRefs(authStores())\n\nexport function Auth(_ref) {\n  let {\n    appTitle\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n// Lifecycle\n_c = Auth;\nonMounted(async () => {\n  initialize();\n  await useAuthStores.checkCurrentStatus();\n});\n\n// Computed \nconst label = computed(() => useAuthStores.status ? 'Sign Out' : 'Sign In');\n\n// Public Methods\nasync function signInOut() {\n  if (!useAuthStores.status) {\n    await useAuthStores.signIn();\n    console.log(\"signing in\");\n  } else if (useAuthStores.status) {\n    await useAuthStores.signOut();\n    console.log(\"signing out\");\n  }\n  try {\n    await useAuthStores.updateUserId;\n  } catch (error) {\n    console.log(error);\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"names":["Auth","_ref","appTitle","_jsxDEV","_Fragment","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","onMounted","initialize","useAuthStores","checkCurrentStatus","label","computed","status","signInOut","signIn","console","log","signOut","updateUserId","error","$RefreshReg$"],"sources":["C:/code-challenge-react/frontend/src/components/Auth.tsx"],"sourcesContent":["import { storeToRefs } from 'pinia'\r\n//import { authStores, initialize } from '../stores/authStores'\r\n//const useAuthStores = authStores()\r\n//const { userId, status } = storeToRefs(authStores())\r\n\r\nexport function Auth({appTitle}) {\r\n    return (\r\n        <>\r\n            <span></span>\r\n            <button><span></span></button>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n// Lifecycle\r\nonMounted( async () => {\r\n    initialize()\r\n    await useAuthStores.checkCurrentStatus()\r\n})\r\n\r\n// Computed \r\nconst label = computed(() => useAuthStores.status ? 'Sign Out' : 'Sign In')\r\n\r\n// Public Methods\r\nasync function signInOut() {\r\n    if (!useAuthStores.status) { \r\n        await useAuthStores.signIn()\r\n        console.log(\"signing in\")\r\n    } else if (useAuthStores.status) { \r\n        await useAuthStores.signOut()\r\n        console.log(\"signing out\")        \r\n    }\r\n    try {await useAuthStores.updateUserId}\r\n    catch (error) { console.log(error) }\r\n}"],"mappings":";;;AACA;AACA;AACA;;AAEA,OAAO,SAASA,IAAIA,CAAAC,IAAA,EAAa;EAAA,IAAZ;IAACC;EAAQ,CAAC,GAAAD,IAAA;EAC3B,oBACIE,OAAA,CAAAC,SAAA;IAAAC,QAAA,gBACIF,OAAA;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAa,eACbN,OAAA;MAAAE,QAAA,eAAQF,OAAA;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAa;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS;EAAA,gBAC/B;AAEX;;AAIA;AAAAC,EAAA,GAXgBV,IAAI;AAYpBW,SAAS,CAAE,YAAY;EACnBC,UAAU,EAAE;EACZ,MAAMC,aAAa,CAACC,kBAAkB,EAAE;AAC5C,CAAC,CAAC;;AAEF;AACA,MAAMC,KAAK,GAAGC,QAAQ,CAAC,MAAMH,aAAa,CAACI,MAAM,GAAG,UAAU,GAAG,SAAS,CAAC;;AAE3E;AACA,eAAeC,SAASA,CAAA,EAAG;EACvB,IAAI,CAACL,aAAa,CAACI,MAAM,EAAE;IACvB,MAAMJ,aAAa,CAACM,MAAM,EAAE;IAC5BC,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;EAC7B,CAAC,MAAM,IAAIR,aAAa,CAACI,MAAM,EAAE;IAC7B,MAAMJ,aAAa,CAACS,OAAO,EAAE;IAC7BF,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;EAC9B;EACA,IAAI;IAAC,MAAMR,aAAa,CAACU,YAAY;EAAA,CAAC,CACtC,OAAOC,KAAK,EAAE;IAAEJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;EAAC;AACvC;AAAC,IAAAd,EAAA;AAAAe,YAAA,CAAAf,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}