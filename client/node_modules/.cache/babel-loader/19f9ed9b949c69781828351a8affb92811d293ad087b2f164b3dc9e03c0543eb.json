{"ast":null,"code":"import Portal from '@arcgis/core/portal/Portal';\nimport { LOAD_PORTAL, SET_IDENTITY, GET_USER_ITEMS, SET_USER_ITEMS, GET_USER_TAGS, SET_USER_TAGS } from '../constants/action-types';\nconst portal = new Portal({\n  authMode: 'immediate'\n});\nconst qParamArray = ['title', 'type', 'created', 'tag'];\n\n/**\r\n * Middleware function with the signature\r\n *\r\n * storeInstance =>\r\n * functionToCallWithAnActionThatWillSendItToTheNextMiddleware =>\r\n * actionThatDispatchWasCalledWith =>\r\n * valueToUseAsTheReturnValueOfTheDispatchCall\r\n *\r\n * Typically written as\r\n *\r\n * store => next => action => result\r\n */\nconst arcgisMiddleWare = store => next => action => {\n  switch (action.type) {\n    case LOAD_PORTAL:\n      portal.load().then(() => {\n        store.dispatch({\n          type: SET_IDENTITY,\n          username: portal.user.username,\n          fullname: portal.user.fullName,\n          email: portal.user.email,\n          thumbnailurl: portal.user.thumbnailUrl\n        });\n        store.dispatch({\n          type: GET_USER_ITEMS\n        });\n      }).then(() => {\n        store.dispatch({\n          type: GET_USER_TAGS\n        });\n      });\n    case GET_USER_ITEMS:\n      next(action);\n\n      //Does this sanitize?\n      let myUrlGet = new URL(window.location.href); //console.log(myUrlGet.toString())\n      let myUrlHas = new URLSearchParams(myUrlGet.search);\n      let qString = '';\n      if (myUrlHas.has(\"dcreated\")) {\n        let qDCreated = myUrlHas.get(\"dcreated\"); //console.log(qDCreated)\n        if (qDCreated != '') {\n          let created = new Date(qDCreated);\n          let createdUnix = created.getTime().toString();\n          if (myUrlHas.get(\"rcreated\") == \"before\") {\n            createdUnix = '[0 TO ' + createdUnix + ']';\n          } else if (myUrlHas.get(\"rcreated\") == \"after\") {\n            createdUnix = '[' + createdUnix + ' TO 99999999999999]';\n          }\n          ;\n          console.log(createdUnix);\n          myUrlHas.set(\"created\", createdUnix);\n        }\n      }\n      myUrlGet.search = myUrlHas.toString();\n      const new_url = myUrlGet.toString(); //console.log(new_url)\n      window.history.replaceState('', '', myUrlGet.search);\n      for (const field of qParamArray) {\n        if (myUrlHas.has(field)) {\n          if (myUrlGet.searchParams.get(field) != '') {\n            qString += ' AND ' + field + ':' + myUrlGet.searchParams.get(field);\n          }\n        }\n      }\n      if (portal.user != null) {\n        //console.log(\"query string is \" + qString)\n        try {\n          return portal.queryItems({\n            //portal.user.fetchItems() might be better\n            query: `owner:${portal.user.username}` + qString,\n            sortField: 'modified',\n            sortOrder: 'desc',\n            num: 100,\n            //max is 100, default is 10\n            start: 1\n          }).then(_ref => {\n            let {\n              results\n            } = _ref;\n            //console.log(results)\n            store.dispatch({\n              type: SET_USER_ITEMS,\n              userItems: results\n            });\n          });\n        } catch (err) {\n          console.log(err);\n        } finally {\n          console.log(portal.user.username + ' is getting items');\n        }\n      }\n    case GET_USER_TAGS:\n      next(action);\n      if (portal.user != null) {\n        try {\n          return portal.user.fetchTags().then(result => {\n            //console.log(result)\n            store.dispatch({\n              type: SET_USER_TAGS,\n              userTags: result.tag\n            });\n          });\n        } catch (err) {\n          console.log(err);\n        } finally {\n          console.log(portal.user.username + ' is fetching tags');\n        }\n      }\n    default:\n      return next(action);\n  }\n};\nexport default arcgisMiddleWare;","map":{"version":3,"names":["Portal","LOAD_PORTAL","SET_IDENTITY","GET_USER_ITEMS","SET_USER_ITEMS","GET_USER_TAGS","SET_USER_TAGS","portal","authMode","qParamArray","arcgisMiddleWare","store","next","action","type","load","then","dispatch","username","user","fullname","fullName","email","thumbnailurl","thumbnailUrl","myUrlGet","URL","window","location","href","myUrlHas","URLSearchParams","search","qString","has","qDCreated","get","created","Date","createdUnix","getTime","toString","console","log","set","new_url","history","replaceState","field","searchParams","queryItems","query","sortField","sortOrder","num","start","_ref","results","userItems","err","fetchTags","result","userTags","tag"],"sources":["C:/code-challenge-react/frontend/src/middleware/arcgis-portal.js"],"sourcesContent":["import Portal from '@arcgis/core/portal/Portal'\r\n\r\nimport {\r\n  LOAD_PORTAL,\r\n  SET_IDENTITY,\r\n  GET_USER_ITEMS,\r\n  SET_USER_ITEMS,\r\n  GET_USER_TAGS,\r\n  SET_USER_TAGS\r\n} from '../constants/action-types'\r\n\r\nconst portal = new Portal({ authMode: 'immediate' })\r\nconst qParamArray = ['title','type','created','tag']\r\n\r\n/**\r\n * Middleware function with the signature\r\n *\r\n * storeInstance =>\r\n * functionToCallWithAnActionThatWillSendItToTheNextMiddleware =>\r\n * actionThatDispatchWasCalledWith =>\r\n * valueToUseAsTheReturnValueOfTheDispatchCall\r\n *\r\n * Typically written as\r\n *\r\n * store => next => action => result\r\n */\r\nconst arcgisMiddleWare = store => next => (action) => {\r\n  switch (action.type) {\r\n    case LOAD_PORTAL:\r\n      portal.load()\r\n      .then(() => {\r\n        store.dispatch({\r\n          type: SET_IDENTITY,\r\n          username: portal.user.username,\r\n          fullname: portal.user.fullName,\r\n          email: portal.user.email,\r\n          thumbnailurl: portal.user.thumbnailUrl,\r\n        })\r\n        store.dispatch({ type: GET_USER_ITEMS })\r\n      }).then(() => {\r\n        store.dispatch({ type: GET_USER_TAGS })\r\n      })\r\n\r\n    case GET_USER_ITEMS:\r\n      next(action)\r\n\r\n      //Does this sanitize?\r\n      let myUrlGet = new URL(window.location.href); //console.log(myUrlGet.toString())\r\n      let myUrlHas = new URLSearchParams(myUrlGet.search)\r\n      let qString = ''\r\n\r\n      if(myUrlHas.has(\"dcreated\")) {\r\n        let qDCreated = myUrlHas.get(\"dcreated\"); //console.log(qDCreated)\r\n        if((qDCreated != '')){\r\n          let created = new Date(qDCreated)\r\n          let createdUnix = created.getTime().toString()\r\n          if(myUrlHas.get(\"rcreated\")==\"before\") {\r\n            createdUnix = '[0 TO ' + createdUnix + ']'\r\n          } else if (myUrlHas.get(\"rcreated\")==\"after\") {\r\n            createdUnix = '[' + createdUnix + ' TO 99999999999999]'\r\n          }; console.log(createdUnix)\r\n          myUrlHas.set(\"created\",createdUnix)\r\n        }\r\n      }\r\n\r\n      myUrlGet.search = myUrlHas.toString()\r\n      const new_url = myUrlGet.toString(); //console.log(new_url)\r\n      window.history.replaceState('','',myUrlGet.search)\r\n\r\n      for (const field of qParamArray) {\r\n        if(myUrlHas.has(field)) {\r\n          if((myUrlGet.searchParams.get(field) != '')){\r\n            qString += ' AND ' + field + ':' + myUrlGet.searchParams.get(field)\r\n          }\r\n        }\r\n      }\r\n      \r\n      if (portal.user != null) { //console.log(\"query string is \" + qString)\r\n        try { \r\n          return portal.queryItems({ //portal.user.fetchItems() might be better\r\n            query: `owner:${portal.user.username}` + qString,\r\n            sortField: 'modified',\r\n            sortOrder: 'desc',\r\n            num: 100, //max is 100, default is 10\r\n            start: 1,\r\n          })\r\n          .then(({ results }) => { //console.log(results)\r\n            store.dispatch({ \r\n              type: SET_USER_ITEMS, userItems: results,\r\n            })\r\n          })\r\n        }\r\n        catch(err) { console.log(err) }\r\n        finally { console.log(portal.user.username + ' is getting items') }\r\n      }\r\n\r\n    case GET_USER_TAGS:\r\n      next(action)\r\n\r\n      if (portal.user != null) {\r\n        try { \r\n          return portal.user.fetchTags()\r\n          .then((result) => { //console.log(result)\r\n            store.dispatch({ \r\n              type: SET_USER_TAGS, userTags: result.tag\r\n            })\r\n          })\r\n        }\r\n        catch(err) { console.log(err) }\r\n        finally { console.log(portal.user.username + ' is fetching tags') }\r\n      }\r\n\r\n    default:\r\n      return next(action)\r\n  }\r\n}\r\n\r\nexport default arcgisMiddleWare"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}