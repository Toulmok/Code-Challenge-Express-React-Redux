{"ast":null,"code":"/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Helper for methods with lots of first order request options to pass through as request parameters.\n */\nexport function appendCustomParams(customOptions, keys, baseOptions) {\n  var requestOptionsKeys = [\"params\", \"httpMethod\", \"rawResponse\", \"authentication\", \"portal\", \"fetch\", \"maxUrlLength\", \"headers\"];\n  var options = Object.assign(Object.assign({\n    params: {}\n  }, baseOptions), customOptions);\n  // merge all keys in customOptions into options.params\n  options.params = keys.reduce(function (value, key) {\n    if (customOptions[key] || typeof customOptions[key] === \"boolean\" || typeof customOptions[key] === \"number\" && customOptions[key] === 0) {\n      value[key] = customOptions[key];\n    }\n    return value;\n  }, options.params);\n  // now remove all properties in options that don't exist in IRequestOptions\n  return requestOptionsKeys.reduce(function (value, key) {\n    if (options[key]) {\n      value[key] = options[key];\n    }\n    return value;\n  }, {});\n}","map":{"version":3,"names":["appendCustomParams","customOptions","keys","baseOptions","requestOptionsKeys","options","Object","assign","params","reduce","value","key"],"sources":["C:\\code-challenge-react\\node_modules\\@esri\\arcgis-rest-request\\src\\utils\\append-custom-params.ts"],"sourcesContent":["/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IRequestOptions } from \"./IRequestOptions.js\";\n\n/**\n * Helper for methods with lots of first order request options to pass through as request parameters.\n */\nexport function appendCustomParams<T extends IRequestOptions>(\n  customOptions: T,\n  keys: Array<keyof T>,\n  baseOptions?: Partial<T>\n): IRequestOptions {\n  const requestOptionsKeys = [\n    \"params\",\n    \"httpMethod\",\n    \"rawResponse\",\n    \"authentication\",\n    \"portal\",\n    \"fetch\",\n    \"maxUrlLength\",\n    \"headers\"\n  ];\n\n  const options: T = {\n    ...{ params: {} },\n    ...baseOptions,\n    ...customOptions\n  };\n\n  // merge all keys in customOptions into options.params\n  options.params = keys.reduce((value, key) => {\n    if (\n      customOptions[key] ||\n      typeof customOptions[key] === \"boolean\" ||\n      (typeof customOptions[key] === \"number\" &&\n        (customOptions[key] as unknown) === 0)\n    ) {\n      value[key as any] = customOptions[key];\n    }\n    return value;\n  }, options.params);\n\n  // now remove all properties in options that don't exist in IRequestOptions\n  return requestOptionsKeys.reduce((value, key) => {\n    if ((options as any)[key]) {\n      (value as any)[key] = (options as any)[key];\n    }\n    return value;\n  }, {} as IRequestOptions);\n}\n"],"mappings":"AAAA;;AAKA;;;AAGA,OAAM,SAAUA,kBAAkBA,CAChCC,aAAgB,EAChBC,IAAoB,EACpBC,WAAwB;EAExB,IAAMC,kBAAkB,GAAG,CACzB,QAAQ,EACR,YAAY,EACZ,aAAa,EACb,gBAAgB,EAChB,QAAQ,EACR,OAAO,EACP,cAAc,EACd,SAAS,CACV;EAED,IAAMC,OAAO,GAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,CACR;IAAEC,MAAM,EAAE;EAAE,CAAE,EACdL,WAAW,GACXF,aAAa,CACjB;EAED;EACAI,OAAO,CAACG,MAAM,GAAGN,IAAI,CAACO,MAAM,CAAC,UAACC,KAAK,EAAEC,GAAG,EAAI;IAC1C,IACEV,aAAa,CAACU,GAAG,CAAC,IAClB,OAAOV,aAAa,CAACU,GAAG,CAAC,KAAK,SAAS,IACtC,OAAOV,aAAa,CAACU,GAAG,CAAC,KAAK,QAAQ,IACpCV,aAAa,CAACU,GAAG,CAAa,KAAK,CAAE,EACxC;MACAD,KAAK,CAACC,GAAU,CAAC,GAAGV,aAAa,CAACU,GAAG,CAAC;;IAExC,OAAOD,KAAK;EACd,CAAC,EAAEL,OAAO,CAACG,MAAM,CAAC;EAElB;EACA,OAAOJ,kBAAkB,CAACK,MAAM,CAAC,UAACC,KAAK,EAAEC,GAAG,EAAI;IAC9C,IAAKN,OAAe,CAACM,GAAG,CAAC,EAAE;MACxBD,KAAa,CAACC,GAAG,CAAC,GAAIN,OAAe,CAACM,GAAG,CAAC;;IAE7C,OAAOD,KAAK;EACd,CAAC,EAAE,EAAqB,CAAC;AAC3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}