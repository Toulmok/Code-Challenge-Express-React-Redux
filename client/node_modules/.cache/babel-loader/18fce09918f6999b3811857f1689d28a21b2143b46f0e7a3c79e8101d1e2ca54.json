{"ast":null,"code":"/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.0.8-next.4\n */\nimport { v as containsCrossShadowBoundary, r as closestElementCrossShadowBoundary } from './dom.js';\nimport { n as numberKeys } from './key.js';\nimport { c as createObserver } from './observers.js';\nconst defaultMinusSignRegex = new RegExp(\"-\", \"g\");\nconst unnecessaryDecimalRegex = new RegExp(\"\\\\.?0+$\");\n// adopted from https://stackoverflow.com/a/66939244\nclass BigDecimal {\n  constructor(input) {\n    this.add = num => BigDecimal.fromBigInt(this.value + new BigDecimal(num).value);\n    this.subtract = num => BigDecimal.fromBigInt(this.value - new BigDecimal(num).value);\n    this.multiply = num => BigDecimal._divRound(this.value * new BigDecimal(num).value, BigDecimal.SHIFT);\n    this.divide = num => BigDecimal._divRound(this.value * BigDecimal.SHIFT, new BigDecimal(num).value);\n    if (input instanceof BigDecimal) {\n      return input;\n    }\n    const [integers, decimals] = String(input).split(\".\").concat(\"\");\n    this.value = BigInt(integers + decimals.padEnd(BigDecimal.DECIMALS, \"0\").slice(0, BigDecimal.DECIMALS)) + BigInt(BigDecimal.ROUNDED && decimals[BigDecimal.DECIMALS] >= \"5\");\n    this.isNegative = input.charAt(0) === \"-\";\n  }\n  getIntegersAndDecimals() {\n    const s = this.value.toString().replace(defaultMinusSignRegex, \"\").padStart(BigDecimal.DECIMALS + 1, \"0\");\n    const integers = s.slice(0, -BigDecimal.DECIMALS);\n    const decimals = s.slice(-BigDecimal.DECIMALS).replace(unnecessaryDecimalRegex, \"\");\n    return {\n      integers,\n      decimals\n    };\n  }\n  toString() {\n    const {\n      integers,\n      decimals\n    } = this.getIntegersAndDecimals();\n    return `${this.isNegative ? \"-\" : \"\"}${integers}${decimals.length ? \".\" + decimals : \"\"}`;\n  }\n  formatToParts(formatter) {\n    const {\n      integers,\n      decimals\n    } = this.getIntegersAndDecimals();\n    const parts = formatter.numberFormatter.formatToParts(BigInt(integers));\n    this.isNegative && parts.unshift({\n      type: \"minusSign\",\n      value: formatter.minusSign\n    });\n    if (decimals.length) {\n      parts.push({\n        type: \"decimal\",\n        value: formatter.decimal\n      });\n      decimals.split(\"\").forEach(char => parts.push({\n        type: \"fraction\",\n        value: char\n      }));\n    }\n    return parts;\n  }\n  format(formatter) {\n    const {\n      integers,\n      decimals\n    } = this.getIntegersAndDecimals();\n    const integersFormatted = `${this.isNegative ? formatter.minusSign : \"\"}${formatter.numberFormatter.format(BigInt(integers))}`;\n    const decimalsFormatted = decimals.length ? `${formatter.decimal}${decimals.split(\"\").map(char => formatter.numberFormatter.format(Number(char))).join(\"\")}` : \"\";\n    return `${integersFormatted}${decimalsFormatted}`;\n  }\n}\n// Configuration: constants\nBigDecimal.DECIMALS = 100; // number of decimals on all instances\nBigDecimal.ROUNDED = true; // numbers are truncated (false) or rounded (true)\nBigDecimal.SHIFT = BigInt(\"1\" + \"0\".repeat(BigDecimal.DECIMALS)); // derived constant\nBigDecimal._divRound = (dividend, divisor) => BigDecimal.fromBigInt(dividend / divisor + (BigDecimal.ROUNDED ? dividend * BigInt(2) / divisor % BigInt(2) : BigInt(0)));\nBigDecimal.fromBigInt = bigint => Object.assign(Object.create(BigDecimal.prototype), {\n  value: bigint\n});\nfunction isValidNumber(numberString) {\n  return !(!numberString || isNaN(Number(numberString)));\n}\nfunction parseNumberString(numberString) {\n  if (!numberString || !stringContainsNumbers(numberString)) {\n    return \"\";\n  }\n  return sanitizeExponentialNumberString(numberString, nonExpoNumString => {\n    let containsDecimal = false;\n    const result = nonExpoNumString.split(\"\").filter((value, i) => {\n      if (value.match(/\\./g) && !containsDecimal) {\n        containsDecimal = true;\n        return true;\n      }\n      if (value.match(/\\-/g) && i === 0) {\n        return true;\n      }\n      return numberKeys.includes(value);\n    }).reduce((string, part) => string + part);\n    return isValidNumber(result) ? new BigDecimal(result).toString() : \"\";\n  });\n}\n// regex for number sanitization\nconst allLeadingZerosOptionallyNegative = /^([-0])0+(?=\\d)/;\nconst decimalOnlyAtEndOfString = /(?!^\\.)\\.$/;\nconst allHyphensExceptTheStart = /(?!^-)-/g;\nconst isNegativeDecimalOnlyZeros = /^-\\b0\\b\\.?0*$/;\nconst sanitizeNumberString = numberString => sanitizeExponentialNumberString(numberString, nonExpoNumString => {\n  const sanitizedValue = nonExpoNumString.replace(allHyphensExceptTheStart, \"\").replace(decimalOnlyAtEndOfString, \"\").replace(allLeadingZerosOptionallyNegative, \"$1\");\n  return isValidNumber(sanitizedValue) ? isNegativeDecimalOnlyZeros.test(sanitizedValue) ? sanitizedValue : new BigDecimal(sanitizedValue).toString() : nonExpoNumString;\n});\nfunction sanitizeExponentialNumberString(numberString, func) {\n  if (!numberString) {\n    return numberString;\n  }\n  const firstE = numberString.toLowerCase().indexOf(\"e\") + 1;\n  if (!firstE) {\n    return func(numberString);\n  }\n  return numberString.replace(/[eE]*$/g, \"\").substring(0, firstE).concat(numberString.slice(firstE).replace(/[eE]/g, \"\")).split(/[eE]/).map((section, i) => i === 1 ? func(section.replace(/\\./g, \"\")) : func(section)).join(\"e\").replace(/^e/, \"1e\");\n}\nfunction stringContainsNumbers(string) {\n  return numberKeys.some(number => string.includes(number));\n}\nconst defaultLocale = \"en\";\nconst t9nLocales = [\"ar\", \"bg\", \"bs\", \"ca\", \"cs\", \"da\", \"de\", \"el\", defaultLocale, \"es\", \"et\", \"fi\", \"fr\", \"he\", \"hr\", \"hu\", \"id\", \"it\", \"ja\", \"ko\", \"lt\", \"lv\", \"no\", \"nl\", \"pl\", \"pt-BR\", \"pt-PT\", \"ro\", \"ru\", \"sk\", \"sl\", \"sr\", \"sv\", \"th\", \"tr\", \"uk\", \"vi\", \"zh-CN\", \"zh-HK\", \"zh-TW\"];\nconst locales = [\"ar\", \"bg\", \"bs\", \"ca\", \"cs\", \"da\", \"de\", \"de-CH\", \"el\", defaultLocale, \"en-AU\", \"en-CA\", \"en-GB\", \"es\", \"es-MX\", \"et\", \"fi\", \"fr\", \"fr-CH\", \"he\", \"hi\", \"hr\", \"hu\", \"id\", \"it\", \"it-CH\", \"ja\", \"ko\", \"lt\", \"lv\", \"mk\", \"no\", \"nl\", \"pl\", \"pt\", \"pt-PT\", \"ro\", \"ru\", \"sk\", \"sl\", \"sr\", \"sv\", \"th\", \"tr\", \"uk\", \"vi\", \"zh-CN\", \"zh-HK\", \"zh-TW\"];\nconst numberingSystems = [\"arab\", \"arabext\", \"bali\", \"beng\", \"deva\", \"fullwide\", \"gujr\", \"guru\", \"hanidec\", \"khmr\", \"knda\", \"laoo\", \"latn\", \"limb\", \"mlym\", \"mong\", \"mymr\", \"orya\", \"tamldec\", \"telu\", \"thai\", \"tibt\"];\nconst isNumberingSystemSupported = numberingSystem => numberingSystems.includes(numberingSystem);\nconst browserNumberingSystem = new Intl.NumberFormat().resolvedOptions().numberingSystem;\nconst defaultNumberingSystem = browserNumberingSystem === \"arab\" || !isNumberingSystemSupported(browserNumberingSystem) ? \"latn\" : browserNumberingSystem;\nconst getSupportedNumberingSystem = numberingSystem => isNumberingSystemSupported(numberingSystem) ? numberingSystem : defaultNumberingSystem;\n/**\n * Gets the locale that best matches the context.\n *\n * @param locale â€“ the BCP 47 locale code\n * @param context - specifies whether the locale code should match in the context of CLDR or T9N (translation)\n */\nfunction getSupportedLocale(locale) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"cldr\";\n  const contextualLocales = context === \"cldr\" ? locales : t9nLocales;\n  if (!locale) {\n    return defaultLocale;\n  }\n  if (contextualLocales.includes(locale)) {\n    return locale;\n  }\n  locale = locale.toLowerCase();\n  // we support both 'nb' and 'no' (BCP 47) for Norwegian but only `no` has corresponding bundle\n  if (locale === \"nb\") {\n    return \"no\";\n  }\n  // we use `pt-BR` as it will have the same translations as `pt`, which has no corresponding bundle\n  if (context === \"t9n\" && locale === \"pt\") {\n    return \"pt-BR\";\n  }\n  if (locale.includes(\"-\")) {\n    locale = locale.replace(/(\\w+)-(\\w+)/, (_match, language, region) => `${language}-${region.toUpperCase()}`);\n    if (!contextualLocales.includes(locale)) {\n      locale = locale.split(\"-\")[0];\n    }\n  }\n  // we can `zh-CN` as base translation for chinese locales which has no corresponding bundle.\n  if (locale === \"zh\") {\n    return \"zh-CN\";\n  }\n  if (!contextualLocales.includes(locale)) {\n    console.warn(`Translations for the \"${locale}\" locale are not available and will fall back to the default, English (en).`);\n    return defaultLocale;\n  }\n  return locale;\n}\nconst connectedComponents = new Set();\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback` before any logic that depends on locale\n *\n * @param component\n */\nfunction connectLocalized(component) {\n  updateEffectiveLocale(component);\n  if (connectedComponents.size === 0) {\n    mutationObserver?.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"lang\"],\n      subtree: true\n    });\n  }\n  connectedComponents.add(component);\n}\n/**\n * This is only exported for components that implemented the now deprecated `locale` prop.\n *\n * Do not use this utils for new components.\n *\n * @param component\n */\nfunction updateEffectiveLocale(component) {\n  component.effectiveLocale = getLocale(component);\n}\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nfunction disconnectLocalized(component) {\n  connectedComponents.delete(component);\n  if (connectedComponents.size === 0) {\n    mutationObserver.disconnect();\n  }\n}\nconst mutationObserver = createObserver(\"mutation\", records => {\n  records.forEach(record => {\n    const el = record.target;\n    connectedComponents.forEach(component => {\n      const inUnrelatedSubtree = !containsCrossShadowBoundary(el, component.el);\n      if (inUnrelatedSubtree) {\n        return;\n      }\n      const closestLangEl = closestElementCrossShadowBoundary(component.el, \"[lang]\");\n      if (!closestLangEl) {\n        component.effectiveLocale = defaultLocale;\n        return;\n      }\n      const closestLang = closestLangEl.lang;\n      component.effectiveLocale =\n      // user set lang=\"\" means unknown language, so we use default\n      closestLangEl.hasAttribute(\"lang\") && closestLang === \"\" ? defaultLocale : closestLang;\n    });\n  });\n});\n/**\n * This util helps resolve a component's locale.\n * It will also fall back on the deprecated `locale` if a component implemented this previously.\n *\n * @param component\n */\nfunction getLocale(component) {\n  return component.el.lang || closestElementCrossShadowBoundary(component.el, \"[lang]\")?.lang || document.documentElement.lang || defaultLocale;\n}\n/**\n * This util formats and parses numbers for localization\n */\nclass NumberStringFormat {\n  constructor() {\n    this.delocalize = numberString =>\n    // For performance, (de)localization is skipped if the formatter isn't initialized.\n    // In order to localize/delocalize, e.g. when lang/numberingSystem props are not default values,\n    // `numberFormatOptions` must be set in a component to create and cache the formatter.\n    this._numberFormatOptions ? sanitizeExponentialNumberString(numberString, nonExpoNumString => nonExpoNumString.trim().replace(new RegExp(`[${this._minusSign}]`, \"g\"), \"-\").replace(new RegExp(`[${this._group}]`, \"g\"), \"\").replace(new RegExp(`[${this._decimal}]`, \"g\"), \".\").replace(new RegExp(`[${this._digits.join(\"\")}]`, \"g\"), this._getDigitIndex)) : numberString;\n    this.localize = numberString => this._numberFormatOptions ? sanitizeExponentialNumberString(numberString, nonExpoNumString => isValidNumber(nonExpoNumString.trim()) ? new BigDecimal(nonExpoNumString.trim()).format(this).replace(new RegExp(`[${this._actualGroup}]`, \"g\"), this._group) : nonExpoNumString) : numberString;\n  }\n  get group() {\n    return this._group;\n  }\n  get decimal() {\n    return this._decimal;\n  }\n  get minusSign() {\n    return this._minusSign;\n  }\n  get digits() {\n    return this._digits;\n  }\n  get numberFormatter() {\n    return this._numberFormatter;\n  }\n  get numberFormatOptions() {\n    return this._numberFormatOptions;\n  }\n  /**\n   * numberFormatOptions needs to be set before localize/delocalize is called to ensure the options are up to date\n   */\n  set numberFormatOptions(options) {\n    options.locale = getSupportedLocale(options?.locale);\n    options.numberingSystem = getSupportedNumberingSystem(options?.numberingSystem);\n    if (\n    // No need to create the formatter if `locale` and `numberingSystem`\n    // are the default values and `numberFormatOptions` has not been set\n    !this._numberFormatOptions && options.locale === defaultLocale && options.numberingSystem === defaultNumberingSystem &&\n    // don't skip initialization if any options besides locale/numberingSystem are set\n    Object.keys(options).length === 2 ||\n    // cache formatter by only recreating when options change\n    JSON.stringify(this._numberFormatOptions) === JSON.stringify(options)) {\n      return;\n    }\n    this._numberFormatOptions = options;\n    this._numberFormatter = new Intl.NumberFormat(this._numberFormatOptions.locale, this._numberFormatOptions);\n    this._digits = [...new Intl.NumberFormat(this._numberFormatOptions.locale, {\n      useGrouping: false,\n      numberingSystem: this._numberFormatOptions.numberingSystem\n    }).format(9876543210)].reverse();\n    const index = new Map(this._digits.map((d, i) => [d, i]));\n    const parts = new Intl.NumberFormat(this._numberFormatOptions.locale).formatToParts(-12345678.9);\n    this._actualGroup = parts.find(d => d.type === \"group\").value;\n    // change whitespace group characters that don't render correctly\n    this._group = this._actualGroup.trim().length === 0 ? \" \" : this._actualGroup;\n    this._decimal = parts.find(d => d.type === \"decimal\").value;\n    this._minusSign = parts.find(d => d.type === \"minusSign\").value;\n    this._getDigitIndex = d => index.get(d);\n  }\n}\nconst numberStringFormatter = new NumberStringFormat();\nexport { defaultNumberingSystem as a, getSupportedNumberingSystem as b, connectLocalized as c, disconnectLocalized as d, getSupportedLocale as g, isValidNumber as i, numberStringFormatter as n, parseNumberString as p, sanitizeNumberString as s };","map":{"version":3,"names":["v","containsCrossShadowBoundary","r","closestElementCrossShadowBoundary","n","numberKeys","c","createObserver","defaultMinusSignRegex","RegExp","unnecessaryDecimalRegex","BigDecimal","constructor","input","add","num","fromBigInt","value","subtract","multiply","_divRound","SHIFT","divide","integers","decimals","String","split","concat","BigInt","padEnd","DECIMALS","slice","ROUNDED","isNegative","charAt","getIntegersAndDecimals","s","toString","replace","padStart","length","formatToParts","formatter","parts","numberFormatter","unshift","type","minusSign","push","decimal","forEach","char","format","integersFormatted","decimalsFormatted","map","Number","join","repeat","dividend","divisor","bigint","Object","assign","create","prototype","isValidNumber","numberString","isNaN","parseNumberString","stringContainsNumbers","sanitizeExponentialNumberString","nonExpoNumString","containsDecimal","result","filter","i","match","includes","reduce","string","part","allLeadingZerosOptionallyNegative","decimalOnlyAtEndOfString","allHyphensExceptTheStart","isNegativeDecimalOnlyZeros","sanitizeNumberString","sanitizedValue","test","func","firstE","toLowerCase","indexOf","substring","section","some","number","defaultLocale","t9nLocales","locales","numberingSystems","isNumberingSystemSupported","numberingSystem","browserNumberingSystem","Intl","NumberFormat","resolvedOptions","defaultNumberingSystem","getSupportedNumberingSystem","getSupportedLocale","locale","context","arguments","undefined","contextualLocales","_match","language","region","toUpperCase","console","warn","connectedComponents","Set","connectLocalized","component","updateEffectiveLocale","size","mutationObserver","observe","document","documentElement","attributes","attributeFilter","subtree","effectiveLocale","getLocale","disconnectLocalized","delete","disconnect","records","record","el","target","inUnrelatedSubtree","closestLangEl","closestLang","lang","hasAttribute","NumberStringFormat","delocalize","_numberFormatOptions","trim","_minusSign","_group","_decimal","_digits","_getDigitIndex","localize","_actualGroup","group","digits","_numberFormatter","numberFormatOptions","options","keys","JSON","stringify","useGrouping","reverse","index","Map","d","find","get","numberStringFormatter","a","b","g","p"],"sources":["C:/code-challenge-react/frontend/node_modules/@esri/calcite-components/dist/components/locale.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.0.8-next.4\n */\nimport { v as containsCrossShadowBoundary, r as closestElementCrossShadowBoundary } from './dom.js';\nimport { n as numberKeys } from './key.js';\nimport { c as createObserver } from './observers.js';\n\nconst defaultMinusSignRegex = new RegExp(\"-\", \"g\");\nconst unnecessaryDecimalRegex = new RegExp(\"\\\\.?0+$\");\n// adopted from https://stackoverflow.com/a/66939244\nclass BigDecimal {\n  constructor(input) {\n    this.add = (num) => BigDecimal.fromBigInt(this.value + new BigDecimal(num).value);\n    this.subtract = (num) => BigDecimal.fromBigInt(this.value - new BigDecimal(num).value);\n    this.multiply = (num) => BigDecimal._divRound(this.value * new BigDecimal(num).value, BigDecimal.SHIFT);\n    this.divide = (num) => BigDecimal._divRound(this.value * BigDecimal.SHIFT, new BigDecimal(num).value);\n    if (input instanceof BigDecimal) {\n      return input;\n    }\n    const [integers, decimals] = String(input).split(\".\").concat(\"\");\n    this.value =\n      BigInt(integers + decimals.padEnd(BigDecimal.DECIMALS, \"0\").slice(0, BigDecimal.DECIMALS)) +\n        BigInt(BigDecimal.ROUNDED && decimals[BigDecimal.DECIMALS] >= \"5\");\n    this.isNegative = input.charAt(0) === \"-\";\n  }\n  getIntegersAndDecimals() {\n    const s = this.value\n      .toString()\n      .replace(defaultMinusSignRegex, \"\")\n      .padStart(BigDecimal.DECIMALS + 1, \"0\");\n    const integers = s.slice(0, -BigDecimal.DECIMALS);\n    const decimals = s.slice(-BigDecimal.DECIMALS).replace(unnecessaryDecimalRegex, \"\");\n    return { integers, decimals };\n  }\n  toString() {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    return `${this.isNegative ? \"-\" : \"\"}${integers}${decimals.length ? \".\" + decimals : \"\"}`;\n  }\n  formatToParts(formatter) {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    const parts = formatter.numberFormatter.formatToParts(BigInt(integers));\n    this.isNegative && parts.unshift({ type: \"minusSign\", value: formatter.minusSign });\n    if (decimals.length) {\n      parts.push({ type: \"decimal\", value: formatter.decimal });\n      decimals.split(\"\").forEach((char) => parts.push({ type: \"fraction\", value: char }));\n    }\n    return parts;\n  }\n  format(formatter) {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    const integersFormatted = `${this.isNegative ? formatter.minusSign : \"\"}${formatter.numberFormatter.format(BigInt(integers))}`;\n    const decimalsFormatted = decimals.length\n      ? `${formatter.decimal}${decimals\n        .split(\"\")\n        .map((char) => formatter.numberFormatter.format(Number(char)))\n        .join(\"\")}`\n      : \"\";\n    return `${integersFormatted}${decimalsFormatted}`;\n  }\n}\n// Configuration: constants\nBigDecimal.DECIMALS = 100; // number of decimals on all instances\nBigDecimal.ROUNDED = true; // numbers are truncated (false) or rounded (true)\nBigDecimal.SHIFT = BigInt(\"1\" + \"0\".repeat(BigDecimal.DECIMALS)); // derived constant\nBigDecimal._divRound = (dividend, divisor) => BigDecimal.fromBigInt(dividend / divisor + (BigDecimal.ROUNDED ? ((dividend * BigInt(2)) / divisor) % BigInt(2) : BigInt(0)));\nBigDecimal.fromBigInt = (bigint) => Object.assign(Object.create(BigDecimal.prototype), { value: bigint });\nfunction isValidNumber(numberString) {\n  return !(!numberString || isNaN(Number(numberString)));\n}\nfunction parseNumberString(numberString) {\n  if (!numberString || !stringContainsNumbers(numberString)) {\n    return \"\";\n  }\n  return sanitizeExponentialNumberString(numberString, (nonExpoNumString) => {\n    let containsDecimal = false;\n    const result = nonExpoNumString\n      .split(\"\")\n      .filter((value, i) => {\n      if (value.match(/\\./g) && !containsDecimal) {\n        containsDecimal = true;\n        return true;\n      }\n      if (value.match(/\\-/g) && i === 0) {\n        return true;\n      }\n      return numberKeys.includes(value);\n    })\n      .reduce((string, part) => string + part);\n    return isValidNumber(result) ? new BigDecimal(result).toString() : \"\";\n  });\n}\n// regex for number sanitization\nconst allLeadingZerosOptionallyNegative = /^([-0])0+(?=\\d)/;\nconst decimalOnlyAtEndOfString = /(?!^\\.)\\.$/;\nconst allHyphensExceptTheStart = /(?!^-)-/g;\nconst isNegativeDecimalOnlyZeros = /^-\\b0\\b\\.?0*$/;\nconst sanitizeNumberString = (numberString) => sanitizeExponentialNumberString(numberString, (nonExpoNumString) => {\n  const sanitizedValue = nonExpoNumString\n    .replace(allHyphensExceptTheStart, \"\")\n    .replace(decimalOnlyAtEndOfString, \"\")\n    .replace(allLeadingZerosOptionallyNegative, \"$1\");\n  return isValidNumber(sanitizedValue)\n    ? isNegativeDecimalOnlyZeros.test(sanitizedValue)\n      ? sanitizedValue\n      : new BigDecimal(sanitizedValue).toString()\n    : nonExpoNumString;\n});\nfunction sanitizeExponentialNumberString(numberString, func) {\n  if (!numberString) {\n    return numberString;\n  }\n  const firstE = numberString.toLowerCase().indexOf(\"e\") + 1;\n  if (!firstE) {\n    return func(numberString);\n  }\n  return numberString\n    .replace(/[eE]*$/g, \"\")\n    .substring(0, firstE)\n    .concat(numberString.slice(firstE).replace(/[eE]/g, \"\"))\n    .split(/[eE]/)\n    .map((section, i) => (i === 1 ? func(section.replace(/\\./g, \"\")) : func(section)))\n    .join(\"e\")\n    .replace(/^e/, \"1e\");\n}\nfunction stringContainsNumbers(string) {\n  return numberKeys.some((number) => string.includes(number));\n}\n\nconst defaultLocale = \"en\";\nconst t9nLocales = [\n  \"ar\",\n  \"bg\",\n  \"bs\",\n  \"ca\",\n  \"cs\",\n  \"da\",\n  \"de\",\n  \"el\",\n  defaultLocale,\n  \"es\",\n  \"et\",\n  \"fi\",\n  \"fr\",\n  \"he\",\n  \"hr\",\n  \"hu\",\n  \"id\",\n  \"it\",\n  \"ja\",\n  \"ko\",\n  \"lt\",\n  \"lv\",\n  \"no\",\n  \"nl\",\n  \"pl\",\n  \"pt-BR\",\n  \"pt-PT\",\n  \"ro\",\n  \"ru\",\n  \"sk\",\n  \"sl\",\n  \"sr\",\n  \"sv\",\n  \"th\",\n  \"tr\",\n  \"uk\",\n  \"vi\",\n  \"zh-CN\",\n  \"zh-HK\",\n  \"zh-TW\"\n];\nconst locales = [\n  \"ar\",\n  \"bg\",\n  \"bs\",\n  \"ca\",\n  \"cs\",\n  \"da\",\n  \"de\",\n  \"de-CH\",\n  \"el\",\n  defaultLocale,\n  \"en-AU\",\n  \"en-CA\",\n  \"en-GB\",\n  \"es\",\n  \"es-MX\",\n  \"et\",\n  \"fi\",\n  \"fr\",\n  \"fr-CH\",\n  \"he\",\n  \"hi\",\n  \"hr\",\n  \"hu\",\n  \"id\",\n  \"it\",\n  \"it-CH\",\n  \"ja\",\n  \"ko\",\n  \"lt\",\n  \"lv\",\n  \"mk\",\n  \"no\",\n  \"nl\",\n  \"pl\",\n  \"pt\",\n  \"pt-PT\",\n  \"ro\",\n  \"ru\",\n  \"sk\",\n  \"sl\",\n  \"sr\",\n  \"sv\",\n  \"th\",\n  \"tr\",\n  \"uk\",\n  \"vi\",\n  \"zh-CN\",\n  \"zh-HK\",\n  \"zh-TW\"\n];\nconst numberingSystems = [\n  \"arab\",\n  \"arabext\",\n  \"bali\",\n  \"beng\",\n  \"deva\",\n  \"fullwide\",\n  \"gujr\",\n  \"guru\",\n  \"hanidec\",\n  \"khmr\",\n  \"knda\",\n  \"laoo\",\n  \"latn\",\n  \"limb\",\n  \"mlym\",\n  \"mong\",\n  \"mymr\",\n  \"orya\",\n  \"tamldec\",\n  \"telu\",\n  \"thai\",\n  \"tibt\"\n];\nconst isNumberingSystemSupported = (numberingSystem) => numberingSystems.includes(numberingSystem);\nconst browserNumberingSystem = new Intl.NumberFormat().resolvedOptions().numberingSystem;\nconst defaultNumberingSystem = browserNumberingSystem === \"arab\" || !isNumberingSystemSupported(browserNumberingSystem)\n  ? \"latn\"\n  : browserNumberingSystem;\nconst getSupportedNumberingSystem = (numberingSystem) => isNumberingSystemSupported(numberingSystem) ? numberingSystem : defaultNumberingSystem;\n/**\n * Gets the locale that best matches the context.\n *\n * @param locale â€“ the BCP 47 locale code\n * @param context - specifies whether the locale code should match in the context of CLDR or T9N (translation)\n */\nfunction getSupportedLocale(locale, context = \"cldr\") {\n  const contextualLocales = context === \"cldr\" ? locales : t9nLocales;\n  if (!locale) {\n    return defaultLocale;\n  }\n  if (contextualLocales.includes(locale)) {\n    return locale;\n  }\n  locale = locale.toLowerCase();\n  // we support both 'nb' and 'no' (BCP 47) for Norwegian but only `no` has corresponding bundle\n  if (locale === \"nb\") {\n    return \"no\";\n  }\n  // we use `pt-BR` as it will have the same translations as `pt`, which has no corresponding bundle\n  if (context === \"t9n\" && locale === \"pt\") {\n    return \"pt-BR\";\n  }\n  if (locale.includes(\"-\")) {\n    locale = locale.replace(/(\\w+)-(\\w+)/, (_match, language, region) => `${language}-${region.toUpperCase()}`);\n    if (!contextualLocales.includes(locale)) {\n      locale = locale.split(\"-\")[0];\n    }\n  }\n  // we can `zh-CN` as base translation for chinese locales which has no corresponding bundle.\n  if (locale === \"zh\") {\n    return \"zh-CN\";\n  }\n  if (!contextualLocales.includes(locale)) {\n    console.warn(`Translations for the \"${locale}\" locale are not available and will fall back to the default, English (en).`);\n    return defaultLocale;\n  }\n  return locale;\n}\nconst connectedComponents = new Set();\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback` before any logic that depends on locale\n *\n * @param component\n */\nfunction connectLocalized(component) {\n  updateEffectiveLocale(component);\n  if (connectedComponents.size === 0) {\n    mutationObserver?.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"lang\"],\n      subtree: true\n    });\n  }\n  connectedComponents.add(component);\n}\n/**\n * This is only exported for components that implemented the now deprecated `locale` prop.\n *\n * Do not use this utils for new components.\n *\n * @param component\n */\nfunction updateEffectiveLocale(component) {\n  component.effectiveLocale = getLocale(component);\n}\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nfunction disconnectLocalized(component) {\n  connectedComponents.delete(component);\n  if (connectedComponents.size === 0) {\n    mutationObserver.disconnect();\n  }\n}\nconst mutationObserver = createObserver(\"mutation\", (records) => {\n  records.forEach((record) => {\n    const el = record.target;\n    connectedComponents.forEach((component) => {\n      const inUnrelatedSubtree = !containsCrossShadowBoundary(el, component.el);\n      if (inUnrelatedSubtree) {\n        return;\n      }\n      const closestLangEl = closestElementCrossShadowBoundary(component.el, \"[lang]\");\n      if (!closestLangEl) {\n        component.effectiveLocale = defaultLocale;\n        return;\n      }\n      const closestLang = closestLangEl.lang;\n      component.effectiveLocale =\n        // user set lang=\"\" means unknown language, so we use default\n        closestLangEl.hasAttribute(\"lang\") && closestLang === \"\" ? defaultLocale : closestLang;\n    });\n  });\n});\n/**\n * This util helps resolve a component's locale.\n * It will also fall back on the deprecated `locale` if a component implemented this previously.\n *\n * @param component\n */\nfunction getLocale(component) {\n  return (component.el.lang ||\n    closestElementCrossShadowBoundary(component.el, \"[lang]\")?.lang ||\n    document.documentElement.lang ||\n    defaultLocale);\n}\n/**\n * This util formats and parses numbers for localization\n */\nclass NumberStringFormat {\n  constructor() {\n    this.delocalize = (numberString) => \n    // For performance, (de)localization is skipped if the formatter isn't initialized.\n    // In order to localize/delocalize, e.g. when lang/numberingSystem props are not default values,\n    // `numberFormatOptions` must be set in a component to create and cache the formatter.\n    this._numberFormatOptions\n      ? sanitizeExponentialNumberString(numberString, (nonExpoNumString) => nonExpoNumString\n        .trim()\n        .replace(new RegExp(`[${this._minusSign}]`, \"g\"), \"-\")\n        .replace(new RegExp(`[${this._group}]`, \"g\"), \"\")\n        .replace(new RegExp(`[${this._decimal}]`, \"g\"), \".\")\n        .replace(new RegExp(`[${this._digits.join(\"\")}]`, \"g\"), this._getDigitIndex))\n      : numberString;\n    this.localize = (numberString) => this._numberFormatOptions\n      ? sanitizeExponentialNumberString(numberString, (nonExpoNumString) => isValidNumber(nonExpoNumString.trim())\n        ? new BigDecimal(nonExpoNumString.trim())\n          .format(this)\n          .replace(new RegExp(`[${this._actualGroup}]`, \"g\"), this._group)\n        : nonExpoNumString)\n      : numberString;\n  }\n  get group() {\n    return this._group;\n  }\n  get decimal() {\n    return this._decimal;\n  }\n  get minusSign() {\n    return this._minusSign;\n  }\n  get digits() {\n    return this._digits;\n  }\n  get numberFormatter() {\n    return this._numberFormatter;\n  }\n  get numberFormatOptions() {\n    return this._numberFormatOptions;\n  }\n  /**\n   * numberFormatOptions needs to be set before localize/delocalize is called to ensure the options are up to date\n   */\n  set numberFormatOptions(options) {\n    options.locale = getSupportedLocale(options?.locale);\n    options.numberingSystem = getSupportedNumberingSystem(options?.numberingSystem);\n    if (\n    // No need to create the formatter if `locale` and `numberingSystem`\n    // are the default values and `numberFormatOptions` has not been set\n    (!this._numberFormatOptions &&\n      options.locale === defaultLocale &&\n      options.numberingSystem === defaultNumberingSystem &&\n      // don't skip initialization if any options besides locale/numberingSystem are set\n      Object.keys(options).length === 2) ||\n      // cache formatter by only recreating when options change\n      JSON.stringify(this._numberFormatOptions) === JSON.stringify(options)) {\n      return;\n    }\n    this._numberFormatOptions = options;\n    this._numberFormatter = new Intl.NumberFormat(this._numberFormatOptions.locale, this._numberFormatOptions);\n    this._digits = [\n      ...new Intl.NumberFormat(this._numberFormatOptions.locale, {\n        useGrouping: false,\n        numberingSystem: this._numberFormatOptions.numberingSystem\n      }).format(9876543210)\n    ].reverse();\n    const index = new Map(this._digits.map((d, i) => [d, i]));\n    const parts = new Intl.NumberFormat(this._numberFormatOptions.locale).formatToParts(-12345678.9);\n    this._actualGroup = parts.find((d) => d.type === \"group\").value;\n    // change whitespace group characters that don't render correctly\n    this._group = this._actualGroup.trim().length === 0 ? \" \" : this._actualGroup;\n    this._decimal = parts.find((d) => d.type === \"decimal\").value;\n    this._minusSign = parts.find((d) => d.type === \"minusSign\").value;\n    this._getDigitIndex = (d) => index.get(d);\n  }\n}\nconst numberStringFormatter = new NumberStringFormat();\n\nexport { defaultNumberingSystem as a, getSupportedNumberingSystem as b, connectLocalized as c, disconnectLocalized as d, getSupportedLocale as g, isValidNumber as i, numberStringFormatter as n, parseNumberString as p, sanitizeNumberString as s };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}