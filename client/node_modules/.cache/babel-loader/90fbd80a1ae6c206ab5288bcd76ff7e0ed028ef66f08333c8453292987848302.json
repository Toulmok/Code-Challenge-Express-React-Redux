{"ast":null,"code":"var _jsxFileName = \"C:\\\\code-challenge-react\\\\frontend\\\\src\\\\components\\\\main\\\\tabulator\\\\react-tabulator.tsx\",\n  _s = $RefreshSig$();\n//https://github.com/ngduc/react-tabulator/blob/master/src/ReactTabulator.tsx\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { pickHTMLProps } from 'pick-react-known-prop';\nimport { propsToOptions } from './ConfigUtils';\n//import { Tabulator as TabulatorTypes } from './types/TabulatorTypes';\n\nimport { Tabulator, FormatModule, EditModule } from 'tabulator-tables';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nTabulator.registerModule([FormatModule, EditModule]);\nconst ReactTabulator = props => {\n  _s();\n  const ref = React.useRef();\n  const instanceRef = React.useRef();\n  const [mainId, setMainId] = React.useState(`tabulator-${+new Date()}-${Math.floor(Math.random() * 9999999)}`);\n  let htmlProps;\n  htmlProps = pickHTMLProps(props); // pick valid html props\n  delete htmlProps['data']; // don't render data & columns as attributes\n  delete htmlProps['columns'];\n  const initTabulator = async () => {\n    var _props$layout;\n    const domEle = ReactDOM.findDOMNode(ref.current); // mounted DOM element\n    const {\n      columns,\n      data,\n      options\n    } = props;\n    const propOptions = await propsToOptions(props);\n    if (data) {\n      propOptions.data = data;\n    }\n    instanceRef.current = new Tabulator(domEle, {\n      columns,\n      ...propOptions,\n      layout: (_props$layout = props.layout) !== null && _props$layout !== void 0 ? _props$layout : 'fitColumns',\n      // fit columns to width of table (optional)\n      ...options // props.options are passed to Tabulator's options.\n    });\n\n    if (props.events) {\n      Object.keys(props.events).forEach(eventName => {\n        const handler = props.events[eventName];\n        instanceRef.current.on(eventName, handler);\n      });\n    }\n    props.onRef && props.onRef(instanceRef);\n  };\n  React.useEffect(() => {\n    // console.log('useEffect - onmount');\n    initTabulator();\n  }, []);\n  React.useEffect(() => {\n    // console.log('useEffect - props.data changed');\n    if (instanceRef && instanceRef.current) {\n      initTabulator(); // re-init table\n    }\n  }, [props.data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    \"data-instance\": mainId,\n    ...htmlProps,\n    className: props.className\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 10\n  }, this);\n};\n_s(ReactTabulator, \"mVfmtFYtDPefM2cJrDuEIJwSwDM=\");\n_c = ReactTabulator;\nexport default ReactTabulator;\nvar _c;\n$RefreshReg$(_c, \"ReactTabulator\");","map":{"version":3,"names":["React","ReactDOM","pickHTMLProps","propsToOptions","Tabulator","FormatModule","EditModule","jsxDEV","_jsxDEV","registerModule","ReactTabulator","props","_s","ref","useRef","instanceRef","mainId","setMainId","useState","Date","Math","floor","random","htmlProps","initTabulator","_props$layout","domEle","findDOMNode","current","columns","data","options","propOptions","layout","events","Object","keys","forEach","eventName","handler","on","onRef","useEffect","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/code-challenge-react/frontend/src/components/main/tabulator/react-tabulator.tsx"],"sourcesContent":["//https://github.com/ngduc/react-tabulator/blob/master/src/ReactTabulator.tsx\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { pickHTMLProps } from 'pick-react-known-prop';\r\nimport { propsToOptions } from './ConfigUtils';\r\n//import { Tabulator as TabulatorTypes } from './types/TabulatorTypes';\r\n\r\nimport { Tabulator, FormatModule, EditModule, ColumnDefinition } from 'tabulator-tables'\r\nTabulator.registerModule([FormatModule, EditModule])\r\n\r\nexport interface ReactTabulatorProps {\r\n  columns?: typeof ColumnDefinition[];\r\n  options?: any;\r\n  events?: any;\r\n  onRef?: (ref: any) => void\r\n  [k: string]: any;\r\n}\r\n\r\nconst ReactTabulator = (props: ReactTabulatorProps) => {\r\n  const ref = React.useRef();\r\n  const instanceRef = React.useRef();\r\n  const [mainId, setMainId] = React.useState(`tabulator-${+new Date()}-${Math.floor(Math.random() * 9999999)}`);\r\n\r\n  let htmlProps;\r\n  htmlProps = pickHTMLProps(props); // pick valid html props\r\n  delete htmlProps['data']; // don't render data & columns as attributes\r\n  delete htmlProps['columns'];\r\n\r\n  const initTabulator = async () => {\r\n    const domEle: any = ReactDOM.findDOMNode(ref.current); // mounted DOM element\r\n    const { columns, data, options } = props;\r\n    const propOptions = await propsToOptions(props);\r\n    if (data) {\r\n      propOptions.data = data;\r\n    }\r\n\r\n    instanceRef.current = new Tabulator(domEle, {\r\n      columns,\r\n      ...propOptions,\r\n      layout: props.layout ?? 'fitColumns', // fit columns to width of table (optional)\r\n      ...options // props.options are passed to Tabulator's options.\r\n    });\r\n    if (props.events) {\r\n      Object.keys(props.events).forEach((eventName: string) => {\r\n        const handler = props.events[eventName];\r\n        (instanceRef.current as any).on(eventName, handler);\r\n      });\r\n    }\r\n    props.onRef && props.onRef(instanceRef);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    // console.log('useEffect - onmount');\r\n    initTabulator();\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    // console.log('useEffect - props.data changed');\r\n    if (instanceRef && instanceRef.current) {\r\n      initTabulator(); // re-init table\r\n    }\r\n  }, [props.data]);\r\n\r\n  return <div ref={ref} data-instance={mainId} {...htmlProps} className={props.className} />;\r\n};\r\n\r\nexport default ReactTabulator;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}