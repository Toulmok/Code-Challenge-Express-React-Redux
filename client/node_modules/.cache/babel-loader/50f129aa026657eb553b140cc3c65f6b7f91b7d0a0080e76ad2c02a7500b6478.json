{"ast":null,"code":"import Portal from '@arcgis/core/portal/Portal';\nimport { LOAD_PORTAL, SET_IDENTITY, GET_USER_ITEMS, SET_USER_ITEMS } from '../constants/action-types';\nconst portal = new Portal({\n  authMode: 'immediate'\n});\nconst qParamArray = ['title', 'type', 'created', 'tag'];\n\n/**\r\n * Middleware function with the signature\r\n *\r\n * storeInstance =>\r\n * functionToCallWithAnActionThatWillSendItToTheNextMiddleware =>\r\n * actionThatDispatchWasCalledWith =>\r\n * valueToUseAsTheReturnValueOfTheDispatchCall\r\n *\r\n * Typically written as\r\n *\r\n * store => next => action => result\r\n */\nconst arcgisMiddleWare = store => next => action => {\n  switch (action.type) {\n    case LOAD_PORTAL:\n      portal.load().then(() => {\n        store.dispatch({\n          type: SET_IDENTITY,\n          username: portal.user.username,\n          fullname: portal.user.fullName,\n          email: portal.user.email,\n          thumbnailurl: portal.user.thumbnailUrl\n        });\n        //store.dispatch({ type: GET_USER_ITEMS })\n      });\n\n    case GET_USER_ITEMS:\n      next(action);\n\n      //Does this sanitize?\n      let myUrlGet = new URL(window.location.href);\n      let myUrlHas = new URLSearchParams(myUrlGet.search);\n      let qString = '';\n      for (const field of qParamArray) {\n        if (myUrlHas.has(field)) {\n          if (myUrlGet.searchParams.get(field) != '') {\n            qString += ' AND ' + field + ':' + myUrlGet.searchParams.get(field);\n            //console.log(qString)\n          }\n        }\n      }\n\n      if (portal.user != null) {\n        console.log(qString);\n        console.log(portal.user.username);\n        try {\n          return portal.queryItems({\n            query: `owner:${portal.user.username}` + qString,\n            sortField: 'modified',\n            sortOrder: 'desc',\n            num: 15\n          }).then(_ref => {\n            let {\n              results\n            } = _ref;\n            return store.dispatch({\n              type: SET_USER_ITEMS,\n              userItems: results\n            });\n          });\n        } catch {\n          return 0;\n        } finally {\n          return 0;\n        }\n      }\n    default:\n      return next(action);\n  }\n};\nexport default arcgisMiddleWare;","map":{"version":3,"names":["Portal","LOAD_PORTAL","SET_IDENTITY","GET_USER_ITEMS","SET_USER_ITEMS","portal","authMode","qParamArray","arcgisMiddleWare","store","next","action","type","load","then","dispatch","username","user","fullname","fullName","email","thumbnailurl","thumbnailUrl","myUrlGet","URL","window","location","href","myUrlHas","URLSearchParams","search","qString","field","has","searchParams","get","console","log","queryItems","query","sortField","sortOrder","num","_ref","results","userItems"],"sources":["C:/code-challenge-react/frontend/src/middleware/arcgis-portal.js"],"sourcesContent":["import Portal from '@arcgis/core/portal/Portal'\r\n\r\nimport {\r\n  LOAD_PORTAL,\r\n  SET_IDENTITY,\r\n  GET_USER_ITEMS,\r\n  SET_USER_ITEMS,\r\n} from '../constants/action-types'\r\n\r\nconst portal = new Portal({ authMode: 'immediate' })\r\nconst qParamArray = ['title','type','created','tag']\r\n\r\n/**\r\n * Middleware function with the signature\r\n *\r\n * storeInstance =>\r\n * functionToCallWithAnActionThatWillSendItToTheNextMiddleware =>\r\n * actionThatDispatchWasCalledWith =>\r\n * valueToUseAsTheReturnValueOfTheDispatchCall\r\n *\r\n * Typically written as\r\n *\r\n * store => next => action => result\r\n */\r\nconst arcgisMiddleWare = store => next => (action) => {\r\n  switch (action.type) {\r\n    case LOAD_PORTAL:\r\n      portal.load()\r\n      .then(() => {\r\n        store.dispatch({\r\n          type: SET_IDENTITY,\r\n          username: portal.user.username,\r\n          fullname: portal.user.fullName,\r\n          email: portal.user.email,\r\n          thumbnailurl: portal.user.thumbnailUrl,\r\n        })\r\n        //store.dispatch({ type: GET_USER_ITEMS })\r\n      })\r\n\r\n    case GET_USER_ITEMS:\r\n      next(action)\r\n\r\n      //Does this sanitize?\r\n      let myUrlGet = new URL(window.location.href)\r\n      let myUrlHas = new URLSearchParams(myUrlGet.search)\r\n      let qString = ''\r\n\r\n      for (const field of qParamArray) {\r\n        if(myUrlHas.has(field)) {\r\n          if((myUrlGet.searchParams.get(field) != '')){\r\n            qString += ' AND ' + field + ':' + myUrlGet.searchParams.get(field)\r\n            //console.log(qString)\r\n          }\r\n        }\r\n      }\r\n      \r\n      if (portal.user != null) {\r\n        console.log(qString)\r\n        console.log(portal.user.username)\r\n        try { \r\n          return portal.queryItems({\r\n            query: `owner:${portal.user.username}` + qString,\r\n            sortField: 'modified',\r\n            sortOrder: 'desc',\r\n            num: 15,\r\n          })\r\n          .then(({ results }) => store.dispatch({\r\n            type: SET_USER_ITEMS,\r\n            userItems: results,\r\n          }))\r\n        }\r\n        catch { return 0 }\r\n        finally { return 0 }\r\n      }\r\n\r\n    default:\r\n      return next(action)\r\n  }\r\n}\r\n\r\nexport default arcgisMiddleWare"],"mappings":"AAAA,OAAOA,MAAM,MAAM,4BAA4B;AAE/C,SACEC,WAAW,EACXC,YAAY,EACZC,cAAc,EACdC,cAAc,QACT,2BAA2B;AAElC,MAAMC,MAAM,GAAG,IAAIL,MAAM,CAAC;EAAEM,QAAQ,EAAE;AAAY,CAAC,CAAC;AACpD,MAAMC,WAAW,GAAG,CAAC,OAAO,EAAC,MAAM,EAAC,SAAS,EAAC,KAAK,CAAC;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAGC,KAAK,IAAIC,IAAI,IAAKC,MAAM,IAAK;EACpD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKX,WAAW;MACdI,MAAM,CAACQ,IAAI,EAAE,CACZC,IAAI,CAAC,MAAM;QACVL,KAAK,CAACM,QAAQ,CAAC;UACbH,IAAI,EAAEV,YAAY;UAClBc,QAAQ,EAAEX,MAAM,CAACY,IAAI,CAACD,QAAQ;UAC9BE,QAAQ,EAAEb,MAAM,CAACY,IAAI,CAACE,QAAQ;UAC9BC,KAAK,EAAEf,MAAM,CAACY,IAAI,CAACG,KAAK;UACxBC,YAAY,EAAEhB,MAAM,CAACY,IAAI,CAACK;QAC5B,CAAC,CAAC;QACF;MACF,CAAC,CAAC;;IAEJ,KAAKnB,cAAc;MACjBO,IAAI,CAACC,MAAM,CAAC;;MAEZ;MACA,IAAIY,QAAQ,GAAG,IAAIC,GAAG,CAACC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAC;MAC5C,IAAIC,QAAQ,GAAG,IAAIC,eAAe,CAACN,QAAQ,CAACO,MAAM,CAAC;MACnD,IAAIC,OAAO,GAAG,EAAE;MAEhB,KAAK,MAAMC,KAAK,IAAIzB,WAAW,EAAE;QAC/B,IAAGqB,QAAQ,CAACK,GAAG,CAACD,KAAK,CAAC,EAAE;UACtB,IAAIT,QAAQ,CAACW,YAAY,CAACC,GAAG,CAACH,KAAK,CAAC,IAAI,EAAE,EAAE;YAC1CD,OAAO,IAAI,OAAO,GAAGC,KAAK,GAAG,GAAG,GAAGT,QAAQ,CAACW,YAAY,CAACC,GAAG,CAACH,KAAK,CAAC;YACnE;UACF;QACF;MACF;;MAEA,IAAI3B,MAAM,CAACY,IAAI,IAAI,IAAI,EAAE;QACvBmB,OAAO,CAACC,GAAG,CAACN,OAAO,CAAC;QACpBK,OAAO,CAACC,GAAG,CAAChC,MAAM,CAACY,IAAI,CAACD,QAAQ,CAAC;QACjC,IAAI;UACF,OAAOX,MAAM,CAACiC,UAAU,CAAC;YACvBC,KAAK,EAAG,SAAQlC,MAAM,CAACY,IAAI,CAACD,QAAS,EAAC,GAAGe,OAAO;YAChDS,SAAS,EAAE,UAAU;YACrBC,SAAS,EAAE,MAAM;YACjBC,GAAG,EAAE;UACP,CAAC,CAAC,CACD5B,IAAI,CAAC6B,IAAA;YAAA,IAAC;cAAEC;YAAQ,CAAC,GAAAD,IAAA;YAAA,OAAKlC,KAAK,CAACM,QAAQ,CAAC;cACpCH,IAAI,EAAER,cAAc;cACpByC,SAAS,EAAED;YACb,CAAC,CAAC;UAAA,EAAC;QACL,CAAC,CACD,MAAM;UAAE,OAAO,CAAC;QAAC,CAAC,SACV;UAAE,OAAO,CAAC;QAAC;MACrB;IAEF;MACE,OAAOlC,IAAI,CAACC,MAAM,CAAC;EAAA;AAEzB,CAAC;AAED,eAAeH,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}