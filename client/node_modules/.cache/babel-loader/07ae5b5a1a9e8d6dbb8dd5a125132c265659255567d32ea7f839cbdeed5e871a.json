{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport { FoamColor as e } from \"./FoamRendering.glsl.js\";\nimport { Gamma as o } from \"./Gamma.glsl.js\";\nimport { PhysicallyBasedRenderingWater as r } from \"./PhysicallyBasedRendering.glsl.js\";\nimport { ScreenSpaceReflections as t } from \"./ScreenSpaceReflections.glsl.js\";\nimport { CloudsParallaxShading as i } from \"../util/CloudsParallaxShading.glsl.js\";\nimport { FloatPassUniform as a } from \"../../shaderModules/FloatPassUniform.js\";\nimport { glsl as l } from \"../../shaderModules/interfaces.js\";\nimport { Matrix4PassUniform as n } from \"../../shaderModules/Matrix4PassUniform.js\";\nimport { Texture2DPassUniform as d } from \"../../shaderModules/Texture2DPassUniform.js\";\nfunction c(c, s) {\n  c.include(r, s), c.include(o), c.include(e), s.hasCloudsReflections && c.include(i, s), s.hasScreenSpaceReflections && c.include(t, s);\n  const f = c.fragment;\n  f.constants.add(\"fresnelSky\", \"vec3\", [.02, 1, 15]).add(\"fresnelMaterial\", \"vec2\", [.02, .1]).add(\"roughness\", \"float\", .015).add(\"foamIntensityExternal\", \"float\", 1.7).add(\"ssrIntensity\", \"float\", .65).add(\"ssrHeightFadeStart\", \"float\", 3e5).add(\"ssrHeightFadeEnd\", \"float\", 5e5).add(\"waterDiffusion\", \"float\", .92).add(\"waterSeaColorMod\", \"float\", .8).add(\"correctionViewingPowerFactor\", \"float\", .4).add(\"skyZenitColor\", \"vec3\", [.52, .68, .9]).add(\"skyColor\", \"vec3\", [.67, .79, .9]).add(\"cloudFresnelModifier\", \"vec2\", [1.2, .01]), f.code.add(l`PBRShadingWater shadingInfo;\nvec3 getSkyGradientColor(in float cosTheta, in vec3 horizon, in vec3 zenit) {\nfloat exponent = pow((1.0 - cosTheta), fresnelSky[2]);\nreturn mix(zenit, horizon, exponent);\n}`), f.uniforms.add([new a(\"lightingSpecularStrength\", (e, o) => o.lighting.mainLight.specularStrength), new a(\"lightingEnvironmentStrength\", (e, o) => o.lighting.mainLight.environmentStrength)]), f.code.add(l`vec3 getSeaColor(in vec3 n, in vec3 v, in vec3 l, vec3 color, in vec3 lightIntensity, in vec3 localUp, in float shadow, float foamIntensity, vec3 viewPosition, vec3 position) {\nfloat reflectionHit = 0.0;\nfloat reflectionHitDiffused = 0.0;\nvec3 seaWaterColor = linearizeGamma(color);\nvec3 h = normalize(l + v);\nshadingInfo.NdotL = clamp(dot(n, l), 0.0, 1.0);\nshadingInfo.NdotV = clamp(dot(n, v), 0.001, 1.0);\nshadingInfo.VdotN = clamp(dot(v, n), 0.001, 1.0);\nshadingInfo.NdotH = clamp(dot(n, h), 0.0, 1.0);\nshadingInfo.VdotH = clamp(dot(v, h), 0.0, 1.0);\nshadingInfo.LdotH = clamp(dot(l, h), 0.0, 1.0);\nfloat upDotV = max(dot(localUp,v), 0.0);\nvec3 skyHorizon = linearizeGamma(skyColor);\nvec3 skyZenit = linearizeGamma(skyZenitColor);\nvec3 skyColor = getSkyGradientColor(upDotV, skyHorizon, skyZenit );\nfloat upDotL = max(dot(localUp,l),0.0);\nfloat daytimeMod = 0.1 + upDotL * 0.9;\nskyColor *= daytimeMod;\nfloat shadowModifier = clamp(shadow, 0.8, 1.0);\nvec3 fresnelModifier = fresnelReflection(shadingInfo.VdotN, vec3(fresnelSky[0]), fresnelSky[1]);\nvec3 reflSky = lightingEnvironmentStrength * fresnelModifier * skyColor * shadowModifier;\nvec3 reflSea = seaWaterColor * mix(skyColor, upDotL * lightIntensity * LIGHT_NORMALIZATION, 2.0 / 3.0) * shadowModifier;\nvec3 specular = vec3(0.0);\nif(upDotV > 0.0 && upDotL > 0.0) {\nvec3 specularSun = brdfSpecularWater(shadingInfo, roughness, vec3(fresnelMaterial[0]), fresnelMaterial[1]);\nvec3 incidentLight = lightIntensity * LIGHT_NORMALIZATION * shadow;\nspecular = lightingSpecularStrength * shadingInfo.NdotL * incidentLight * specularSun;\n}\nvec3 foam = vec3(0.0);\nif(upDotV > 0.0) {\nfoam = foamIntensity2FoamColor(foamIntensityExternal, foamIntensity, skyZenitColor, daytimeMod);\n}\nfloat correctionViewingFactor = pow(max(dot(v, localUp), 0.0), correctionViewingPowerFactor);\nvec3 normalCorrectedClouds = mix(localUp, n, correctionViewingFactor);\nvec3 reflectedWorld = normalize(reflect(-v, normalCorrectedClouds));`), s.hasCloudsReflections && f.code.add(l`vec4 cloudsColor = renderClouds(reflectedWorld, position);\ncloudsColor.a = 1.0 - cloudsColor.a;\ncloudsColor = pow(cloudsColor, vec4(GAMMA));\ncloudsColor *= clamp(fresnelModifier.y*cloudFresnelModifier[0] - cloudFresnelModifier[1], 0.0, 1.0) * clamp((1.0 - totalFadeInOut), 0.0, 1.0);`), s.hasScreenSpaceReflections ? (f.uniforms.add([new n(\"view\", (e, o) => o.ssr.camera.viewMatrix), new d(\"lastFrameColorTexture\", (e, o) => o.ssr.lastFrameColorTexture), new a(\"fadeFactor\", (e, o) => o.ssr.fadeFactor)]), f.code.add(l`vec3 viewDir = normalize(viewPosition);\nvec4 viewNormalVectorCoordinate = view *vec4(n, 0.0);\nvec3 viewNormal = normalize(viewNormalVectorCoordinate.xyz);\nvec4 viewUp = view * vec4(localUp, 0.0);\nvec3 viewNormalCorrectedSSR = mix(viewUp.xyz, viewNormal, correctionViewingFactor);\nvec3 reflected = normalize(reflect(viewDir, viewNormalCorrectedSSR));\nvec3 hitCoordinate = screenSpaceIntersection(reflected, viewPosition, viewDir, viewUp.xyz);\nvec3 reflectedColor = vec3(0.0);\nif (hitCoordinate.z > 0.0)\n{\nvec2 reprojectedCoordinate = reprojectionCoordinate(hitCoordinate);\nvec2 dCoords = smoothstep(0.3, 0.6, abs(vec2(0.5, 0.5) - hitCoordinate.xy));\nfloat heightMod = smoothstep(ssrHeightFadeEnd, ssrHeightFadeStart, -viewPosition.z);\nreflectionHit = clamp(1.0 - (1.3 * dCoords.y), 0.0, 1.0) * heightMod * fadeFactor;\nreflectionHitDiffused = waterDiffusion * reflectionHit;\nreflectedColor = linearizeGamma(texture2D(lastFrameColorTexture, reprojectedCoordinate).xyz) *\nreflectionHitDiffused * fresnelModifier.y * ssrIntensity;\n}\nfloat seaColorMod =  mix(waterSeaColorMod, waterSeaColorMod * 0.5, reflectionHitDiffused);\nvec3 waterRenderedColor = tonemapACES((1.0 - reflectionHitDiffused) * reflSky + reflectedColor +\nreflSea * seaColorMod + specular + foam);`)) : f.code.add(l`vec3 waterRenderedColor = tonemapACES(reflSky + reflSea * waterSeaColorMod + specular + foam);`), s.hasCloudsReflections ? s.hasScreenSpaceReflections ? f.code.add(l`return waterRenderedColor * (1.0 - (1.0 - reflectionHit) * cloudsColor.a) + (1.0 - reflectionHit) * cloudsColor.xyz;\n}`) : f.code.add(l`return waterRenderedColor * (1.0 - cloudsColor.a) + cloudsColor.xyz;\n}`) : f.code.add(l`return waterRenderedColor;\n}`);\n}\nexport { c as Water };","map":{"version":3,"names":["FoamColor","e","Gamma","o","PhysicallyBasedRenderingWater","r","ScreenSpaceReflections","t","CloudsParallaxShading","i","FloatPassUniform","a","glsl","l","Matrix4PassUniform","n","Texture2DPassUniform","d","c","s","include","hasCloudsReflections","hasScreenSpaceReflections","f","fragment","constants","add","code","uniforms","lighting","mainLight","specularStrength","environmentStrength","ssr","camera","viewMatrix","lastFrameColorTexture","fadeFactor","Water"],"sources":["C:/code-challenge-react/frontend/node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/shading/Water.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport{FoamColor as e}from\"./FoamRendering.glsl.js\";import{Gamma as o}from\"./Gamma.glsl.js\";import{PhysicallyBasedRenderingWater as r}from\"./PhysicallyBasedRendering.glsl.js\";import{ScreenSpaceReflections as t}from\"./ScreenSpaceReflections.glsl.js\";import{CloudsParallaxShading as i}from\"../util/CloudsParallaxShading.glsl.js\";import{FloatPassUniform as a}from\"../../shaderModules/FloatPassUniform.js\";import{glsl as l}from\"../../shaderModules/interfaces.js\";import{Matrix4PassUniform as n}from\"../../shaderModules/Matrix4PassUniform.js\";import{Texture2DPassUniform as d}from\"../../shaderModules/Texture2DPassUniform.js\";function c(c,s){c.include(r,s),c.include(o),c.include(e),s.hasCloudsReflections&&c.include(i,s),s.hasScreenSpaceReflections&&c.include(t,s);const f=c.fragment;f.constants.add(\"fresnelSky\",\"vec3\",[.02,1,15]).add(\"fresnelMaterial\",\"vec2\",[.02,.1]).add(\"roughness\",\"float\",.015).add(\"foamIntensityExternal\",\"float\",1.7).add(\"ssrIntensity\",\"float\",.65).add(\"ssrHeightFadeStart\",\"float\",3e5).add(\"ssrHeightFadeEnd\",\"float\",5e5).add(\"waterDiffusion\",\"float\",.92).add(\"waterSeaColorMod\",\"float\",.8).add(\"correctionViewingPowerFactor\",\"float\",.4).add(\"skyZenitColor\",\"vec3\",[.52,.68,.9]).add(\"skyColor\",\"vec3\",[.67,.79,.9]).add(\"cloudFresnelModifier\",\"vec2\",[1.2,.01]),f.code.add(l`PBRShadingWater shadingInfo;\nvec3 getSkyGradientColor(in float cosTheta, in vec3 horizon, in vec3 zenit) {\nfloat exponent = pow((1.0 - cosTheta), fresnelSky[2]);\nreturn mix(zenit, horizon, exponent);\n}`),f.uniforms.add([new a(\"lightingSpecularStrength\",((e,o)=>o.lighting.mainLight.specularStrength)),new a(\"lightingEnvironmentStrength\",((e,o)=>o.lighting.mainLight.environmentStrength))]),f.code.add(l`vec3 getSeaColor(in vec3 n, in vec3 v, in vec3 l, vec3 color, in vec3 lightIntensity, in vec3 localUp, in float shadow, float foamIntensity, vec3 viewPosition, vec3 position) {\nfloat reflectionHit = 0.0;\nfloat reflectionHitDiffused = 0.0;\nvec3 seaWaterColor = linearizeGamma(color);\nvec3 h = normalize(l + v);\nshadingInfo.NdotL = clamp(dot(n, l), 0.0, 1.0);\nshadingInfo.NdotV = clamp(dot(n, v), 0.001, 1.0);\nshadingInfo.VdotN = clamp(dot(v, n), 0.001, 1.0);\nshadingInfo.NdotH = clamp(dot(n, h), 0.0, 1.0);\nshadingInfo.VdotH = clamp(dot(v, h), 0.0, 1.0);\nshadingInfo.LdotH = clamp(dot(l, h), 0.0, 1.0);\nfloat upDotV = max(dot(localUp,v), 0.0);\nvec3 skyHorizon = linearizeGamma(skyColor);\nvec3 skyZenit = linearizeGamma(skyZenitColor);\nvec3 skyColor = getSkyGradientColor(upDotV, skyHorizon, skyZenit );\nfloat upDotL = max(dot(localUp,l),0.0);\nfloat daytimeMod = 0.1 + upDotL * 0.9;\nskyColor *= daytimeMod;\nfloat shadowModifier = clamp(shadow, 0.8, 1.0);\nvec3 fresnelModifier = fresnelReflection(shadingInfo.VdotN, vec3(fresnelSky[0]), fresnelSky[1]);\nvec3 reflSky = lightingEnvironmentStrength * fresnelModifier * skyColor * shadowModifier;\nvec3 reflSea = seaWaterColor * mix(skyColor, upDotL * lightIntensity * LIGHT_NORMALIZATION, 2.0 / 3.0) * shadowModifier;\nvec3 specular = vec3(0.0);\nif(upDotV > 0.0 && upDotL > 0.0) {\nvec3 specularSun = brdfSpecularWater(shadingInfo, roughness, vec3(fresnelMaterial[0]), fresnelMaterial[1]);\nvec3 incidentLight = lightIntensity * LIGHT_NORMALIZATION * shadow;\nspecular = lightingSpecularStrength * shadingInfo.NdotL * incidentLight * specularSun;\n}\nvec3 foam = vec3(0.0);\nif(upDotV > 0.0) {\nfoam = foamIntensity2FoamColor(foamIntensityExternal, foamIntensity, skyZenitColor, daytimeMod);\n}\nfloat correctionViewingFactor = pow(max(dot(v, localUp), 0.0), correctionViewingPowerFactor);\nvec3 normalCorrectedClouds = mix(localUp, n, correctionViewingFactor);\nvec3 reflectedWorld = normalize(reflect(-v, normalCorrectedClouds));`),s.hasCloudsReflections&&f.code.add(l`vec4 cloudsColor = renderClouds(reflectedWorld, position);\ncloudsColor.a = 1.0 - cloudsColor.a;\ncloudsColor = pow(cloudsColor, vec4(GAMMA));\ncloudsColor *= clamp(fresnelModifier.y*cloudFresnelModifier[0] - cloudFresnelModifier[1], 0.0, 1.0) * clamp((1.0 - totalFadeInOut), 0.0, 1.0);`),s.hasScreenSpaceReflections?(f.uniforms.add([new n(\"view\",((e,o)=>o.ssr.camera.viewMatrix)),new d(\"lastFrameColorTexture\",((e,o)=>o.ssr.lastFrameColorTexture)),new a(\"fadeFactor\",((e,o)=>o.ssr.fadeFactor))]),f.code.add(l`vec3 viewDir = normalize(viewPosition);\nvec4 viewNormalVectorCoordinate = view *vec4(n, 0.0);\nvec3 viewNormal = normalize(viewNormalVectorCoordinate.xyz);\nvec4 viewUp = view * vec4(localUp, 0.0);\nvec3 viewNormalCorrectedSSR = mix(viewUp.xyz, viewNormal, correctionViewingFactor);\nvec3 reflected = normalize(reflect(viewDir, viewNormalCorrectedSSR));\nvec3 hitCoordinate = screenSpaceIntersection(reflected, viewPosition, viewDir, viewUp.xyz);\nvec3 reflectedColor = vec3(0.0);\nif (hitCoordinate.z > 0.0)\n{\nvec2 reprojectedCoordinate = reprojectionCoordinate(hitCoordinate);\nvec2 dCoords = smoothstep(0.3, 0.6, abs(vec2(0.5, 0.5) - hitCoordinate.xy));\nfloat heightMod = smoothstep(ssrHeightFadeEnd, ssrHeightFadeStart, -viewPosition.z);\nreflectionHit = clamp(1.0 - (1.3 * dCoords.y), 0.0, 1.0) * heightMod * fadeFactor;\nreflectionHitDiffused = waterDiffusion * reflectionHit;\nreflectedColor = linearizeGamma(texture2D(lastFrameColorTexture, reprojectedCoordinate).xyz) *\nreflectionHitDiffused * fresnelModifier.y * ssrIntensity;\n}\nfloat seaColorMod =  mix(waterSeaColorMod, waterSeaColorMod * 0.5, reflectionHitDiffused);\nvec3 waterRenderedColor = tonemapACES((1.0 - reflectionHitDiffused) * reflSky + reflectedColor +\nreflSea * seaColorMod + specular + foam);`)):f.code.add(l`vec3 waterRenderedColor = tonemapACES(reflSky + reflSea * waterSeaColorMod + specular + foam);`),s.hasCloudsReflections?s.hasScreenSpaceReflections?f.code.add(l`return waterRenderedColor * (1.0 - (1.0 - reflectionHit) * cloudsColor.a) + (1.0 - reflectionHit) * cloudsColor.xyz;\n}`):f.code.add(l`return waterRenderedColor * (1.0 - cloudsColor.a) + cloudsColor.xyz;\n}`):f.code.add(l`return waterRenderedColor;\n}`)}export{c as Water};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAAOA,SAAS,IAAIC,CAAC,QAAK,yBAAyB;AAAC,SAAOC,KAAK,IAAIC,CAAC,QAAK,iBAAiB;AAAC,SAAOC,6BAA6B,IAAIC,CAAC,QAAK,oCAAoC;AAAC,SAAOC,sBAAsB,IAAIC,CAAC,QAAK,kCAAkC;AAAC,SAAOC,qBAAqB,IAAIC,CAAC,QAAK,uCAAuC;AAAC,SAAOC,gBAAgB,IAAIC,CAAC,QAAK,yCAAyC;AAAC,SAAOC,IAAI,IAAIC,CAAC,QAAK,mCAAmC;AAAC,SAAOC,kBAAkB,IAAIC,CAAC,QAAK,2CAA2C;AAAC,SAAOC,oBAAoB,IAAIC,CAAC,QAAK,6CAA6C;AAAC,SAASC,CAACA,CAACA,CAAC,EAACC,CAAC,EAAC;EAACD,CAAC,CAACE,OAAO,CAACf,CAAC,EAACc,CAAC,CAAC,EAACD,CAAC,CAACE,OAAO,CAACjB,CAAC,CAAC,EAACe,CAAC,CAACE,OAAO,CAACnB,CAAC,CAAC,EAACkB,CAAC,CAACE,oBAAoB,IAAEH,CAAC,CAACE,OAAO,CAACX,CAAC,EAACU,CAAC,CAAC,EAACA,CAAC,CAACG,yBAAyB,IAAEJ,CAAC,CAACE,OAAO,CAACb,CAAC,EAACY,CAAC,CAAC;EAAC,MAAMI,CAAC,GAACL,CAAC,CAACM,QAAQ;EAACD,CAAC,CAACE,SAAS,CAACC,GAAG,CAAC,YAAY,EAAC,MAAM,EAAC,CAAC,GAAG,EAAC,CAAC,EAAC,EAAE,CAAC,CAAC,CAACA,GAAG,CAAC,iBAAiB,EAAC,MAAM,EAAC,CAAC,GAAG,EAAC,EAAE,CAAC,CAAC,CAACA,GAAG,CAAC,WAAW,EAAC,OAAO,EAAC,IAAI,CAAC,CAACA,GAAG,CAAC,uBAAuB,EAAC,OAAO,EAAC,GAAG,CAAC,CAACA,GAAG,CAAC,cAAc,EAAC,OAAO,EAAC,GAAG,CAAC,CAACA,GAAG,CAAC,oBAAoB,EAAC,OAAO,EAAC,GAAG,CAAC,CAACA,GAAG,CAAC,kBAAkB,EAAC,OAAO,EAAC,GAAG,CAAC,CAACA,GAAG,CAAC,gBAAgB,EAAC,OAAO,EAAC,GAAG,CAAC,CAACA,GAAG,CAAC,kBAAkB,EAAC,OAAO,EAAC,EAAE,CAAC,CAACA,GAAG,CAAC,8BAA8B,EAAC,OAAO,EAAC,EAAE,CAAC,CAACA,GAAG,CAAC,eAAe,EAAC,MAAM,EAAC,CAAC,GAAG,EAAC,GAAG,EAAC,EAAE,CAAC,CAAC,CAACA,GAAG,CAAC,UAAU,EAAC,MAAM,EAAC,CAAC,GAAG,EAAC,GAAG,EAAC,EAAE,CAAC,CAAC,CAACA,GAAG,CAAC,sBAAsB,EAAC,MAAM,EAAC,CAAC,GAAG,EAAC,GAAG,CAAC,CAAC,EAACH,CAAC,CAACI,IAAI,CAACD,GAAG,CAACb,CAAE;AAC/wC;AACA;AACA;AACA,EAAE,CAAC,EAACU,CAAC,CAACK,QAAQ,CAACF,GAAG,CAAC,CAAC,IAAIf,CAAC,CAAC,0BAA0B,EAAE,CAACV,CAAC,EAACE,CAAC,KAAGA,CAAC,CAAC0B,QAAQ,CAACC,SAAS,CAACC,gBAAgB,CAAE,EAAC,IAAIpB,CAAC,CAAC,6BAA6B,EAAE,CAACV,CAAC,EAACE,CAAC,KAAGA,CAAC,CAAC0B,QAAQ,CAACC,SAAS,CAACE,mBAAmB,CAAE,CAAC,CAAC,EAACT,CAAC,CAACI,IAAI,CAACD,GAAG,CAACb,CAAE;AAC3M;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,CAAC,EAACM,CAAC,CAACE,oBAAoB,IAAEE,CAAC,CAACI,IAAI,CAACD,GAAG,CAACb,CAAE;AAC5G;AACA;AACA,+IAA+I,CAAC,EAACM,CAAC,CAACG,yBAAyB,IAAEC,CAAC,CAACK,QAAQ,CAACF,GAAG,CAAC,CAAC,IAAIX,CAAC,CAAC,MAAM,EAAE,CAACd,CAAC,EAACE,CAAC,KAAGA,CAAC,CAAC8B,GAAG,CAACC,MAAM,CAACC,UAAU,CAAE,EAAC,IAAIlB,CAAC,CAAC,uBAAuB,EAAE,CAAChB,CAAC,EAACE,CAAC,KAAGA,CAAC,CAAC8B,GAAG,CAACG,qBAAqB,CAAE,EAAC,IAAIzB,CAAC,CAAC,YAAY,EAAE,CAACV,CAAC,EAACE,CAAC,KAAGA,CAAC,CAAC8B,GAAG,CAACI,UAAU,CAAE,CAAC,CAAC,EAACd,CAAC,CAACI,IAAI,CAACD,GAAG,CAACb,CAAE;AAC9W;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,CAAC,IAAEU,CAAC,CAACI,IAAI,CAACD,GAAG,CAACb,CAAE,gGAA+F,CAAC,EAACM,CAAC,CAACE,oBAAoB,GAACF,CAAC,CAACG,yBAAyB,GAACC,CAAC,CAACI,IAAI,CAACD,GAAG,CAACb,CAAE;AAC3N,EAAE,CAAC,GAACU,CAAC,CAACI,IAAI,CAACD,GAAG,CAACb,CAAE;AACjB,EAAE,CAAC,GAACU,CAAC,CAACI,IAAI,CAACD,GAAG,CAACb,CAAE;AACjB,EAAE,CAAC;AAAA;AAAC,SAAOK,CAAC,IAAIoB,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}