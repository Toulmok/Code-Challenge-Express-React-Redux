{"ast":null,"code":"import _taggedTemplateLiteral from \"C:/code-challenge-react/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";\nvar _templateObject;\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport { glsl as o } from \"../../shaderModules/interfaces.js\";\nfunction a(a) {\n  a.code.add(o(_templateObject || (_templateObject = _taggedTemplateLiteral([\"const float MAX_RGBA_FLOAT =\\n255.0 / 256.0 +\\n255.0 / 256.0 / 256.0 +\\n255.0 / 256.0 / 256.0 / 256.0 +\\n255.0 / 256.0 / 256.0 / 256.0 / 256.0;\\nconst vec4 FIXED_POINT_FACTORS = vec4(1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0);\\nvec4 float2rgba(const float value) {\\nfloat valueInValidDomain = clamp(value, 0.0, MAX_RGBA_FLOAT);\\nvec4 fixedPointU8 = floor(fract(valueInValidDomain * FIXED_POINT_FACTORS) * 256.0);\\nconst float toU8AsFloat = 1.0 / 255.0;\\nreturn fixedPointU8 * toU8AsFloat;\\n}\\nconst vec4 RGBA_2_FLOAT_FACTORS = vec4(\\n255.0 / (256.0),\\n255.0 / (256.0 * 256.0),\\n255.0 / (256.0 * 256.0 * 256.0),\\n255.0 / (256.0 * 256.0 * 256.0 * 256.0)\\n);\\nfloat rgba2float(vec4 rgba) {\\nreturn dot(rgba, RGBA_2_FLOAT_FACTORS);\\n}\"]))));\n}\nexport { a as RgbaFloatEncoding };","map":{"version":3,"names":["glsl","o","a","code","add","_templateObject","_taggedTemplateLiteral","RgbaFloatEncoding"],"sources":["C:/code-challenge-react/frontend/node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/util/RgbaFloatEncoding.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport{glsl as o}from\"../../shaderModules/interfaces.js\";function a(a){a.code.add(o`const float MAX_RGBA_FLOAT =\n255.0 / 256.0 +\n255.0 / 256.0 / 256.0 +\n255.0 / 256.0 / 256.0 / 256.0 +\n255.0 / 256.0 / 256.0 / 256.0 / 256.0;\nconst vec4 FIXED_POINT_FACTORS = vec4(1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0);\nvec4 float2rgba(const float value) {\nfloat valueInValidDomain = clamp(value, 0.0, MAX_RGBA_FLOAT);\nvec4 fixedPointU8 = floor(fract(valueInValidDomain * FIXED_POINT_FACTORS) * 256.0);\nconst float toU8AsFloat = 1.0 / 255.0;\nreturn fixedPointU8 * toU8AsFloat;\n}\nconst vec4 RGBA_2_FLOAT_FACTORS = vec4(\n255.0 / (256.0),\n255.0 / (256.0 * 256.0),\n255.0 / (256.0 * 256.0 * 256.0),\n255.0 / (256.0 * 256.0 * 256.0 * 256.0)\n);\nfloat rgba2float(vec4 rgba) {\nreturn dot(rgba, RGBA_2_FLOAT_FACTORS);\n}`)}export{a as RgbaFloatEncoding};\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA,SAAOA,IAAI,IAAIC,CAAC,QAAK,mCAAmC;AAAC,SAASC,CAACA,CAACA,CAAC,EAAC;EAACA,CAAC,CAACC,IAAI,CAACC,GAAG,CAACH,CAAC,CAAAI,eAAA,KAAAA,eAAA,GAAAC,sBAAA,0uBAoBhF;AAAA;AAAC,SAAOJ,CAAC,IAAIK,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}