{"ast":null,"code":"var _jsxFileName = \"C:\\\\code-challenge-react\\\\frontend\\\\src\\\\components\\\\Auth.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n//import { onMounted, computed } from 'vue';\n//import { storeToRefs } from 'pinia'\n//import { initialize } from '../stores/authStores'\n//const useAuthStores = authStores()\n//const { userId, status } = storeToRefs(authStores())\n\nexport function Auth() {\n  initialize();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n/*\r\n// Lifecycle\r\nonMounted( async () => {\r\n    initialize()\r\n    await useAuthStores.checkCurrentStatus()\r\n})\r\n\r\n// Computed \r\nconst label = computed(() => useAuthStores.status ? 'Sign Out' : 'Sign In')\r\n\r\n// Public Methods\r\nasync function signInOut() {\r\n    if (!useAuthStores.status) { \r\n        await useAuthStores.signIn()\r\n        console.log(\"signing in\")\r\n    } else if (useAuthStores.status) { \r\n        await useAuthStores.signOut()\r\n        console.log(\"signing out\")        \r\n    }\r\n    try {await useAuthStores.updateUserId}\r\n    catch (error) { console.log(error) }\r\n}\r\n*/\n_c = Auth;\nvar _c;\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"names":["Auth","initialize","_jsxDEV","_Fragment","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/code-challenge-react/frontend/src/components/Auth.tsx"],"sourcesContent":["//import { onMounted, computed } from 'vue';\r\n//import { storeToRefs } from 'pinia'\r\n//import { initialize } from '../stores/authStores'\r\n//const useAuthStores = authStores()\r\n//const { userId, status } = storeToRefs(authStores())\r\n\r\nexport function Auth() {\r\n    initialize()\r\n\r\n    return (\r\n        <>\r\n            <span></span>\r\n            <button><span></span></button>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n/*\r\n// Lifecycle\r\nonMounted( async () => {\r\n    initialize()\r\n    await useAuthStores.checkCurrentStatus()\r\n})\r\n\r\n// Computed \r\nconst label = computed(() => useAuthStores.status ? 'Sign Out' : 'Sign In')\r\n\r\n// Public Methods\r\nasync function signInOut() {\r\n    if (!useAuthStores.status) { \r\n        await useAuthStores.signIn()\r\n        console.log(\"signing in\")\r\n    } else if (useAuthStores.status) { \r\n        await useAuthStores.signOut()\r\n        console.log(\"signing out\")        \r\n    }\r\n    try {await useAuthStores.updateUserId}\r\n    catch (error) { console.log(error) }\r\n}\r\n*/"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASA,IAAIA,CAAA,EAAG;EACnBC,UAAU,EAAE;EAEZ,oBACIC,OAAA,CAAAC,SAAA;IAAAC,QAAA,gBACIF,OAAA;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAa,eACbN,OAAA;MAAAE,QAAA,eAAQF,OAAA;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAa;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS;EAAA,gBAC/B;AAEX;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBAC,EAAA,GAbgBT,IAAI;AAAA,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}