{"ast":null,"code":"import _toConsumableArray from \"C:/code-challenge-react/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/*\n Stencil Client Platform v2.20.0 | MIT Licensed | https://stenciljs.com\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nvar safeSelector = function safeSelector(selector) {\n  var placeholders = [];\n  var index = 0;\n  // Replaces attribute selectors with placeholders.\n  // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n  selector = selector.replace(/(\\[[^\\]]*\\])/g, function (_, keep) {\n    var replaceBy = \"__ph-\".concat(index, \"__\");\n    placeholders.push(keep);\n    index++;\n    return replaceBy;\n  });\n  // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n  // WS and \"+\" would otherwise be interpreted as selector separators.\n  var content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, function (_, pseudo, exp) {\n    var replaceBy = \"__ph-\".concat(index, \"__\");\n    placeholders.push(exp);\n    index++;\n    return pseudo + replaceBy;\n  });\n  var ss = {\n    content: content,\n    placeholders: placeholders\n  };\n  return ss;\n};\nvar restoreSafeSelector = function restoreSafeSelector(placeholders, content) {\n  return content.replace(/__ph-(\\d+)__/g, function (_, index) {\n    return placeholders[+index];\n  });\n};\nvar _polyfillHost = '-shadowcsshost';\nvar _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nvar _polyfillHostContext = '-shadowcsscontext';\nvar _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\nvar _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nvar _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nvar _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nvar _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nvar _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nvar _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nvar _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nvar _polyfillHostRe = /-shadowcsshost/gim;\nvar _colonHostRe = /:host/gim;\nvar _colonSlottedRe = /::slotted/gim;\nvar _colonHostContextRe = /:host-context/gim;\nvar _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nvar stripComments = function stripComments(input) {\n  return input.replace(_commentRe, '');\n};\nvar _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nvar extractCommentsWithHash = function extractCommentsWithHash(input) {\n  return input.match(_commentWithHashRe) || [];\n};\nvar _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nvar _curlyRe = /([{}])/g;\nvar _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\nvar OPEN_CURLY = '{';\nvar CLOSE_CURLY = '}';\nvar BLOCK_PLACEHOLDER = '%BLOCK%';\nvar processRules = function processRules(input, ruleCallback) {\n  var inputWithEscapedBlocks = escapeBlocks(input);\n  var nextBlockIndex = 0;\n  return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {\n    var selector = arguments.length <= 2 ? undefined : arguments[2];\n    var content = '';\n    var suffix = arguments.length <= 4 ? undefined : arguments[4];\n    var contentPrefix = '';\n    if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n      content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n      suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n      contentPrefix = '{';\n    }\n    var cssRule = {\n      selector: selector,\n      content: content\n    };\n    var rule = ruleCallback(cssRule);\n    return \"\".concat(arguments.length <= 1 ? undefined : arguments[1]).concat(rule.selector).concat(arguments.length <= 3 ? undefined : arguments[3]).concat(contentPrefix).concat(rule.content).concat(suffix);\n  });\n};\nvar escapeBlocks = function escapeBlocks(input) {\n  var inputParts = input.split(_curlyRe);\n  var resultParts = [];\n  var escapedBlocks = [];\n  var bracketCount = 0;\n  var currentBlockParts = [];\n  for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {\n    var part = inputParts[partIndex];\n    if (part === CLOSE_CURLY) {\n      bracketCount--;\n    }\n    if (bracketCount > 0) {\n      currentBlockParts.push(part);\n    } else {\n      if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n        currentBlockParts = [];\n      }\n      resultParts.push(part);\n    }\n    if (part === OPEN_CURLY) {\n      bracketCount++;\n    }\n  }\n  if (currentBlockParts.length > 0) {\n    escapedBlocks.push(currentBlockParts.join(''));\n    resultParts.push(BLOCK_PLACEHOLDER);\n  }\n  var strEscapedBlocks = {\n    escapedString: resultParts.join(''),\n    blocks: escapedBlocks\n  };\n  return strEscapedBlocks;\n};\nvar insertPolyfillHostInCssText = function insertPolyfillHostInCssText(selector) {\n  selector = selector.replace(_colonHostContextRe, _polyfillHostContext).replace(_colonHostRe, _polyfillHost).replace(_colonSlottedRe, _polyfillSlotted);\n  return selector;\n};\nvar convertColonRule = function convertColonRule(cssText, regExp, partReplacer) {\n  // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n  return cssText.replace(regExp, function () {\n    for (var _len = arguments.length, m = new Array(_len), _key = 0; _key < _len; _key++) {\n      m[_key] = arguments[_key];\n    }\n    if (m[2]) {\n      var parts = m[2].split(',');\n      var r = [];\n      for (var i = 0; i < parts.length; i++) {\n        var p = parts[i].trim();\n        if (!p) break;\n        r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n      }\n      return r.join(',');\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n};\nvar colonHostPartReplacer = function colonHostPartReplacer(host, part, suffix) {\n  return host + part.replace(_polyfillHost, '') + suffix;\n};\nvar convertColonHost = function convertColonHost(cssText) {\n  return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nvar colonHostContextPartReplacer = function colonHostContextPartReplacer(host, part, suffix) {\n  if (part.indexOf(_polyfillHost) > -1) {\n    return colonHostPartReplacer(host, part, suffix);\n  } else {\n    return host + part + suffix + ', ' + part + ' ' + host + suffix;\n  }\n};\nvar convertColonSlotted = function convertColonSlotted(cssText, slotScopeId) {\n  var slotClass = '.' + slotScopeId + ' > ';\n  var selectors = [];\n  cssText = cssText.replace(_cssColonSlottedRe, function () {\n    for (var _len2 = arguments.length, m = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      m[_key2] = arguments[_key2];\n    }\n    if (m[2]) {\n      var compound = m[2].trim();\n      var suffix = m[3];\n      var slottedSelector = slotClass + compound + suffix;\n      var prefixSelector = '';\n      for (var i = m[4] - 1; i >= 0; i--) {\n        var char = m[5][i];\n        if (char === '}' || char === ',') {\n          break;\n        }\n        prefixSelector = char + prefixSelector;\n      }\n      var orgSelector = prefixSelector + slottedSelector;\n      var addedSelector = \"\".concat(prefixSelector.trimRight()).concat(slottedSelector.trim());\n      if (orgSelector.trim() !== addedSelector.trim()) {\n        var updatedSelector = \"\".concat(addedSelector, \", \").concat(orgSelector);\n        selectors.push({\n          orgSelector: orgSelector,\n          updatedSelector: updatedSelector\n        });\n      }\n      return slottedSelector;\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n  return {\n    selectors: selectors,\n    cssText: cssText\n  };\n};\nvar convertColonHostContext = function convertColonHostContext(cssText) {\n  return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nvar convertShadowDOMSelectors = function convertShadowDOMSelectors(cssText) {\n  return _shadowDOMSelectorsRe.reduce(function (result, pattern) {\n    return result.replace(pattern, ' ');\n  }, cssText);\n};\nvar makeScopeMatcher = function makeScopeMatcher(scopeSelector) {\n  var lre = /\\[/g;\n  var rre = /\\]/g;\n  scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n  return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nvar selectorNeedsScoping = function selectorNeedsScoping(selector, scopeSelector) {\n  var re = makeScopeMatcher(scopeSelector);\n  return !re.test(selector);\n};\nvar injectScopingSelector = function injectScopingSelector(selector, scopingSelector) {\n  return selector.replace(_selectorPartsRe, function (_) {\n    var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var _colonGroup = arguments.length > 2 ? arguments[2] : undefined;\n    var colon = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n    var after = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n    return before + scopingSelector + colon + after;\n  });\n};\nvar applySimpleSelectorScope = function applySimpleSelectorScope(selector, scopeSelector, hostSelector) {\n  // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n  _polyfillHostRe.lastIndex = 0;\n  if (_polyfillHostRe.test(selector)) {\n    var replaceBy = \".\".concat(hostSelector);\n    return selector.replace(_polyfillHostNoCombinatorRe, function (_, selector) {\n      return injectScopingSelector(selector, replaceBy);\n    }).replace(_polyfillHostRe, replaceBy + ' ');\n  }\n  return scopeSelector + ' ' + selector;\n};\nvar applyStrictSelectorScope = function applyStrictSelectorScope(selector, scopeSelector, hostSelector) {\n  var isRe = /\\[is=([^\\]]*)\\]/g;\n  scopeSelector = scopeSelector.replace(isRe, function (_) {\n    return arguments.length <= 1 ? undefined : arguments[1];\n  });\n  var className = '.' + scopeSelector;\n  var _scopeSelectorPart = function _scopeSelectorPart(p) {\n    var scopedP = p.trim();\n    if (!scopedP) {\n      return '';\n    }\n    if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n      scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n    } else {\n      // remove :host since it should be unnecessary\n      var t = p.replace(_polyfillHostRe, '');\n      if (t.length > 0) {\n        scopedP = injectScopingSelector(t, className);\n      }\n    }\n    return scopedP;\n  };\n  var safeContent = safeSelector(selector);\n  selector = safeContent.content;\n  var scopedSelector = '';\n  var startIndex = 0;\n  var res;\n  var sep = /( |>|\\+|~(?!=))\\s*/g;\n  // If a selector appears before :host it should not be shimmed as it\n  // matches on ancestor elements and not on elements in the host's shadow\n  // `:host-context(div)` is transformed to\n  // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n  // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n  // Historically `component-tag:host` was matching the component so we also want to preserve\n  // this behavior to avoid breaking legacy apps (it should not match).\n  // The behavior should be:\n  // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n  // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n  //   `:host-context(tag)`)\n  var hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n  // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n  var shouldScope = !hasHost;\n  while ((res = sep.exec(selector)) !== null) {\n    var separator = res[1];\n    var _part = selector.slice(startIndex, res.index).trim();\n    shouldScope = shouldScope || _part.indexOf(_polyfillHostNoCombinator) > -1;\n    var scopedPart = shouldScope ? _scopeSelectorPart(_part) : _part;\n    scopedSelector += \"\".concat(scopedPart, \" \").concat(separator, \" \");\n    startIndex = sep.lastIndex;\n  }\n  var part = selector.substring(startIndex);\n  shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n  scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n  // replace the placeholders with their original values\n  return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nvar scopeSelector = function scopeSelector(selector, scopeSelectorText, hostSelector, slotSelector) {\n  return selector.split(',').map(function (shallowPart) {\n    if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n      return shallowPart.trim();\n    }\n    if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n      return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n    } else {\n      return shallowPart.trim();\n    }\n  }).join(', ');\n};\nvar scopeSelectors = function scopeSelectors(cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) {\n  return processRules(cssText, function (rule) {\n    var selector = rule.selector;\n    var content = rule.content;\n    if (rule.selector[0] !== '@') {\n      selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n    } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n      content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n    }\n    var cssRule = {\n      selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n      content: content\n    };\n    return cssRule;\n  });\n};\nvar scopeCssText = function scopeCssText(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) {\n  cssText = insertPolyfillHostInCssText(cssText);\n  cssText = convertColonHost(cssText);\n  cssText = convertColonHostContext(cssText);\n  var slotted = convertColonSlotted(cssText, slotScopeId);\n  cssText = slotted.cssText;\n  cssText = convertShadowDOMSelectors(cssText);\n  if (scopeId) {\n    cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n  }\n  cssText = cssText.replace(/-shadowcsshost-no-combinator/g, \".\".concat(hostScopeId));\n  cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n  return {\n    cssText: cssText.trim(),\n    slottedSelectors: slotted.selectors\n  };\n};\nvar scopeCss = function scopeCss(cssText, scopeId, commentOriginalSelector) {\n  var hostScopeId = scopeId + '-h';\n  var slotScopeId = scopeId + '-s';\n  var commentsWithHash = extractCommentsWithHash(cssText);\n  cssText = stripComments(cssText);\n  var orgSelectors = [];\n  if (commentOriginalSelector) {\n    var processCommentedSelector = function processCommentedSelector(rule) {\n      var placeholder = \"/*!@___\".concat(orgSelectors.length, \"___*/\");\n      var comment = \"/*!@\".concat(rule.selector, \"*/\");\n      orgSelectors.push({\n        placeholder: placeholder,\n        comment: comment\n      });\n      rule.selector = placeholder + rule.selector;\n      return rule;\n    };\n    cssText = processRules(cssText, function (rule) {\n      if (rule.selector[0] !== '@') {\n        return processCommentedSelector(rule);\n      } else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') || rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n        rule.content = processRules(rule.content, processCommentedSelector);\n        return rule;\n      }\n      return rule;\n    });\n  }\n  var scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n  cssText = [scoped.cssText].concat(_toConsumableArray(commentsWithHash)).join('\\n');\n  if (commentOriginalSelector) {\n    orgSelectors.forEach(function (_ref) {\n      var placeholder = _ref.placeholder,\n        comment = _ref.comment;\n      cssText = cssText.replace(placeholder, comment);\n    });\n  }\n  scoped.slottedSelectors.forEach(function (slottedSelector) {\n    cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\n  });\n  return cssText;\n};\nexport { scopeCss };","map":{"version":3,"names":["safeSelector","selector","placeholders","index","replace","_","keep","replaceBy","concat","push","content","pseudo","exp","ss","restoreSafeSelector","_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_selectorReSuffix","_polyfillHostRe","_colonHostRe","_colonSlottedRe","_colonHostContextRe","_commentRe","stripComments","input","_commentWithHashRe","extractCommentsWithHash","match","_ruleRe","_curlyRe","_selectorPartsRe","OPEN_CURLY","CLOSE_CURLY","BLOCK_PLACEHOLDER","processRules","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","arguments","length","undefined","suffix","contentPrefix","startsWith","blocks","substring","cssRule","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","join","strEscapedBlocks","insertPolyfillHostInCssText","convertColonRule","cssText","regExp","partReplacer","_len","m","Array","_key","parts","r","i","p","trim","colonHostPartReplacer","host","convertColonHost","colonHostContextPartReplacer","indexOf","convertColonSlotted","slotScopeId","slotClass","selectors","_len2","_key2","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimRight","updatedSelector","convertColonHostContext","convertShadowDOMSelectors","reduce","result","pattern","makeScopeMatcher","scopeSelector","lre","rre","selectorNeedsScoping","re","test","injectScopingSelector","scopingSelector","before","_colonGroup","colon","after","applySimpleSelectorScope","hostSelector","lastIndex","applyStrictSelectorScope","isRe","className","_scopeSelectorPart","scopedP","t","safeContent","scopedSelector","startIndex","res","sep","hasHost","shouldScope","exec","separator","slice","scopedPart","scopeSelectorText","slotSelector","map","shallowPart","scopeSelectors","commentOriginalSelector","scopeCssText","scopeId","hostScopeId","slotted","slottedSelectors","scopeCss","commentsWithHash","orgSelectors","processCommentedSelector","placeholder","comment","scoped","_toConsumableArray","forEach","_ref"],"sources":["C:/code-challenge-react/frontend/node_modules/@arcgis/core/node_modules/@stencil/core/internal/client/shadow-css.js"],"sourcesContent":["/*\n Stencil Client Platform v2.20.0 | MIT Licensed | https://stenciljs.com\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nconst safeSelector = (selector) => {\n    const placeholders = [];\n    let index = 0;\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(keep);\n        index++;\n        return replaceBy;\n    });\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    const content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(exp);\n        index++;\n        return pseudo + replaceBy;\n    });\n    const ss = {\n        content,\n        placeholders,\n    };\n    return ss;\n};\nconst restoreSafeSelector = (placeholders, content) => {\n    return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nconst _polyfillHost = '-shadowcsshost';\nconst _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = '-shadowcsscontext';\nconst _parenSuffix = ')(?:\\\\((' + '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' + ')\\\\))?([^,{]*)';\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nconst _selectorReSuffix = '([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\nconst _colonHostRe = /:host/gim;\nconst _colonSlottedRe = /::slotted/gim;\nconst _colonHostContextRe = /:host-context/gim;\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nconst stripComments = (input) => {\n    return input.replace(_commentRe, '');\n};\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nconst extractCommentsWithHash = (input) => {\n    return input.match(_commentWithHashRe) || [];\n};\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _curlyRe = /([{}])/g;\nconst _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\nconst OPEN_CURLY = '{';\nconst CLOSE_CURLY = '}';\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nconst processRules = (input, ruleCallback) => {\n    const inputWithEscapedBlocks = escapeBlocks(input);\n    let nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n        const selector = m[2];\n        let content = '';\n        let suffix = m[4];\n        let contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        const cssRule = {\n            selector,\n            content,\n        };\n        const rule = ruleCallback(cssRule);\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n    });\n};\nconst escapeBlocks = (input) => {\n    const inputParts = input.split(_curlyRe);\n    const resultParts = [];\n    const escapedBlocks = [];\n    let bracketCount = 0;\n    let currentBlockParts = [];\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        const part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    const strEscapedBlocks = {\n        escapedString: resultParts.join(''),\n        blocks: escapedBlocks,\n    };\n    return strEscapedBlocks;\n};\nconst insertPolyfillHostInCssText = (selector) => {\n    selector = selector\n        .replace(_colonHostContextRe, _polyfillHostContext)\n        .replace(_colonHostRe, _polyfillHost)\n        .replace(_colonSlottedRe, _polyfillSlotted);\n    return selector;\n};\nconst convertColonRule = (cssText, regExp, partReplacer) => {\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, (...m) => {\n        if (m[2]) {\n            const parts = m[2].split(',');\n            const r = [];\n            for (let i = 0; i < parts.length; i++) {\n                const p = parts[i].trim();\n                if (!p)\n                    break;\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n            }\n            return r.join(',');\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nconst colonHostPartReplacer = (host, part, suffix) => {\n    return host + part.replace(_polyfillHost, '') + suffix;\n};\nconst convertColonHost = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nconst colonHostContextPartReplacer = (host, part, suffix) => {\n    if (part.indexOf(_polyfillHost) > -1) {\n        return colonHostPartReplacer(host, part, suffix);\n    }\n    else {\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\n    }\n};\nconst convertColonSlotted = (cssText, slotScopeId) => {\n    const slotClass = '.' + slotScopeId + ' > ';\n    const selectors = [];\n    cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n        if (m[2]) {\n            const compound = m[2].trim();\n            const suffix = m[3];\n            const slottedSelector = slotClass + compound + suffix;\n            let prefixSelector = '';\n            for (let i = m[4] - 1; i >= 0; i--) {\n                const char = m[5][i];\n                if (char === '}' || char === ',') {\n                    break;\n                }\n                prefixSelector = char + prefixSelector;\n            }\n            const orgSelector = prefixSelector + slottedSelector;\n            const addedSelector = `${prefixSelector.trimRight()}${slottedSelector.trim()}`;\n            if (orgSelector.trim() !== addedSelector.trim()) {\n                const updatedSelector = `${addedSelector}, ${orgSelector}`;\n                selectors.push({\n                    orgSelector,\n                    updatedSelector,\n                });\n            }\n            return slottedSelector;\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n    return {\n        selectors,\n        cssText,\n    };\n};\nconst convertColonHostContext = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nconst convertShadowDOMSelectors = (cssText) => {\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n};\nconst makeScopeMatcher = (scopeSelector) => {\n    const lre = /\\[/g;\n    const rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nconst selectorNeedsScoping = (selector, scopeSelector) => {\n    const re = makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n};\nconst injectScopingSelector = (selector, scopingSelector) => {\n    return selector.replace(_selectorPartsRe, (_, before = '', _colonGroup, colon = '', after = '') => {\n        return before + scopingSelector + colon + after;\n    });\n};\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector) => {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n        const replaceBy = `.${hostSelector}`;\n        return selector\n            .replace(_polyfillHostNoCombinatorRe, (_, selector) => injectScopingSelector(selector, replaceBy))\n            .replace(_polyfillHostRe, replaceBy + ' ');\n    }\n    return scopeSelector + ' ' + selector;\n};\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector) => {\n    const isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\n    const className = '.' + scopeSelector;\n    const _scopeSelectorPart = (p) => {\n        let scopedP = p.trim();\n        if (!scopedP) {\n            return '';\n        }\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        }\n        else {\n            // remove :host since it should be unnecessary\n            const t = p.replace(_polyfillHostRe, '');\n            if (t.length > 0) {\n                scopedP = injectScopingSelector(t, className);\n            }\n        }\n        return scopedP;\n    };\n    const safeContent = safeSelector(selector);\n    selector = safeContent.content;\n    let scopedSelector = '';\n    let startIndex = 0;\n    let res;\n    const sep = /( |>|\\+|~(?!=))\\s*/g;\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    let shouldScope = !hasHost;\n    while ((res = sep.exec(selector)) !== null) {\n        const separator = res[1];\n        const part = selector.slice(startIndex, res.index).trim();\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n        scopedSelector += `${scopedPart} ${separator} `;\n        startIndex = sep.lastIndex;\n    }\n    const part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n    // replace the placeholders with their original values\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n    return selector\n        .split(',')\n        .map((shallowPart) => {\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n            return shallowPart.trim();\n        }\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n        }\n        else {\n            return shallowPart.trim();\n        }\n    })\n        .join(', ');\n};\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\n    return processRules(cssText, (rule) => {\n        let selector = rule.selector;\n        let content = rule.content;\n        if (rule.selector[0] !== '@') {\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n        }\n        else if (rule.selector.startsWith('@media') ||\n            rule.selector.startsWith('@supports') ||\n            rule.selector.startsWith('@page') ||\n            rule.selector.startsWith('@document')) {\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n        }\n        const cssRule = {\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n            content,\n        };\n        return cssRule;\n    });\n};\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\n    cssText = insertPolyfillHostInCssText(cssText);\n    cssText = convertColonHost(cssText);\n    cssText = convertColonHostContext(cssText);\n    const slotted = convertColonSlotted(cssText, slotScopeId);\n    cssText = slotted.cssText;\n    cssText = convertShadowDOMSelectors(cssText);\n    if (scopeId) {\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n    }\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n    return {\n        cssText: cssText.trim(),\n        slottedSelectors: slotted.selectors,\n    };\n};\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\n    const hostScopeId = scopeId + '-h';\n    const slotScopeId = scopeId + '-s';\n    const commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    const orgSelectors = [];\n    if (commentOriginalSelector) {\n        const processCommentedSelector = (rule) => {\n            const placeholder = `/*!@___${orgSelectors.length}___*/`;\n            const comment = `/*!@${rule.selector}*/`;\n            orgSelectors.push({ placeholder, comment });\n            rule.selector = placeholder + rule.selector;\n            return rule;\n        };\n        cssText = processRules(cssText, (rule) => {\n            if (rule.selector[0] !== '@') {\n                return processCommentedSelector(rule);\n            }\n            else if (rule.selector.startsWith('@media') ||\n                rule.selector.startsWith('@supports') ||\n                rule.selector.startsWith('@page') ||\n                rule.selector.startsWith('@document')) {\n                rule.content = processRules(rule.content, processCommentedSelector);\n                return rule;\n            }\n            return rule;\n        });\n    }\n    const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n    cssText = [scoped.cssText, ...commentsWithHash].join('\\n');\n    if (commentOriginalSelector) {\n        orgSelectors.forEach(({ placeholder, comment }) => {\n            cssText = cssText.replace(placeholder, comment);\n        });\n    }\n    scoped.slottedSelectors.forEach((slottedSelector) => {\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\n    });\n    return cssText;\n};\n\nexport { scopeCss };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}