{"ast":null,"code":"//import { defineStore } from 'pinia'\nimport IdentityManager from '@arcgis/core/identity/IdentityManager';\nimport Credential from '@arcgis/core/identity/Credential';\nimport OAuthInfo from '@arcgis/core/identity/OAuthInfo';\nimport { appId, portalUrl, urlCallback } from '../config';\n// Register application ID, Portal URL, and urlCallback with the IdentityManager\nconst oauthInfo = new OAuthInfo({\n  appId: appId,\n  portalUrl: portalUrl,\n  flowType: \"authorization-code\",\n  popup: true,\n  popupCallbackUrl: urlCallback\n});\nexport const initialize = () => {\n  try {\n    IdentityManager.registerOAuthInfos([oauthInfo]);\n  } catch (error) {\n    console.log(error);\n  } finally {\n    console.log(\"Initializing\");\n  }\n};\nconst defaultState = {\n  credential: new Credential(),\n  userId: '',\n  status: false\n};","map":{"version":3,"names":["IdentityManager","Credential","OAuthInfo","appId","portalUrl","urlCallback","oauthInfo","flowType","popup","popupCallbackUrl","initialize","registerOAuthInfos","error","console","log","defaultState","credential","userId","status"],"sources":["C:/code-challenge-react/frontend/src/stores/authStores.tsx"],"sourcesContent":["//import { defineStore } from 'pinia'\r\nimport IdentityManager from '@arcgis/core/identity/IdentityManager'\r\nimport Credential from '@arcgis/core/identity/Credential'\r\nimport OAuthInfo from '@arcgis/core/identity/OAuthInfo'\r\nimport { appId, portalUrl, urlCallback } from '../config'\r\nimport Portal from '@arcgis/core/portal/Portal'\r\n\r\n// Register application ID, Portal URL, and urlCallback with the IdentityManager\r\nconst oauthInfo = new OAuthInfo({\r\n    appId: appId,\r\n    portalUrl: portalUrl,\r\n    flowType: \"authorization-code\",\r\n    popup: true,\r\n    popupCallbackUrl: urlCallback \r\n})\r\n\r\nexport const initialize = () => {\r\n    try { IdentityManager.registerOAuthInfos([oauthInfo]) }\r\n    catch(error) { console.log(error) }\r\n    finally{ console.log(\"Initializing\") }\r\n}\r\n\r\ninterface authState { \r\n    credential: __esri.Credential,\r\n    userId: string,\r\n    status: boolean\r\n}\r\n\r\nconst defaultState: authState = { \r\n    credential: new Credential(),\r\n    userId: '',\r\n    status: false\r\n}"],"mappings":"AAAA;AACA,OAAOA,eAAe,MAAM,uCAAuC;AACnE,OAAOC,UAAU,MAAM,kCAAkC;AACzD,OAAOC,SAAS,MAAM,iCAAiC;AACvD,SAASC,KAAK,EAAEC,SAAS,EAAEC,WAAW,QAAQ,WAAW;AAGzD;AACA,MAAMC,SAAS,GAAG,IAAIJ,SAAS,CAAC;EAC5BC,KAAK,EAAEA,KAAK;EACZC,SAAS,EAAEA,SAAS;EACpBG,QAAQ,EAAE,oBAAoB;EAC9BC,KAAK,EAAE,IAAI;EACXC,gBAAgB,EAAEJ;AACtB,CAAC,CAAC;AAEF,OAAO,MAAMK,UAAU,GAAGA,CAAA,KAAM;EAC5B,IAAI;IAAEV,eAAe,CAACW,kBAAkB,CAAC,CAACL,SAAS,CAAC,CAAC;EAAC,CAAC,CACvD,OAAMM,KAAK,EAAE;IAAEC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EAAC,CAAC,SAC5B;IAAEC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;EAAC;AACzC,CAAC;AAQD,MAAMC,YAAuB,GAAG;EAC5BC,UAAU,EAAE,IAAIf,UAAU,EAAE;EAC5BgB,MAAM,EAAE,EAAE;EACVC,MAAM,EAAE;AACZ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}