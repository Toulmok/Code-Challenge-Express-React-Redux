{"ast":null,"code":"/* Copyright 2017 Esri\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport SceneView from '@arcgis/core/views/SceneView';\nimport PortalQueryParams from '@arcgis/core/portal/PortalQueryParams';\nimport portalItem from '@arcgis/core/portal/PortalItem';\nimport { INIT_SCENE, SELECTION_SET, SELECTION_ADD, SELECTION_REMOVE, SELECTION_RESET, SET_ENVIRONMENT, SET_DATE } from '../constants/action-types';\nimport { registerClickEvent } from './arcgis-sceneview/interaction';\nimport { updateHighlights } from './arcgis-sceneview/highlights';\nconst arcgis = {};\nwindow.arcgis = arcgis;\n\n/**\n * Middleware function with the signature\n *\n * storeInstance =>\n * functionToCallWithAnActionThatWillSendItToTheNextMiddleware =>\n * actionThatDispatchWasCalledWith =>\n * valueToUseAsTheReturnValueOfTheDispatchCall\n *\n * Typically written as\n *\n * store => next => action => result\n */\nconst arcgisMiddleWare = store => next => action => {\n  switch (action.type) {\n    //Initialize scene view on a viewport container.\n\n    case INIT_SCENE:\n      {\n        if (!action.id || !action.container) break;\n\n        // if sceneview container is already initialized, just add it back to the DOM.\n        if (arcgis.container) {\n          action.container.appendChild(arcgis.container);\n          break;\n        }\n\n        // Otherwise, create a new container element and a new scene view.\n        arcgis.container = document.createElement('DIV');\n        action.container.appendChild(arcgis.container);\n        arcgis.sceneView = new SceneView({\n          container: arcgis.container\n        });\n        registerClickEvent(arcgis.sceneView, store);\n\n        // Initialize item table\n        let queryResults = [];\n\n        // When initialized...\n        return portalItem.then(() => {\n          next({\n            ...action,\n            name: webScene.portalItem.title\n          });\n          return arcgis.sceneView.whenLayerView(webScene.layers.getItemAt(0));\n        }).then(() => {\n          // Update the environment settings (either from the state or from the scene)\n          const webSceneEnvironment = arcgis.sceneView.map.initialViewProperties.environment;\n          const date = new Date(webSceneEnvironment.lighting.date);\n          date.setUTCHours(date.getUTCHours() + webSceneEnvironment.lighting.displayUTCOffset);\n          const {\n            environment\n          } = store.getState();\n          store.dispatch({\n            type: SET_ENVIRONMENT,\n            date: environment.date !== null ? environment.date : date,\n            UTCOffset: webSceneEnvironment.lighting.displayUTCOffset,\n            shadows: environment.shadows !== null ? environment.shadows : webSceneEnvironment.lighting.directShadowsEnabled\n          });\n\n          // Update the selection highlights\n          const {\n            selection\n          } = store.getState();\n          updateHighlights(arcgis.sceneView, selection);\n        });\n      }\n\n    // Update highlights and reports on selection change.\n    case SELECTION_SET:\n    case SELECTION_ADD:\n    case SELECTION_REMOVE:\n    case SELECTION_RESET:\n      {\n        next(action);\n\n        // Update needs to happen after the action dispatched, to have the correct selection.\n        const {\n          selection\n        } = store.getState();\n        updateHighlights(arcgis.sceneView, selection);\n        break;\n      }\n    case SET_ENVIRONMENT:\n    case SET_DATE:\n    default:\n      {\n        next(action);\n        break;\n      }\n  }\n  return Promise.resolve();\n};\nexport default arcgisMiddleWare;","map":{"version":3,"names":["SceneView","PortalQueryParams","portalItem","INIT_SCENE","SELECTION_SET","SELECTION_ADD","SELECTION_REMOVE","SELECTION_RESET","SET_ENVIRONMENT","SET_DATE","registerClickEvent","updateHighlights","arcgis","window","arcgisMiddleWare","store","next","action","type","id","container","appendChild","document","createElement","sceneView","queryResults","then","name","webScene","title","whenLayerView","layers","getItemAt","webSceneEnvironment","map","initialViewProperties","environment","date","Date","lighting","setUTCHours","getUTCHours","displayUTCOffset","getState","dispatch","UTCOffset","shadows","directShadowsEnabled","selection","Promise","resolve"],"sources":["C:/code-challenge-react/frontend/src/middleware/arcgis-sceneview.js"],"sourcesContent":["/* Copyright 2017 Esri\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport SceneView from '@arcgis/core/views/SceneView'\nimport PortalQueryParams from '@arcgis/core/portal/PortalQueryParams'\nimport portalItem from '@arcgis/core/portal/PortalItem'\n\nimport {\n  INIT_SCENE,\n  SELECTION_SET,\n  SELECTION_ADD,\n  SELECTION_REMOVE,\n  SELECTION_RESET,\n  SET_ENVIRONMENT,\n  SET_DATE,\n} from '../constants/action-types'\n\nimport { registerClickEvent } from './arcgis-sceneview/interaction'\nimport { updateHighlights } from './arcgis-sceneview/highlights'\n\nconst arcgis = {}\n\nwindow.arcgis = arcgis\n\n/**\n * Middleware function with the signature\n *\n * storeInstance =>\n * functionToCallWithAnActionThatWillSendItToTheNextMiddleware =>\n * actionThatDispatchWasCalledWith =>\n * valueToUseAsTheReturnValueOfTheDispatchCall\n *\n * Typically written as\n *\n * store => next => action => result\n */\nconst arcgisMiddleWare = store => next => (action) => {\n  switch (action.type) {\n    //Initialize scene view on a viewport container.\n\n    case INIT_SCENE: {\n      if (!action.id || !action.container) break\n\n      // if sceneview container is already initialized, just add it back to the DOM.\n      if (arcgis.container) {\n        action.container.appendChild(arcgis.container)\n        break;\n      }\n\n      // Otherwise, create a new container element and a new scene view.\n      arcgis.container = document.createElement('DIV')\n      action.container.appendChild(arcgis.container)\n      arcgis.sceneView = new SceneView({ container: arcgis.container })\n\n      registerClickEvent(arcgis.sceneView, store)\n\n      // Initialize item table\n      let queryResults: __esri.PortalItem[] = []     \n\n\n      // When initialized...\n      return portalItem\n        .then(() => {\n          \n          next({ ...action, name: webScene.portalItem.title })\n\n          return arcgis.sceneView.whenLayerView(webScene.layers.getItemAt(0))\n        })\n        .then(() => {\n          // Update the environment settings (either from the state or from the scene)\n          const webSceneEnvironment = arcgis.sceneView.map.initialViewProperties.environment;\n          const date = new Date(webSceneEnvironment.lighting.date);\n          date.setUTCHours(date.getUTCHours() + webSceneEnvironment.lighting.displayUTCOffset);\n\n          const { environment } = store.getState()\n\n          store.dispatch({\n            type: SET_ENVIRONMENT,\n            date: environment.date !== null ? environment.date : date,\n            UTCOffset: webSceneEnvironment.lighting.displayUTCOffset,\n            shadows: environment.shadows !== null ?\n              environment.shadows :\n              webSceneEnvironment.lighting.directShadowsEnabled,\n          })\n\n          // Update the selection highlights\n          const { selection } = store.getState()\n          updateHighlights(arcgis.sceneView, selection)\n        });\n    }\n\n    // Update highlights and reports on selection change.\n    case SELECTION_SET:\n    case SELECTION_ADD:\n    case SELECTION_REMOVE:\n    case SELECTION_RESET: {\n      next(action)\n\n      // Update needs to happen after the action dispatched, to have the correct selection.\n      const { selection } = store.getState()\n      updateHighlights(arcgis.sceneView, selection)\n\n      break;\n    }\n\n    case SET_ENVIRONMENT:\n    case SET_DATE:\n\n    default: {\n      next(action)\n      break\n    }\n  }\n\n  return Promise.resolve()\n}\n\nexport default arcgisMiddleWare"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,SAAS,MAAM,8BAA8B;AACpD,OAAOC,iBAAiB,MAAM,uCAAuC;AACrE,OAAOC,UAAU,MAAM,gCAAgC;AAEvD,SACEC,UAAU,EACVC,aAAa,EACbC,aAAa,EACbC,gBAAgB,EAChBC,eAAe,EACfC,eAAe,EACfC,QAAQ,QACH,2BAA2B;AAElC,SAASC,kBAAkB,QAAQ,gCAAgC;AACnE,SAASC,gBAAgB,QAAQ,+BAA+B;AAEhE,MAAMC,MAAM,GAAG,CAAC,CAAC;AAEjBC,MAAM,CAACD,MAAM,GAAGA,MAAM;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,gBAAgB,GAAGC,KAAK,IAAIC,IAAI,IAAKC,MAAM,IAAK;EACpD,QAAQA,MAAM,CAACC,IAAI;IACjB;;IAEA,KAAKf,UAAU;MAAE;QACf,IAAI,CAACc,MAAM,CAACE,EAAE,IAAI,CAACF,MAAM,CAACG,SAAS,EAAE;;QAErC;QACA,IAAIR,MAAM,CAACQ,SAAS,EAAE;UACpBH,MAAM,CAACG,SAAS,CAACC,WAAW,CAACT,MAAM,CAACQ,SAAS,CAAC;UAC9C;QACF;;QAEA;QACAR,MAAM,CAACQ,SAAS,GAAGE,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;QAChDN,MAAM,CAACG,SAAS,CAACC,WAAW,CAACT,MAAM,CAACQ,SAAS,CAAC;QAC9CR,MAAM,CAACY,SAAS,GAAG,IAAIxB,SAAS,CAAC;UAAEoB,SAAS,EAAER,MAAM,CAACQ;QAAU,CAAC,CAAC;QAEjEV,kBAAkB,CAACE,MAAM,CAACY,SAAS,EAAET,KAAK,CAAC;;QAE3C;QACA,IAAIU,YAAiC,GAAG,EAAE;;QAG1C;QACA,OAAOvB,UAAU,CACdwB,IAAI,CAAC,MAAM;UAEVV,IAAI,CAAC;YAAE,GAAGC,MAAM;YAAEU,IAAI,EAAEC,QAAQ,CAAC1B,UAAU,CAAC2B;UAAM,CAAC,CAAC;UAEpD,OAAOjB,MAAM,CAACY,SAAS,CAACM,aAAa,CAACF,QAAQ,CAACG,MAAM,CAACC,SAAS,CAAC,CAAC,CAAC,CAAC;QACrE,CAAC,CAAC,CACDN,IAAI,CAAC,MAAM;UACV;UACA,MAAMO,mBAAmB,GAAGrB,MAAM,CAACY,SAAS,CAACU,GAAG,CAACC,qBAAqB,CAACC,WAAW;UAClF,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACL,mBAAmB,CAACM,QAAQ,CAACF,IAAI,CAAC;UACxDA,IAAI,CAACG,WAAW,CAACH,IAAI,CAACI,WAAW,EAAE,GAAGR,mBAAmB,CAACM,QAAQ,CAACG,gBAAgB,CAAC;UAEpF,MAAM;YAAEN;UAAY,CAAC,GAAGrB,KAAK,CAAC4B,QAAQ,EAAE;UAExC5B,KAAK,CAAC6B,QAAQ,CAAC;YACb1B,IAAI,EAAEV,eAAe;YACrB6B,IAAI,EAAED,WAAW,CAACC,IAAI,KAAK,IAAI,GAAGD,WAAW,CAACC,IAAI,GAAGA,IAAI;YACzDQ,SAAS,EAAEZ,mBAAmB,CAACM,QAAQ,CAACG,gBAAgB;YACxDI,OAAO,EAAEV,WAAW,CAACU,OAAO,KAAK,IAAI,GACnCV,WAAW,CAACU,OAAO,GACnBb,mBAAmB,CAACM,QAAQ,CAACQ;UACjC,CAAC,CAAC;;UAEF;UACA,MAAM;YAAEC;UAAU,CAAC,GAAGjC,KAAK,CAAC4B,QAAQ,EAAE;UACtChC,gBAAgB,CAACC,MAAM,CAACY,SAAS,EAAEwB,SAAS,CAAC;QAC/C,CAAC,CAAC;MACN;;IAEA;IACA,KAAK5C,aAAa;IAClB,KAAKC,aAAa;IAClB,KAAKC,gBAAgB;IACrB,KAAKC,eAAe;MAAE;QACpBS,IAAI,CAACC,MAAM,CAAC;;QAEZ;QACA,MAAM;UAAE+B;QAAU,CAAC,GAAGjC,KAAK,CAAC4B,QAAQ,EAAE;QACtChC,gBAAgB,CAACC,MAAM,CAACY,SAAS,EAAEwB,SAAS,CAAC;QAE7C;MACF;IAEA,KAAKxC,eAAe;IACpB,KAAKC,QAAQ;IAEb;MAAS;QACPO,IAAI,CAACC,MAAM,CAAC;QACZ;MACF;EAAC;EAGH,OAAOgC,OAAO,CAACC,OAAO,EAAE;AAC1B,CAAC;AAED,eAAepC,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}