{"ast":null,"code":"/**\n * Allows you to wrap individual methods with a default set of request options. This is useful to avoid setting the same option more then once and allows for interacting and setting defaults in a functional manner.\n *\n * ```js\n * import { withOptions } from \"@esri/arcgis-rest-request\";\n * import { queryFeatures } from '@esri/arcgis-rest-feature-service';\n *\n * const queryTrails = withOptions({\n *   url: \"https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trailheads/FeatureServer/0/\"}, queryFeatures);\n *\n * queryTrails({\n *   where: \"ELEV_FT > 1000\"\n * }).then(result);\n *\n * const queryTrailsAsUser = withOptions({\n *   authentication: ArcGISIdentityManager\n * }, queryTrails);\n *\n * queryTrailsAsUser({\n *   where: \"TRL_NAME LIKE '%backbone%'\"\n * }).then(result);\n * ```\n *\n * @param defaultOptions The options to pass into to the `func`.\n * @param func Any function that accepts anything extending `IRequestOptions` as its last parameter.\n * @returns A copy of `func` with the `defaultOptions` passed in as defaults.\n */\nexport function withOptions(defaultOptions, func) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    var options = typeof args[args.length - 1] === \"object\" ? Object.assign(Object.assign({}, defaultOptions), args.pop()) : defaultOptions;\n    return func.apply(void 0, [].concat(args, [options]));\n  };\n}","map":{"version":3,"names":["withOptions","defaultOptions","func","_len","arguments","length","args","Array","_key","options","Object","assign","pop","apply","concat"],"sources":["C:\\code-challenge-react\\node_modules\\@esri\\arcgis-rest-request\\src\\utils\\with-options.ts"],"sourcesContent":["import { IRequestOptions } from \"../utils/IRequestOptions.js\";\n\n/**\n * Allows you to wrap individual methods with a default set of request options. This is useful to avoid setting the same option more then once and allows for interacting and setting defaults in a functional manner.\n *\n * ```js\n * import { withOptions } from \"@esri/arcgis-rest-request\";\n * import { queryFeatures } from '@esri/arcgis-rest-feature-service';\n *\n * const queryTrails = withOptions({\n *   url: \"https://services3.arcgis.com/GVgbJbqm8hXASVYi/arcgis/rest/services/Trailheads/FeatureServer/0/\"}, queryFeatures);\n *\n * queryTrails({\n *   where: \"ELEV_FT > 1000\"\n * }).then(result);\n *\n * const queryTrailsAsUser = withOptions({\n *   authentication: ArcGISIdentityManager\n * }, queryTrails);\n *\n * queryTrailsAsUser({\n *   where: \"TRL_NAME LIKE '%backbone%'\"\n * }).then(result);\n * ```\n *\n * @param defaultOptions The options to pass into to the `func`.\n * @param func Any function that accepts anything extending `IRequestOptions` as its last parameter.\n * @returns A copy of `func` with the `defaultOptions` passed in as defaults.\n */\nexport function withOptions<\n  K extends IRequestOptions,\n  T extends (...args: any[]) => any\n>(\n  defaultOptions: IRequestOptions,\n  func: T\n): (...funcArgs: Parameters<T>) => ReturnType<T> {\n  return (...args: Parameters<T>): ReturnType<T> => {\n    const options: K =\n      typeof args[args.length - 1] === \"object\"\n        ? {\n            ...defaultOptions,\n            ...args.pop()\n          }\n        : defaultOptions;\n\n    return func(...[...args, options]);\n  };\n}\n"],"mappings":"AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,OAAM,SAAUA,WAAWA,CAIzBC,cAA+B,EAC/BC,IAAO;EAEP,OAAO,YAA0C;IAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAtCC,IAAmB,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAnBF,IAAmB,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;IAAA;IAC5B,IAAMC,OAAO,GACX,OAAOH,IAAI,CAACA,IAAI,CAACD,MAAM,GAAG,CAAC,CAAC,KAAK,QAAQ,GACtCK,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACMV,cAAc,GACdK,IAAI,CAACM,GAAG,EAAE,IAEfX,cAAc;IAEpB,OAAOC,IAAI,CAAAW,KAAA,YAAAC,MAAA,CAAQR,IAAI,GAAEG,OAAO,GAAE;EACpC,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}