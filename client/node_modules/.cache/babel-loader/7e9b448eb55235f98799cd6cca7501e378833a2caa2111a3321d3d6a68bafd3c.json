{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport { glsl as e } from \"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";\nimport { ShaderBuilder as o } from \"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";\nimport { Texture2DPassUniform as r } from \"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";\nimport { VertexAttribute as t } from \"../views/3d/webgl-engine/lib/VertexAttribute.js\";\nimport { addResolutionUniform as s } from \"../views/3d/webgl-engine/shaders/SMAAPassParameters.js\";\nconst x = {\n  maxSearchSteps: 8,\n  maxDistanceAreaTex: 16\n};\nfunction c() {\n  const c = new o(),\n    {\n      attributes: d,\n      varyings: a,\n      vertex: i,\n      fragment: n\n    } = c;\n  return d.add(t.POSITION, \"vec2\"), a.add(\"uv\", \"vec2\"), a.add(\"offsets[2]\", \"vec4\"), a.add(\"maxOffset\", \"vec4\"), a.add(\"pixelCoord\", \"vec2\"), s(i), i.code.add(e`\n      void main() {\n        uv = position * 0.5 + vec2(0.5);\n        gl_Position = vec4(position, 0, 1);\n\n        pixelCoord = uv * resolution.zw;\n        offsets[0] = uv.xyxy + resolution.xyxy * vec4( -0.25, 0.125, 1.25, 0.125 );\n        offsets[1] = uv.xyxy + resolution.xyxy * vec4( -0.125, 0.25, -0.125, -1.25 );\n        maxOffset = vec4( offsets[0].xz, offsets[1].yw ) + vec4( -2.0, 2.0, -2.0, 2.0 ) * resolution.xxyy * float( ${e.int(x.maxSearchSteps)} );\n      }\n    `), n.uniforms.add(new r(\"edgesTexture\", e => e.edges.colorTexture)), n.uniforms.add(new r(\"areaTexture\", e => e.areaTexture)), n.uniforms.add(new r(\"searchTexture\", e => e.searchTexture)), s(n), n.code.add(e`\n      #define SMAA_AREATEX_PIXEL_SIZE ( 1.0 / vec2( 160.0, 560.0 ) )\n      #define SMAA_AREATEX_SUBTEX_SIZE ( 1.0 / 7.0 )\n\n      vec4 sampleLevelZeroOffset(sampler2D texture, vec2 coord, vec2 offset) {\n        return texture2D(texture, coord + offset.x * resolution.xy, 0.0);\n      }\n\n      vec2 round( vec2 x ) {\n        return sign(x) * floor(abs(x) + 0.5);\n      }\n\n      float searchLength(sampler2D searchTex, vec2 e, float bias, float scale) {\n        e.r = bias + e.r * scale;\n        return 255.0 * texture2D( searchTex, e, 0.0 ).r;\n      }\n\n      float searchXLeft( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {\n        vec2 e = vec2( 0.0, 1.0 );\n        for ( int i = 0; i < ${e.int(x.maxSearchSteps)}; i ++ ) {\n          e = texture2D( edgesTex, texcoord, 0.0 ).rg;\n          texcoord -= vec2( 2.0, 0.0 ) * resolution.xy;\n          if ( ! ( texcoord.x > end && e.g > 0.8281 && e.r == 0.0 ) ) break;\n        }\n        texcoord.x += 0.25 * resolution.x;\n        texcoord.x += resolution.x;\n        texcoord.x += 2.0 * resolution.x;\n        texcoord.x -= resolution.x * searchLength(searchTex, e, 0.0, 0.5);\n        return texcoord.x;\n      }\n\n      float searchXRight( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {\n        vec2 e = vec2( 0.0, 1.0 );\n        for ( int i = 0; i < ${e.int(x.maxSearchSteps)}; i ++ ) {\n          e = texture2D( edgesTex, texcoord, 0.0 ).rg;\n          texcoord += vec2( 2.0, 0.0 ) * resolution.xy;\n          if ( ! ( texcoord.x < end && e.g > 0.8281 && e.r == 0.0 ) ) break;\n        }\n        texcoord.x -= 0.25 * resolution.x;\n        texcoord.x -= resolution.x;\n        texcoord.x -= 2.0 * resolution.x;\n        texcoord.x += resolution.x * searchLength( searchTex, e, 0.5, 0.5 );\n        return texcoord.x;\n      }\n\n      float searchYUp( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {\n        vec2 e = vec2( 1.0, 0.0 );\n        for ( int i = 0; i < ${e.int(x.maxSearchSteps)}; i ++ ) {\n          e = texture2D( edgesTex, texcoord, 0.0 ).rg;\n          texcoord += vec2( 0.0, 2.0 ) * resolution.xy;\n          if ( ! ( texcoord.y > end && e.r > 0.8281 && e.g == 0.0 ) ) break;\n        }\n        texcoord.y -= 0.25 * resolution.y;\n        texcoord.y -= resolution.y;\n        texcoord.y -= 2.0 * resolution.y;\n        texcoord.y += resolution.y * searchLength( searchTex, e.gr, 0.0, 0.5 );\n        return texcoord.y;\n      }\n\n      float searchYDown( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {\n        vec2 e = vec2( 1.0, 0.0 );\n        for ( int i = 0; i < ${e.int(x.maxSearchSteps)}; i ++ ) {\n          e = texture2D( edgesTex, texcoord, 0.0 ).rg;\n          texcoord -= vec2( 0.0, 2.0 ) * resolution.xy;\n          if ( ! ( texcoord.y < end && e.r > 0.8281 && e.g == 0.0 ) ) break;\n        }\n        texcoord.y += 0.25 * resolution.y;\n        texcoord.y += resolution.y;\n        texcoord.y += 2.0 * resolution.y;\n        texcoord.y -= resolution.y * searchLength( searchTex, e.gr, 0.5, 0.5 );\n        return texcoord.y;\n      }\n\n      vec2 getArea( sampler2D areaTex, vec2 dist, float e1, float e2, float offset ) {\n        vec2 texcoord = float( ${e.int(x.maxDistanceAreaTex)} ) * round( 4.0 * vec2( e1, e2 ) ) + dist;\n        texcoord = SMAA_AREATEX_PIXEL_SIZE * texcoord + ( 0.5 * SMAA_AREATEX_PIXEL_SIZE );\n        texcoord.y += SMAA_AREATEX_SUBTEX_SIZE * offset;\n        return texture2D( areaTex, texcoord, 0.0 ).rg;\n      }\n\n      void main() {\n        ivec4 subsampleIndices = ivec4(0.0);\n        vec4 weights = vec4(0.0);\n        vec2 e = texture2D( edgesTexture, uv ).rg;\n        if ( e.g > 0.0 ) {\n          vec2 d;\n          vec2 coords;\n          coords.x = searchXLeft( edgesTexture, searchTexture, offsets[0].xy, maxOffset.x );\n          coords.y = offsets[1].y;\n          d.x = coords.x;\n          float e1 = texture2D( edgesTexture, coords, 0.0 ).r;\n          coords.x = searchXRight( edgesTexture, searchTexture, offsets[0].zw, maxOffset.y );\n          d.y = coords.x;\n          d = d * resolution.z - pixelCoord.x;\n          vec2 sqrt_d = sqrt( abs(d) );\n          coords.y -= 1.0 * resolution.y;\n          float e2 = sampleLevelZeroOffset( edgesTexture, coords, vec2( 1.0, 0.0 ) ).r;\n          weights.rg = getArea( areaTexture, sqrt_d, e1, e2, float( subsampleIndices.y ) );\n        }\n\n        if ( e.r > 0.0 ) {\n          vec2 d;\n          vec2 coords;\n          coords.y = searchYUp( edgesTexture, searchTexture, offsets[1].xy, maxOffset.z );\n          coords.x = offsets[0].x;\n          d.x = coords.y;\n          float e1 = texture2D( edgesTexture, coords, 0.0 ).g;\n          coords.y = searchYDown( edgesTexture, searchTexture, offsets[1].zw, maxOffset.w );\n          d.y = coords.y;\n          d = d * resolution.w - pixelCoord.y;\n          vec2 sqrt_d = sqrt(abs(d));\n          coords.y -= 1.0 * resolution.y;\n          float e2 = sampleLevelZeroOffset( edgesTexture, coords, vec2(0.0, 1.0)).g;\n          weights.ba = getArea( areaTexture, sqrt_d, e1, e2, float( subsampleIndices.x ) );\n\n          // for some reason the following lines are necessary to prevent\n          // texture lookup precision issues on some Intel integrated graphics chips\n          vec4 dbg = (offsets[0] + offsets[1] + maxOffset + coords.xyyx);\n          weights.r += 0.00000001 * dot(vec4(0, 1, 0, 1), dbg);\n        }\n        gl_FragColor = weights;\n      }\n    `), c;\n}\nconst d = Object.freeze(Object.defineProperty({\n  __proto__: null,\n  build: c\n}, Symbol.toStringTag, {\n  value: \"Module\"\n}));\nexport { d as B, c as b };","map":{"version":3,"names":["glsl","e","ShaderBuilder","o","Texture2DPassUniform","r","VertexAttribute","t","addResolutionUniform","s","x","maxSearchSteps","maxDistanceAreaTex","c","attributes","d","varyings","a","vertex","i","fragment","n","add","POSITION","code","int","uniforms","edges","colorTexture","areaTexture","searchTexture","Object","freeze","defineProperty","__proto__","build","Symbol","toStringTag","value","B","b"],"sources":["C:/code-challenge-react/frontend/node_modules/@arcgis/core/chunks/BlendWeights.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport{glsl as e}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as o}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{Texture2DPassUniform as r}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{VertexAttribute as t}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";import{addResolutionUniform as s}from\"../views/3d/webgl-engine/shaders/SMAAPassParameters.js\";const x={maxSearchSteps:8,maxDistanceAreaTex:16};function c(){const c=new o,{attributes:d,varyings:a,vertex:i,fragment:n}=c;return d.add(t.POSITION,\"vec2\"),a.add(\"uv\",\"vec2\"),a.add(\"offsets[2]\",\"vec4\"),a.add(\"maxOffset\",\"vec4\"),a.add(\"pixelCoord\",\"vec2\"),s(i),i.code.add(e`\n      void main() {\n        uv = position * 0.5 + vec2(0.5);\n        gl_Position = vec4(position, 0, 1);\n\n        pixelCoord = uv * resolution.zw;\n        offsets[0] = uv.xyxy + resolution.xyxy * vec4( -0.25, 0.125, 1.25, 0.125 );\n        offsets[1] = uv.xyxy + resolution.xyxy * vec4( -0.125, 0.25, -0.125, -1.25 );\n        maxOffset = vec4( offsets[0].xz, offsets[1].yw ) + vec4( -2.0, 2.0, -2.0, 2.0 ) * resolution.xxyy * float( ${e.int(x.maxSearchSteps)} );\n      }\n    `),n.uniforms.add(new r(\"edgesTexture\",(e=>e.edges.colorTexture))),n.uniforms.add(new r(\"areaTexture\",(e=>e.areaTexture))),n.uniforms.add(new r(\"searchTexture\",(e=>e.searchTexture))),s(n),n.code.add(e`\n      #define SMAA_AREATEX_PIXEL_SIZE ( 1.0 / vec2( 160.0, 560.0 ) )\n      #define SMAA_AREATEX_SUBTEX_SIZE ( 1.0 / 7.0 )\n\n      vec4 sampleLevelZeroOffset(sampler2D texture, vec2 coord, vec2 offset) {\n        return texture2D(texture, coord + offset.x * resolution.xy, 0.0);\n      }\n\n      vec2 round( vec2 x ) {\n        return sign(x) * floor(abs(x) + 0.5);\n      }\n\n      float searchLength(sampler2D searchTex, vec2 e, float bias, float scale) {\n        e.r = bias + e.r * scale;\n        return 255.0 * texture2D( searchTex, e, 0.0 ).r;\n      }\n\n      float searchXLeft( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {\n        vec2 e = vec2( 0.0, 1.0 );\n        for ( int i = 0; i < ${e.int(x.maxSearchSteps)}; i ++ ) {\n          e = texture2D( edgesTex, texcoord, 0.0 ).rg;\n          texcoord -= vec2( 2.0, 0.0 ) * resolution.xy;\n          if ( ! ( texcoord.x > end && e.g > 0.8281 && e.r == 0.0 ) ) break;\n        }\n        texcoord.x += 0.25 * resolution.x;\n        texcoord.x += resolution.x;\n        texcoord.x += 2.0 * resolution.x;\n        texcoord.x -= resolution.x * searchLength(searchTex, e, 0.0, 0.5);\n        return texcoord.x;\n      }\n\n      float searchXRight( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {\n        vec2 e = vec2( 0.0, 1.0 );\n        for ( int i = 0; i < ${e.int(x.maxSearchSteps)}; i ++ ) {\n          e = texture2D( edgesTex, texcoord, 0.0 ).rg;\n          texcoord += vec2( 2.0, 0.0 ) * resolution.xy;\n          if ( ! ( texcoord.x < end && e.g > 0.8281 && e.r == 0.0 ) ) break;\n        }\n        texcoord.x -= 0.25 * resolution.x;\n        texcoord.x -= resolution.x;\n        texcoord.x -= 2.0 * resolution.x;\n        texcoord.x += resolution.x * searchLength( searchTex, e, 0.5, 0.5 );\n        return texcoord.x;\n      }\n\n      float searchYUp( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {\n        vec2 e = vec2( 1.0, 0.0 );\n        for ( int i = 0; i < ${e.int(x.maxSearchSteps)}; i ++ ) {\n          e = texture2D( edgesTex, texcoord, 0.0 ).rg;\n          texcoord += vec2( 0.0, 2.0 ) * resolution.xy;\n          if ( ! ( texcoord.y > end && e.r > 0.8281 && e.g == 0.0 ) ) break;\n        }\n        texcoord.y -= 0.25 * resolution.y;\n        texcoord.y -= resolution.y;\n        texcoord.y -= 2.0 * resolution.y;\n        texcoord.y += resolution.y * searchLength( searchTex, e.gr, 0.0, 0.5 );\n        return texcoord.y;\n      }\n\n      float searchYDown( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {\n        vec2 e = vec2( 1.0, 0.0 );\n        for ( int i = 0; i < ${e.int(x.maxSearchSteps)}; i ++ ) {\n          e = texture2D( edgesTex, texcoord, 0.0 ).rg;\n          texcoord -= vec2( 0.0, 2.0 ) * resolution.xy;\n          if ( ! ( texcoord.y < end && e.r > 0.8281 && e.g == 0.0 ) ) break;\n        }\n        texcoord.y += 0.25 * resolution.y;\n        texcoord.y += resolution.y;\n        texcoord.y += 2.0 * resolution.y;\n        texcoord.y -= resolution.y * searchLength( searchTex, e.gr, 0.5, 0.5 );\n        return texcoord.y;\n      }\n\n      vec2 getArea( sampler2D areaTex, vec2 dist, float e1, float e2, float offset ) {\n        vec2 texcoord = float( ${e.int(x.maxDistanceAreaTex)} ) * round( 4.0 * vec2( e1, e2 ) ) + dist;\n        texcoord = SMAA_AREATEX_PIXEL_SIZE * texcoord + ( 0.5 * SMAA_AREATEX_PIXEL_SIZE );\n        texcoord.y += SMAA_AREATEX_SUBTEX_SIZE * offset;\n        return texture2D( areaTex, texcoord, 0.0 ).rg;\n      }\n\n      void main() {\n        ivec4 subsampleIndices = ivec4(0.0);\n        vec4 weights = vec4(0.0);\n        vec2 e = texture2D( edgesTexture, uv ).rg;\n        if ( e.g > 0.0 ) {\n          vec2 d;\n          vec2 coords;\n          coords.x = searchXLeft( edgesTexture, searchTexture, offsets[0].xy, maxOffset.x );\n          coords.y = offsets[1].y;\n          d.x = coords.x;\n          float e1 = texture2D( edgesTexture, coords, 0.0 ).r;\n          coords.x = searchXRight( edgesTexture, searchTexture, offsets[0].zw, maxOffset.y );\n          d.y = coords.x;\n          d = d * resolution.z - pixelCoord.x;\n          vec2 sqrt_d = sqrt( abs(d) );\n          coords.y -= 1.0 * resolution.y;\n          float e2 = sampleLevelZeroOffset( edgesTexture, coords, vec2( 1.0, 0.0 ) ).r;\n          weights.rg = getArea( areaTexture, sqrt_d, e1, e2, float( subsampleIndices.y ) );\n        }\n\n        if ( e.r > 0.0 ) {\n          vec2 d;\n          vec2 coords;\n          coords.y = searchYUp( edgesTexture, searchTexture, offsets[1].xy, maxOffset.z );\n          coords.x = offsets[0].x;\n          d.x = coords.y;\n          float e1 = texture2D( edgesTexture, coords, 0.0 ).g;\n          coords.y = searchYDown( edgesTexture, searchTexture, offsets[1].zw, maxOffset.w );\n          d.y = coords.y;\n          d = d * resolution.w - pixelCoord.y;\n          vec2 sqrt_d = sqrt(abs(d));\n          coords.y -= 1.0 * resolution.y;\n          float e2 = sampleLevelZeroOffset( edgesTexture, coords, vec2(0.0, 1.0)).g;\n          weights.ba = getArea( areaTexture, sqrt_d, e1, e2, float( subsampleIndices.x ) );\n\n          // for some reason the following lines are necessary to prevent\n          // texture lookup precision issues on some Intel integrated graphics chips\n          vec4 dbg = (offsets[0] + offsets[1] + maxOffset + coords.xyyx);\n          weights.r += 0.00000001 * dot(vec4(0, 1, 0, 1), dbg);\n        }\n        gl_FragColor = weights;\n      }\n    `),c}const d=Object.freeze(Object.defineProperty({__proto__:null,build:c},Symbol.toStringTag,{value:\"Module\"}));export{d as B,c as b};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAAOA,IAAI,IAAIC,CAAC,QAAK,2DAA2D;AAAC,SAAOC,aAAa,IAAIC,CAAC,QAAK,8DAA8D;AAAC,SAAOC,oBAAoB,IAAIC,CAAC,QAAK,qEAAqE;AAAC,SAAOC,eAAe,IAAIC,CAAC,QAAK,iDAAiD;AAAC,SAAOC,oBAAoB,IAAIC,CAAC,QAAK,wDAAwD;AAAC,MAAMC,CAAC,GAAC;EAACC,cAAc,EAAC,CAAC;EAACC,kBAAkB,EAAC;AAAE,CAAC;AAAC,SAASC,CAACA,CAAA,EAAE;EAAC,MAAMA,CAAC,GAAC,IAAIV,CAAC;IAAC;MAACW,UAAU,EAACC,CAAC;MAACC,QAAQ,EAACC,CAAC;MAACC,MAAM,EAACC,CAAC;MAACC,QAAQ,EAACC;IAAC,CAAC,GAACR,CAAC;EAAC,OAAOE,CAAC,CAACO,GAAG,CAACf,CAAC,CAACgB,QAAQ,EAAC,MAAM,CAAC,EAACN,CAAC,CAACK,GAAG,CAAC,IAAI,EAAC,MAAM,CAAC,EAACL,CAAC,CAACK,GAAG,CAAC,YAAY,EAAC,MAAM,CAAC,EAACL,CAAC,CAACK,GAAG,CAAC,WAAW,EAAC,MAAM,CAAC,EAACL,CAAC,CAACK,GAAG,CAAC,YAAY,EAAC,MAAM,CAAC,EAACb,CAAC,CAACU,CAAC,CAAC,EAACA,CAAC,CAACK,IAAI,CAACF,GAAG,CAACrB,CAAE;AAC1tB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qHAAqHA,CAAC,CAACwB,GAAG,CAACf,CAAC,CAACC,cAAc,CAAE;AAC7I;AACA,KAAK,CAAC,EAACU,CAAC,CAACK,QAAQ,CAACJ,GAAG,CAAC,IAAIjB,CAAC,CAAC,cAAc,EAAEJ,CAAC,IAAEA,CAAC,CAAC0B,KAAK,CAACC,YAAY,CAAE,CAAC,EAACP,CAAC,CAACK,QAAQ,CAACJ,GAAG,CAAC,IAAIjB,CAAC,CAAC,aAAa,EAAEJ,CAAC,IAAEA,CAAC,CAAC4B,WAAW,CAAE,CAAC,EAACR,CAAC,CAACK,QAAQ,CAACJ,GAAG,CAAC,IAAIjB,CAAC,CAAC,eAAe,EAAEJ,CAAC,IAAEA,CAAC,CAAC6B,aAAa,CAAE,CAAC,EAACrB,CAAC,CAACY,CAAC,CAAC,EAACA,CAAC,CAACG,IAAI,CAACF,GAAG,CAACrB,CAAE;AAC7M;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+BA,CAAC,CAACwB,GAAG,CAACf,CAAC,CAACC,cAAc,CAAE;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+BV,CAAC,CAACwB,GAAG,CAACf,CAAC,CAACC,cAAc,CAAE;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+BV,CAAC,CAACwB,GAAG,CAACf,CAAC,CAACC,cAAc,CAAE;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+BV,CAAC,CAACwB,GAAG,CAACf,CAAC,CAACC,cAAc,CAAE;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiCV,CAAC,CAACwB,GAAG,CAACf,CAAC,CAACE,kBAAkB,CAAE;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC,EAACC,CAAC;AAAA;AAAC,MAAME,CAAC,GAACgB,MAAM,CAACC,MAAM,CAACD,MAAM,CAACE,cAAc,CAAC;EAACC,SAAS,EAAC,IAAI;EAACC,KAAK,EAACtB;AAAC,CAAC,EAACuB,MAAM,CAACC,WAAW,EAAC;EAACC,KAAK,EAAC;AAAQ,CAAC,CAAC,CAAC;AAAC,SAAOvB,CAAC,IAAIwB,CAAC,EAAC1B,CAAC,IAAI2B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}