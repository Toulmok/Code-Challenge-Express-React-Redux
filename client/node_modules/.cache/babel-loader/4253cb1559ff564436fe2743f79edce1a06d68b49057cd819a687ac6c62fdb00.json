{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport { lerp as t } from \"../../../core/mathUtils.js\";\nimport { n as e, s, a as i, g as o, u as n, f as r, e as l, j as a, w as h } from \"../../../chunks/vec3.js\";\nimport { d as u, c } from \"../../../chunks/vec3f64.js\";\nimport { lonLatToSphericalPCPF as d } from \"../../../geometry/projection.js\";\nimport { intersectsSphere as p, NumPlanes as f, PlaneIndex as m } from \"../../../geometry/support/frustum.js\";\nimport { c as g } from \"../../../chunks/sphere.js\";\nimport { TileFrustumVisibility as $, PatchType as _ } from \"./interfaces.js\";\nimport { createSphericalGlobePatch as v, updateCornerSpherical as x, updateEdgesAndCornersSpherical as M } from \"./PatchGeometryFactory.js\";\nimport { ENABLE_TERRAIN_INTERNAL_CHECKS as b, internalAssert as j, almostEquals as S } from \"./terrainUtils.js\";\nimport { Tile as T, CenterPosition as E } from \"./Tile.js\";\nimport { compareTilesByLij as H } from \"./tileUtils.js\";\nimport { newDoubleArray as D } from \"../webgl-engine/lib/DoubleArray.js\";\nclass I extends T {\n  get convexHull() {\n    return this._convexHull;\n  }\n  constructor(t, e, s) {\n    super(), this._convexHull = new Array(24), this._boundingSphere = g(), void 0 !== t && this.init(t, e, s);\n  }\n  init(s, i, o) {\n    super.init(s, i, o);\n    const n = this.ellipsoid.radius,\n      r = this.extentInRadians[0],\n      l = this.extentInRadians[1],\n      a = this.extentInRadians[2],\n      h = this.extentInRadians[3],\n      c = s[0],\n      p = t(l, h, .5),\n      f = t(r, a, .5),\n      m = 0 === c ? 0 : Math.min(Math.abs(l), Math.abs(h));\n    this._edgeLen = (a - r) * Math.cos(m) * n, this._edgeLen2 = this._edgeLen * this._edgeLen, this._curvatureHeight = n - Math.sqrt(n * n - this._edgeLen2 / 4), d(this.centerAtSeaLevel, f, p, this.ellipsoid.radius);\n    const g = u(this.centerAtSeaLevel);\n    e(g, g), this.up = g, this.updateRadiusAndCenter();\n  }\n  updateRadiusAndCenter() {\n    this._updateBoundingVolumes();\n    const t = this._center;\n    if (0 === this.lij[0]) s(t[E.MIDDLE], 0, 0, 0), s(t[E.TOP], 0, 0, 0), s(t[E.BOTTOM], 0, 0, 0), t[E.MIDDLE][3] = this.ellipsoid.radius + this.elevationBounds[1];else {\n      this._updateCenter();\n      const e = t[E.MIDDLE],\n        s = this.convexHull;\n      let i = 0;\n      for (let t = 0; t < 8; ++t) i = Math.max(i, R(e, s, 3 * t));\n      t[E.MIDDLE][3] = Math.sqrt(i);\n    }\n  }\n  _calculateFrustumVisibilityStatus(t) {\n    if (!p(t, this._boundingSphere)) return $.OUTSIDE;\n    if (this.lij[0] < 10) return $.INTERSECTS;\n    const e = this.convexHull,\n      s = this.surface.view.state.camera.near;\n    let i = !0;\n    for (let o = 0; o < f.NUM; o++) {\n      const n = o === m.NEAR,\n        r = t[o],\n        l = r[0],\n        a = r[1],\n        h = r[2],\n        u = r[3] - (n ? s : 0);\n      let c = !1;\n      for (let t = 0; t < 8; ++t) {\n        const s = 3 * t;\n        if (l * e[s + 0] + a * e[s + 1] + h * e[s + 2] + u < 0) {\n          if (c = !0, !i) break;\n        } else i = !1;\n      }\n      if (!c) return $.OUTSIDE;\n    }\n    return i ? $.INSIDE : $.INTERSECTS;\n  }\n  computeElevationBounds() {\n    super.computeElevationBounds(), this._updateBoundingVolumes();\n  }\n  createGeometry() {\n    v(this.renderData, this._getPatchType()), this._updateBoundingVolumes(), this.setMemoryDirty();\n  }\n  _updateBoundingVolumes() {\n    this._updateConvexHull(), this._updateBoundingSphere(), b && this._checkBVs();\n  }\n  _updateBoundingSphere() {\n    const t = this._boundingSphere,\n      e = t,\n      r = this.elevationBounds,\n      l = this.ellipsoid.radius,\n      a = r[1];\n    if (0 === this.level) s(e, 0, 0, 0), t[3] = l + a;else {\n      const s = this.extentInRadians,\n        a = .5 * (s[0] + s[2]),\n        h = s[1],\n        u = s[3];\n      B(A, a, h, l), B(P, a, u, l), i(e, A, P);\n      const c = .5 * (r[0] + r[1]);\n      o(e, e, (l + c) / n(e));\n      const d = this.convexHull;\n      let p = 0;\n      const f = (t, e) => {\n        const s = t[0] - d[3 * e + 0],\n          i = t[1] - d[3 * e + 1],\n          o = t[2] - d[3 * e + 2];\n        return Math.sqrt(s * s + i * i + o * o);\n      };\n      for (let t = 0; t < 8; ++t) {\n        const s = f(e, t);\n        p = Math.max(p, s);\n      }\n      const m = p;\n      t[3] = m + 2;\n    }\n  }\n  _updateConvexHull() {\n    const t = this.extentInRadians,\n      s = this.ellipsoid.radius;\n    if (0 === this.level) return;\n    const a = this.elevationBounds,\n      u = this._getPatchType(),\n      d = this.surface.isWebMercator,\n      p = d && u === _.HAS_NORTH_POLE,\n      f = d && u === _.HAS_SOUTH_POLE,\n      m = f || p,\n      g = Math.PI / 2,\n      $ = t[0],\n      v = t[2],\n      x = f ? -g : t[1],\n      M = p ? g : t[3],\n      b = .5 * ($ + v),\n      T = a[0],\n      E = s + (m ? Math.min(0, T - 1) : T),\n      H = (t, e, s) => B(t, e, s, E),\n      D = c(),\n      I = c(),\n      L = c(),\n      R = c();\n    H(D, $, x), H(I, $, M), H(L, v, M), H(R, v, x);\n    const y = (t, e) => {\n      for (let s = 0; s < 3; ++s) this._convexHull[3 * e + s] = t[s];\n    };\n    y(D, 0), y(I, 1), y(L, 2), y(R, 3);\n    const A = a[1],\n      P = s + (m ? Math.max(0, A + 1) : A),\n      V = c(),\n      C = c(),\n      N = c();\n    B(C, b, M, E), B(N, b, x, E), i(V, C, N), e(V, V);\n    const U = c(),\n      k = c(),\n      F = (t, s) => {\n        h(k, t, s), e(k, k);\n        const n = -l(t, U) / l(k, U);\n        j(n >= 0), o(k, k, n), i(t, t, k);\n      };\n    if (2 ** this.lij[0] > 2 * this.lij[1]) {\n      const t = N,\n        s = c();\n      r(s, O, t), e(s, s), r(U, t, s), e(U, U), j(S(l(U, t) / n(t), 0)), F(D, I), F(R, L), y(D, 0), y(R, 3);\n    } else if (2 ** this.lij[0] !== 2 * this.lij[1]) {\n      const t = C,\n        s = c();\n      r(s, O, t), e(s, s), r(U, s, t), e(U, U), F(I, D), F(L, R), y(I, 1), y(L, 2);\n    }\n    const w = (t, e) => {\n      const s = P / l(e, V);\n      for (let i = 0; i < 3; ++i) this._convexHull[3 * t + i] = e[i] * s;\n    };\n    w(4, D), w(5, I), w(6, L), w(7, R);\n  }\n  _getPatchType() {\n    const t = this.lij[1],\n      e = 0 === t,\n      s = t === (1 << this.level) - 1;\n    return e ? s ? _.HAS_BOTH_POLES : _.HAS_NORTH_POLE : s ? _.HAS_SOUTH_POLE : _.REGULAR;\n  }\n  intersectsRay(t, e, s, i) {\n    const o = this._boundingSphere,\n      n = o[3] + s,\n      r = e[0] * e[0] + e[1] * e[1] + e[2] * e[2],\n      l = o[0] - t[0],\n      a = o[1] - t[1],\n      h = o[2] - t[2],\n      u = (l * e[0] + a * e[1] + h * e[2]) / r,\n      c = e[0] * u - l,\n      d = e[1] * u - a,\n      p = e[2] * u - h;\n    return c * c + d * d + p * p < n * n;\n  }\n  getDefaultVerticesPerSide() {\n    return this.level < L.length ? L[this.level] + 1 : 2;\n  }\n  updateCornerElevations() {\n    x(this.renderData), this._updateBoundingVolumes();\n  }\n  updateEdgeElevations() {\n    M(this.renderData), this._updateBoundingVolumes();\n  }\n  _checkBVs() {\n    if (!b) return;\n    if (this.level <= 2) return;\n    const t = this._boundingSphere,\n      s = t[3],\n      o = t,\n      u = c(),\n      d = this.ellipsoid.radius,\n      p = this.elevationBounds;\n    p[1], p[0];\n    const f = d + p[0],\n      m = 1,\n      g = 0,\n      $ = this._center[E.MIDDLE][3],\n      _ = this.convexHull,\n      v = (t, e) => {\n        for (let s = 0; s < 3; ++s) t[s] = _[3 * e + s];\n      };\n    {\n      const t = c(),\n        s = c(),\n        i = c(),\n        o = c(),\n        n = c(),\n        a = (a, u, c, d) => {\n          v(s, a), v(i, u), v(o, c), h(s, s, i), h(o, o, i), r(t, s, o), e(t, t);\n          const p = l(t, i);\n          v(n, d);\n          const f = l(t, n),\n            m = Math.abs(f - p);\n          j(S(m, 0), `Non coplanar ${a},${u},${c},${d} diff = ${m}`);\n        };\n      a(0, 1, 2, 3), a(4, 5, 6, 7), a(0, 1, 4, 5), a(1, 2, 5, 6), a(2, 3, 6, 7), a(3, 0, 7, 4);\n    }\n    const x = D(24),\n      M = (t, e, s) => {\n        const i = 4 * t;\n        for (let o = 0; o < 3; ++o) x[i + o] = e[o];\n        x[i + 3] = s;\n      },\n      T = c(),\n      I = c(),\n      L = c(),\n      R = c(),\n      O = (t, s, i, o) => {\n        v(T, s), v(I, i), v(L, o), h(T, T, I), e(T, T), h(L, L, I), e(L, L), r(R, T, L), e(R, R);\n        const n = l(R, I);\n        M(t, R, n);\n      };\n    O(0, 0, 1, 2), O(1, 1, 0, 4), O(2, 1, 5, 2), O(3, 3, 2, 6), O(4, 4, 0, 3), O(5, 4, 6, 5);\n    const A = 1,\n      P = (t, e, s, i) => {\n        const o = 4 * t;\n        return x[o + 0] * e + x[o + 1] * s + x[o + 2] * i - x[o + 3];\n      },\n      V = (t, e, s, i) => P(t, e, s, i) >= -A,\n      C = (t, e) => V(t, e[0], e[1], e[2]),\n      N = 2 ** this.lij[0] > 2 * this.lij[1],\n      U = (t, e, i) => Math.sqrt(y(t, e, i, o[0], o[1], o[2])) < s,\n      k = t => U(t[0], t[1], t[2]),\n      F = (t, e) => U(t[e + 0], t[e + 1], t[e + 2]),\n      w = this.extentInRadians,\n      q = .5 * (w[0] + w[2]),\n      G = w[1],\n      z = w[3],\n      W = c(),\n      J = c();\n    B(W, q, z, f), B(J, q, G, f);\n    const K = N ? \"Upper\" : \"Lower\";\n    let Q = !0;\n    for (let e = 0; e < 6; ++e) {\n      for (let t = 0; t < 8; ++t) {\n        const s = 3 * t,\n          i = V(e, _[s + 0], _[s + 1], _[s + 2]);\n        Q && (Q = i), j(i, `Tile[${this.lij}] Convex hull point ${t} outside of plane ${e}`);\n      }\n      j(C(e, J), `Tile[${this.lij}] (${K}) bottom mid outside of plane ${e}`), j(C(e, W), `Tile[${this.lij}] (${K}) top mid outside of plane ${e}`);\n    }\n    j(Q, \"Not all convex hull points are inside  convex hull polyhedron\"), j(k(J), `Tile[${this.lij}] (${K}) bottom mid outside of bounding sphere`), j(k(W), `Tile[${this.lij}] (${K}) top mid outside of bounding sphere`);\n    for (let e = 0; e < 8; ++e) {\n      const t = F(_, 3 * e);\n      j(t, `Tile[${this.lij}] Convex hull point ${e} outside of bounding sphere`);\n    }\n    for (let e = 0; e < 6; ++e) for (let t = 0; t < 8; ++t) {\n      const s = 3 * t;\n      V(e, _[s + 0], _[s + 1], _[s + 2]) || console.error(`Tile[${this.lij}] Convex hull point ${t} outside of plane ${e}`);\n    }\n    const X = this.extentInRadians,\n      Y = Math.max(X[2] - X[0], X[3] - X[1]),\n      Z = Math.round(Y * d),\n      tt = this.renderData;\n    if (tt) {\n      const t = tt.geometryInfo,\n        e = tt.localOrigin,\n        r = t.vertexAttributes?.position;\n      if (!r) return;\n      const l = r.count,\n        h = c(),\n        f = t.numVerticesPerSide - 2,\n        _ = f * f,\n        v = tt.geometryState.neighborData,\n        x = v.edgeResolutions.reduce((t, e) => t + e + 1, 0);\n      for (let c = 0; c < l; ++c) {\n        const t = c < _,\n          l = !t && c < _ + x;\n        let M = !1,\n          b = -1;\n        if (l) {\n          let t = _;\n          for (let e = 0; e < 4; ++e) {\n            const s = v.edgeResolutions[e];\n            if (c === t || c === t + s - 1) {\n              M = !0;\n              break;\n            }\n            if (t += s, c < t) {\n              b = e;\n              break;\n            }\n          }\n        }\n        const j = b,\n          S = M,\n          T = l && !S,\n          E = l ? v.edgePeerNeighbors[j] : null,\n          D = l && E && H(this, E) > 0,\n          I = t ? \"internal\" : T ? \"edge\" : S ? \"corner\" : \"pole\";\n        r.getVec(c, u), i(h, u, e);\n        const L = n(h) - d;\n        let R = 0,\n          y = !1;\n        const B = p[0] - L,\n          O = L - p[1],\n          A = B > m,\n          C = O > m,\n          N = A || C,\n          U = `Tile[${this.lij}].vertex[${c}]:${I}` + (A ? \"(below)\" : C ? \"(above)\" : \"\") + (D ? \"(Neighbor)\" : \"\");\n        {\n          const t = a(h, o);\n          if (t >= s + g) {\n            const e = t - s;\n            N || (console.error(`${U} is out of the bounding sphere by ${e.toFixed(0)} / ${s.toFixed(0)}[tol=${g}] h=${L.toFixed(0)} / [${p[0].toFixed(0)}..${p[1].toFixed(0)}] (${(e / s).toFixed(0)})`), y = !0);\n          }\n        }\n        for (let e = 0; e < 6; ++e) if (!V(e, h[0], h[1], h[2])) {\n          const t = P(e, h[0], h[1], h[2]),\n            i = c % f,\n            o = (c - i) / f;\n          0 === e && B || 5 === e && O || (console.error(`${U} (${i},${o})|${f}] is out of the bounding trapezoid plane ${e} h=${Math.round(L)} / [${Math.round(p[0])}..${Math.round(p[1])}] dist=${Math.round(t)} radii = ${Math.round(s)}/${Math.round($)}} : maxL = ${Z}`), ++R);\n        }\n        if (y || R > 0) break;\n      }\n    }\n  }\n}\nconst L = [128, 64, 64, 32, 16, 8, 8, 4];\nfunction R(t, e, s) {\n  return y(t[0], t[1], t[2], e[s + 0], e[s + 1], e[s + 2]);\n}\nfunction y(t, e, s, i, o, n) {\n  const r = i - t,\n    l = o - e,\n    a = n - s;\n  return r * r + l * l + a * a;\n}\nconst B = (t, e, s, i) => {\n    const o = Math.cos(e),\n      n = Math.sin(e),\n      r = Math.cos(s),\n      l = Math.sin(s);\n    t[0] = i * r * o, t[1] = i * r * n, t[2] = i * l;\n  },\n  O = [0, 0, 1],\n  A = c(),\n  P = c();\nexport { I as SphericalPatch };","map":{"version":3,"names":["lerp","t","n","e","s","a","i","g","o","u","f","r","l","j","w","h","d","c","lonLatToSphericalPCPF","intersectsSphere","p","NumPlanes","PlaneIndex","m","TileFrustumVisibility","$","PatchType","_","createSphericalGlobePatch","v","updateCornerSpherical","x","updateEdgesAndCornersSpherical","M","ENABLE_TERRAIN_INTERNAL_CHECKS","b","internalAssert","almostEquals","S","Tile","T","CenterPosition","E","compareTilesByLij","H","newDoubleArray","D","I","convexHull","_convexHull","constructor","Array","_boundingSphere","init","ellipsoid","radius","extentInRadians","Math","min","abs","_edgeLen","cos","_edgeLen2","_curvatureHeight","sqrt","centerAtSeaLevel","up","updateRadiusAndCenter","_updateBoundingVolumes","_center","lij","MIDDLE","TOP","BOTTOM","elevationBounds","_updateCenter","max","R","_calculateFrustumVisibilityStatus","OUTSIDE","INTERSECTS","surface","view","state","camera","near","NUM","NEAR","INSIDE","computeElevationBounds","createGeometry","renderData","_getPatchType","setMemoryDirty","_updateConvexHull","_updateBoundingSphere","_checkBVs","level","B","A","P","isWebMercator","HAS_NORTH_POLE","HAS_SOUTH_POLE","PI","L","y","V","C","N","U","k","F","O","HAS_BOTH_POLES","REGULAR","intersectsRay","getDefaultVerticesPerSide","length","updateCornerElevations","updateEdgeElevations","q","G","z","W","J","K","Q","console","error","X","Y","Z","round","tt","geometryInfo","localOrigin","vertexAttributes","position","count","numVerticesPerSide","geometryState","neighborData","edgeResolutions","reduce","edgePeerNeighbors","getVec","toFixed","sin","SphericalPatch"],"sources":["C:/code-challenge-react/frontend/node_modules/@arcgis/core/views/3d/terrain/SphericalPatch.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport{lerp as t}from\"../../../core/mathUtils.js\";import{n as e,s,a as i,g as o,u as n,f as r,e as l,j as a,w as h}from\"../../../chunks/vec3.js\";import{d as u,c}from\"../../../chunks/vec3f64.js\";import{lonLatToSphericalPCPF as d}from\"../../../geometry/projection.js\";import{intersectsSphere as p,NumPlanes as f,PlaneIndex as m}from\"../../../geometry/support/frustum.js\";import{c as g}from\"../../../chunks/sphere.js\";import{TileFrustumVisibility as $,PatchType as _}from\"./interfaces.js\";import{createSphericalGlobePatch as v,updateCornerSpherical as x,updateEdgesAndCornersSpherical as M}from\"./PatchGeometryFactory.js\";import{ENABLE_TERRAIN_INTERNAL_CHECKS as b,internalAssert as j,almostEquals as S}from\"./terrainUtils.js\";import{Tile as T,CenterPosition as E}from\"./Tile.js\";import{compareTilesByLij as H}from\"./tileUtils.js\";import{newDoubleArray as D}from\"../webgl-engine/lib/DoubleArray.js\";class I extends T{get convexHull(){return this._convexHull}constructor(t,e,s){super(),this._convexHull=new Array(24),this._boundingSphere=g(),void 0!==t&&this.init(t,e,s)}init(s,i,o){super.init(s,i,o);const n=this.ellipsoid.radius,r=this.extentInRadians[0],l=this.extentInRadians[1],a=this.extentInRadians[2],h=this.extentInRadians[3],c=s[0],p=t(l,h,.5),f=t(r,a,.5),m=0===c?0:Math.min(Math.abs(l),Math.abs(h));this._edgeLen=(a-r)*Math.cos(m)*n,this._edgeLen2=this._edgeLen*this._edgeLen,this._curvatureHeight=n-Math.sqrt(n*n-this._edgeLen2/4),d(this.centerAtSeaLevel,f,p,this.ellipsoid.radius);const g=u(this.centerAtSeaLevel);e(g,g),this.up=g,this.updateRadiusAndCenter()}updateRadiusAndCenter(){this._updateBoundingVolumes();const t=this._center;if(0===this.lij[0])s(t[E.MIDDLE],0,0,0),s(t[E.TOP],0,0,0),s(t[E.BOTTOM],0,0,0),t[E.MIDDLE][3]=this.ellipsoid.radius+this.elevationBounds[1];else{this._updateCenter();const e=t[E.MIDDLE],s=this.convexHull;let i=0;for(let t=0;t<8;++t)i=Math.max(i,R(e,s,3*t));t[E.MIDDLE][3]=Math.sqrt(i)}}_calculateFrustumVisibilityStatus(t){if(!p(t,this._boundingSphere))return $.OUTSIDE;if(this.lij[0]<10)return $.INTERSECTS;const e=this.convexHull,s=this.surface.view.state.camera.near;let i=!0;for(let o=0;o<f.NUM;o++){const n=o===m.NEAR,r=t[o],l=r[0],a=r[1],h=r[2],u=r[3]-(n?s:0);let c=!1;for(let t=0;t<8;++t){const s=3*t;if(l*e[s+0]+a*e[s+1]+h*e[s+2]+u<0){if(c=!0,!i)break}else i=!1}if(!c)return $.OUTSIDE}return i?$.INSIDE:$.INTERSECTS}computeElevationBounds(){super.computeElevationBounds(),this._updateBoundingVolumes()}createGeometry(){v(this.renderData,this._getPatchType()),this._updateBoundingVolumes(),this.setMemoryDirty()}_updateBoundingVolumes(){this._updateConvexHull(),this._updateBoundingSphere(),b&&this._checkBVs()}_updateBoundingSphere(){const t=this._boundingSphere,e=t,r=this.elevationBounds,l=this.ellipsoid.radius,a=r[1];if(0===this.level)s(e,0,0,0),t[3]=l+a;else{const s=this.extentInRadians,a=.5*(s[0]+s[2]),h=s[1],u=s[3];B(A,a,h,l),B(P,a,u,l),i(e,A,P);const c=.5*(r[0]+r[1]);o(e,e,(l+c)/n(e));const d=this.convexHull;let p=0;const f=(t,e)=>{const s=t[0]-d[3*e+0],i=t[1]-d[3*e+1],o=t[2]-d[3*e+2];return Math.sqrt(s*s+i*i+o*o)};for(let t=0;t<8;++t){const s=f(e,t);p=Math.max(p,s)}const m=p;t[3]=m+2}}_updateConvexHull(){const t=this.extentInRadians,s=this.ellipsoid.radius;if(0===this.level)return;const a=this.elevationBounds,u=this._getPatchType(),d=this.surface.isWebMercator,p=d&&u===_.HAS_NORTH_POLE,f=d&&u===_.HAS_SOUTH_POLE,m=f||p,g=Math.PI/2,$=t[0],v=t[2],x=f?-g:t[1],M=p?g:t[3],b=.5*($+v),T=a[0],E=s+(m?Math.min(0,T-1):T),H=(t,e,s)=>B(t,e,s,E),D=c(),I=c(),L=c(),R=c();H(D,$,x),H(I,$,M),H(L,v,M),H(R,v,x);const y=(t,e)=>{for(let s=0;s<3;++s)this._convexHull[3*e+s]=t[s]};y(D,0),y(I,1),y(L,2),y(R,3);const A=a[1],P=s+(m?Math.max(0,A+1):A),V=c(),C=c(),N=c();B(C,b,M,E),B(N,b,x,E),i(V,C,N),e(V,V);const U=c(),k=c(),F=(t,s)=>{h(k,t,s),e(k,k);const n=-l(t,U)/l(k,U);j(n>=0),o(k,k,n),i(t,t,k)};if(2**this.lij[0]>2*this.lij[1]){const t=N,s=c();r(s,O,t),e(s,s),r(U,t,s),e(U,U),j(S(l(U,t)/n(t),0)),F(D,I),F(R,L),y(D,0),y(R,3)}else if(2**this.lij[0]!==2*this.lij[1]){const t=C,s=c();r(s,O,t),e(s,s),r(U,s,t),e(U,U),F(I,D),F(L,R),y(I,1),y(L,2)}const w=(t,e)=>{const s=P/l(e,V);for(let i=0;i<3;++i)this._convexHull[3*t+i]=e[i]*s};w(4,D),w(5,I),w(6,L),w(7,R)}_getPatchType(){const t=this.lij[1],e=0===t,s=t===(1<<this.level)-1;return e?s?_.HAS_BOTH_POLES:_.HAS_NORTH_POLE:s?_.HAS_SOUTH_POLE:_.REGULAR}intersectsRay(t,e,s,i){const o=this._boundingSphere,n=o[3]+s,r=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],l=o[0]-t[0],a=o[1]-t[1],h=o[2]-t[2],u=(l*e[0]+a*e[1]+h*e[2])/r,c=e[0]*u-l,d=e[1]*u-a,p=e[2]*u-h;return c*c+d*d+p*p<n*n}getDefaultVerticesPerSide(){return this.level<L.length?L[this.level]+1:2}updateCornerElevations(){x(this.renderData),this._updateBoundingVolumes()}updateEdgeElevations(){M(this.renderData),this._updateBoundingVolumes()}_checkBVs(){if(!b)return;if(this.level<=2)return;const t=this._boundingSphere,s=t[3],o=t,u=c(),d=this.ellipsoid.radius,p=this.elevationBounds;p[1],p[0];const f=d+p[0],m=1,g=0,$=this._center[E.MIDDLE][3],_=this.convexHull,v=(t,e)=>{for(let s=0;s<3;++s)t[s]=_[3*e+s]};{const t=c(),s=c(),i=c(),o=c(),n=c(),a=(a,u,c,d)=>{v(s,a),v(i,u),v(o,c),h(s,s,i),h(o,o,i),r(t,s,o),e(t,t);const p=l(t,i);v(n,d);const f=l(t,n),m=Math.abs(f-p);j(S(m,0),`Non coplanar ${a},${u},${c},${d} diff = ${m}`)};a(0,1,2,3),a(4,5,6,7),a(0,1,4,5),a(1,2,5,6),a(2,3,6,7),a(3,0,7,4)}const x=D(24),M=(t,e,s)=>{const i=4*t;for(let o=0;o<3;++o)x[i+o]=e[o];x[i+3]=s},T=c(),I=c(),L=c(),R=c(),O=(t,s,i,o)=>{v(T,s),v(I,i),v(L,o),h(T,T,I),e(T,T),h(L,L,I),e(L,L),r(R,T,L),e(R,R);const n=l(R,I);M(t,R,n)};O(0,0,1,2),O(1,1,0,4),O(2,1,5,2),O(3,3,2,6),O(4,4,0,3),O(5,4,6,5);const A=1,P=(t,e,s,i)=>{const o=4*t;return x[o+0]*e+x[o+1]*s+x[o+2]*i-x[o+3]},V=(t,e,s,i)=>P(t,e,s,i)>=-A,C=(t,e)=>V(t,e[0],e[1],e[2]),N=2**this.lij[0]>2*this.lij[1],U=(t,e,i)=>Math.sqrt(y(t,e,i,o[0],o[1],o[2]))<s,k=t=>U(t[0],t[1],t[2]),F=(t,e)=>U(t[e+0],t[e+1],t[e+2]),w=this.extentInRadians,q=.5*(w[0]+w[2]),G=w[1],z=w[3],W=c(),J=c();B(W,q,z,f),B(J,q,G,f);const K=N?\"Upper\":\"Lower\";let Q=!0;for(let e=0;e<6;++e){for(let t=0;t<8;++t){const s=3*t,i=V(e,_[s+0],_[s+1],_[s+2]);Q&&(Q=i),j(i,`Tile[${this.lij}] Convex hull point ${t} outside of plane ${e}`)}j(C(e,J),`Tile[${this.lij}] (${K}) bottom mid outside of plane ${e}`),j(C(e,W),`Tile[${this.lij}] (${K}) top mid outside of plane ${e}`)}j(Q,\"Not all convex hull points are inside  convex hull polyhedron\"),j(k(J),`Tile[${this.lij}] (${K}) bottom mid outside of bounding sphere`),j(k(W),`Tile[${this.lij}] (${K}) top mid outside of bounding sphere`);for(let e=0;e<8;++e){const t=F(_,3*e);j(t,`Tile[${this.lij}] Convex hull point ${e} outside of bounding sphere`)}for(let e=0;e<6;++e)for(let t=0;t<8;++t){const s=3*t;V(e,_[s+0],_[s+1],_[s+2])||console.error(`Tile[${this.lij}] Convex hull point ${t} outside of plane ${e}`)}const X=this.extentInRadians,Y=Math.max(X[2]-X[0],X[3]-X[1]),Z=Math.round(Y*d),tt=this.renderData;if(tt){const t=tt.geometryInfo,e=tt.localOrigin,r=t.vertexAttributes?.position;if(!r)return;const l=r.count,h=c(),f=t.numVerticesPerSide-2,_=f*f,v=tt.geometryState.neighborData,x=v.edgeResolutions.reduce(((t,e)=>t+e+1),0);for(let c=0;c<l;++c){const t=c<_,l=!t&&c<_+x;let M=!1,b=-1;if(l){let t=_;for(let e=0;e<4;++e){const s=v.edgeResolutions[e];if(c===t||c===t+s-1){M=!0;break}if(t+=s,c<t){b=e;break}}}const j=b,S=M,T=l&&!S,E=l?v.edgePeerNeighbors[j]:null,D=l&&E&&H(this,E)>0,I=t?\"internal\":T?\"edge\":S?\"corner\":\"pole\";r.getVec(c,u),i(h,u,e);const L=n(h)-d;let R=0,y=!1;const B=p[0]-L,O=L-p[1],A=B>m,C=O>m,N=A||C,U=`Tile[${this.lij}].vertex[${c}]:${I}`+(A?\"(below)\":C?\"(above)\":\"\")+(D?\"(Neighbor)\":\"\");{const t=a(h,o);if(t>=s+g){const e=t-s;N||(console.error(`${U} is out of the bounding sphere by ${e.toFixed(0)} / ${s.toFixed(0)}[tol=${g}] h=${L.toFixed(0)} / [${p[0].toFixed(0)}..${p[1].toFixed(0)}] (${(e/s).toFixed(0)})`),y=!0)}}for(let e=0;e<6;++e)if(!V(e,h[0],h[1],h[2])){const t=P(e,h[0],h[1],h[2]),i=c%f,o=(c-i)/f;0===e&&B||5===e&&O||(console.error(`${U} (${i},${o})|${f}] is out of the bounding trapezoid plane ${e} h=${Math.round(L)} / [${Math.round(p[0])}..${Math.round(p[1])}] dist=${Math.round(t)} radii = ${Math.round(s)}/${Math.round($)}} : maxL = ${Z}`),++R)}if(y||R>0)break}}}}const L=[128,64,64,32,16,8,8,4];function R(t,e,s){return y(t[0],t[1],t[2],e[s+0],e[s+1],e[s+2])}function y(t,e,s,i,o,n){const r=i-t,l=o-e,a=n-s;return r*r+l*l+a*a}const B=(t,e,s,i)=>{const o=Math.cos(e),n=Math.sin(e),r=Math.cos(s),l=Math.sin(s);t[0]=i*r*o,t[1]=i*r*n,t[2]=i*l},O=[0,0,1],A=c(),P=c();export{I as SphericalPatch};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}