{"ast":null,"code":"/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { processParams } from \"./process-params.js\";\n/**\n * Encodes keys and parameters for use in a URL's query string.\n *\n * @param key Parameter's key\n * @param value Parameter's value\n * @returns Query string with key and value pairs separated by \"&\"\n */\nexport function encodeParam(key, value) {\n  // For array of arrays, repeat key=value for each element of containing array\n  if (Array.isArray(value) && value[0] && Array.isArray(value[0])) {\n    return value.map(function (arrayElem) {\n      return encodeParam(key, arrayElem);\n    }).join(\"&\");\n  }\n  return encodeURIComponent(key) + \"=\" + encodeURIComponent(value);\n}\n/**\n * Encodes the passed object as a query string.\n *\n * @param params An object to be encoded.\n * @returns An encoded query string.\n */\nexport function encodeQueryString(params) {\n  var newParams = processParams(params);\n  return Object.keys(newParams).map(function (key) {\n    return encodeParam(key, newParams[key]);\n  }).join(\"&\");\n}","map":{"version":3,"names":["processParams","encodeParam","key","value","Array","isArray","map","arrayElem","join","encodeURIComponent","encodeQueryString","params","newParams","Object","keys"],"sources":["C:\\code-challenge-react\\node_modules\\@esri\\arcgis-rest-request\\src\\utils\\encode-query-string.ts"],"sourcesContent":["/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { processParams } from \"./process-params.js\";\n\n/**\n * Encodes keys and parameters for use in a URL's query string.\n *\n * @param key Parameter's key\n * @param value Parameter's value\n * @returns Query string with key and value pairs separated by \"&\"\n */\nexport function encodeParam(key: string, value: any): string {\n  // For array of arrays, repeat key=value for each element of containing array\n  if (Array.isArray(value) && value[0] && Array.isArray(value[0])) {\n    return value\n      .map((arrayElem: string) => encodeParam(key, arrayElem))\n      .join(\"&\");\n  }\n\n  return encodeURIComponent(key) + \"=\" + encodeURIComponent(value);\n}\n\n/**\n * Encodes the passed object as a query string.\n *\n * @param params An object to be encoded.\n * @returns An encoded query string.\n */\nexport function encodeQueryString(params: any): string {\n  const newParams = processParams(params);\n  return Object.keys(newParams)\n    .map((key: any) => {\n      return encodeParam(key, newParams[key]);\n    })\n    .join(\"&\");\n}\n"],"mappings":"AAAA;;AAGA,SAASA,aAAa,QAAQ,qBAAqB;AAEnD;;;;;;;AAOA,OAAM,SAAUC,WAAWA,CAACC,GAAW,EAAEC,KAAU;EACjD;EACA,IAAIC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,IAAIC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;IAC/D,OAAOA,KAAK,CACTG,GAAG,CAAC,UAACC,SAAiB;MAAA,OAAKN,WAAW,CAACC,GAAG,EAAEK,SAAS,CAAC;IAAA,EAAC,CACvDC,IAAI,CAAC,GAAG,CAAC;;EAGd,OAAOC,kBAAkB,CAACP,GAAG,CAAC,GAAG,GAAG,GAAGO,kBAAkB,CAACN,KAAK,CAAC;AAClE;AAEA;;;;;;AAMA,OAAM,SAAUO,iBAAiBA,CAACC,MAAW;EAC3C,IAAMC,SAAS,GAAGZ,aAAa,CAACW,MAAM,CAAC;EACvC,OAAOE,MAAM,CAACC,IAAI,CAACF,SAAS,CAAC,CAC1BN,GAAG,CAAC,UAACJ,GAAQ,EAAI;IAChB,OAAOD,WAAW,CAACC,GAAG,EAAEU,SAAS,CAACV,GAAG,CAAC,CAAC;EACzC,CAAC,CAAC,CACDM,IAAI,CAAC,GAAG,CAAC;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}