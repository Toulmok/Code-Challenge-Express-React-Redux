{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport t from \"../../../core/Error.js\";\nimport e from \"./CloudRaster.js\";\nimport r from \"./ImageAuxRaster.js\";\nimport s from \"./ImageServerRaster.js\";\nimport o from \"./MRFRaster.js\";\nimport a from \"./TIFFRaster.js\";\nconst c = new Map();\nc.set(\"CRF\", {\n  desc: \"Cloud Raster Format\",\n  constructor: e\n}), c.set(\"MRF\", {\n  desc: \"Meta Raster Format\",\n  constructor: o\n}), c.set(\"TIFF\", {\n  desc: \"GeoTIFF\",\n  constructor: a\n}), c.set(\"RasterTileServer\", {\n  desc: \"Raster Tile Server\",\n  constructor: s\n}), c.set(\"JPG\", {\n  desc: \"JPG Raster Format\",\n  constructor: r\n}), c.set(\"PNG\", {\n  desc: \"PNG Raster Format\",\n  constructor: r\n}), c.set(\"GIF\", {\n  desc: \"GIF Raster Format\",\n  constructor: r\n}), c.set(\"BMP\", {\n  desc: \"BMP Raster Format\",\n  constructor: r\n});\nclass n {\n  static get supportedFormats() {\n    const t = new Set();\n    return c.forEach((e, r) => t.add(r)), t;\n  }\n  static async open(e) {\n    const {\n      url: r,\n      ioConfig: s,\n      sourceJSON: o\n    } = e;\n    let a = e.datasetFormat;\n    null == a && r.lastIndexOf(\".\") && (a = r.slice(r.lastIndexOf(\".\") + 1).toUpperCase()), \"OVR\" === a || \"TIF\" === a ? a = \"TIFF\" : \"JPG\" !== a && \"JPEG\" !== a && \"JFIF\" !== a || (a = \"JPG\"), r.toLowerCase().includes(\"/imageserver\") && !r.toLowerCase().includes(\"/wcsserver\") && (a = \"RasterTileServer\");\n    const n = {\n      url: r,\n      sourceJSON: o,\n      datasetFormat: a,\n      ioConfig: s ?? {\n        bandIds: null,\n        sampling: null\n      }\n    };\n    let l, i;\n    if (a && this.supportedFormats.has(a)) {\n      if (\"CRF\" === a && !s?.enableCRF) throw new t(\"rasterfactory:open\", `cannot open raster: ${r}`);\n      return l = c.get(a).constructor, i = new l(n), await i.open({\n        signal: e.signal\n      }), i;\n    }\n    if (a) throw new t(\"rasterfactory:open\", \"not a supported format \" + a);\n    const u = Array.from(c.keys());\n    let F = 0;\n    const m = () => (a = u[F++], a && (\"CRF\" !== a || s?.enableCRF) ? (l = c.get(a).constructor, i = new l(n), i.open({\n      signal: e.signal\n    }).then(() => i).catch(() => m())) : null);\n    return m();\n  }\n  static register(t, e, r) {\n    c.has(t.toUpperCase()) || c.set(t.toUpperCase(), {\n      desc: e,\n      constructor: r\n    });\n  }\n}\nexport { n as default };","map":{"version":3,"names":["t","e","r","s","o","a","c","Map","set","desc","constructor","n","supportedFormats","Set","forEach","add","open","url","ioConfig","sourceJSON","datasetFormat","lastIndexOf","slice","toUpperCase","toLowerCase","includes","bandIds","sampling","l","i","has","enableCRF","get","signal","u","Array","from","keys","F","m","then","catch","register","default"],"sources":["C:/code-challenge-react/client/node_modules/@arcgis/core/layers/support/rasterDatasets/RasterFactory.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport t from\"../../../core/Error.js\";import e from\"./CloudRaster.js\";import r from\"./ImageAuxRaster.js\";import s from\"./ImageServerRaster.js\";import o from\"./MRFRaster.js\";import a from\"./TIFFRaster.js\";const c=new Map;c.set(\"CRF\",{desc:\"Cloud Raster Format\",constructor:e}),c.set(\"MRF\",{desc:\"Meta Raster Format\",constructor:o}),c.set(\"TIFF\",{desc:\"GeoTIFF\",constructor:a}),c.set(\"RasterTileServer\",{desc:\"Raster Tile Server\",constructor:s}),c.set(\"JPG\",{desc:\"JPG Raster Format\",constructor:r}),c.set(\"PNG\",{desc:\"PNG Raster Format\",constructor:r}),c.set(\"GIF\",{desc:\"GIF Raster Format\",constructor:r}),c.set(\"BMP\",{desc:\"BMP Raster Format\",constructor:r});class n{static get supportedFormats(){const t=new Set;return c.forEach(((e,r)=>t.add(r))),t}static async open(e){const{url:r,ioConfig:s,sourceJSON:o}=e;let a=e.datasetFormat;null==a&&r.lastIndexOf(\".\")&&(a=r.slice(r.lastIndexOf(\".\")+1).toUpperCase()),\"OVR\"===a||\"TIF\"===a?a=\"TIFF\":\"JPG\"!==a&&\"JPEG\"!==a&&\"JFIF\"!==a||(a=\"JPG\"),r.toLowerCase().includes(\"/imageserver\")&&!r.toLowerCase().includes(\"/wcsserver\")&&(a=\"RasterTileServer\");const n={url:r,sourceJSON:o,datasetFormat:a,ioConfig:s??{bandIds:null,sampling:null}};let l,i;if(a&&this.supportedFormats.has(a)){if(\"CRF\"===a&&!s?.enableCRF)throw new t(\"rasterfactory:open\",`cannot open raster: ${r}`);return l=c.get(a).constructor,i=new l(n),await i.open({signal:e.signal}),i}if(a)throw new t(\"rasterfactory:open\",\"not a supported format \"+a);const u=Array.from(c.keys());let F=0;const m=()=>(a=u[F++],a&&(\"CRF\"!==a||s?.enableCRF)?(l=c.get(a).constructor,i=new l(n),i.open({signal:e.signal}).then((()=>i)).catch((()=>m()))):null);return m()}static register(t,e,r){c.has(t.toUpperCase())||c.set(t.toUpperCase(),{desc:e,constructor:r})}}export{n as default};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}