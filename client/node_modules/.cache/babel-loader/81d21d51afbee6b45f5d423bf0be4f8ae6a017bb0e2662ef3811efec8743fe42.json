{"ast":null,"code":"import _createClass from \"C:/code-challenge-react/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/code-challenge-react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _assertThisInitialized from \"C:/code-challenge-react/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/code-challenge-react/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/code-challenge-react/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"C:/code-challenge-react/client/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\n/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * This represents a generic error from an ArcGIS endpoint. There will be details about the error in the {@linkcode ArcGISRequestError.message},  {@linkcode ArcGISRequestError.originalMessage} properties on the error. You\n * can also access the original server response at  {@linkcode ArcGISRequestError.response} which may have additional details.\n *\n * ```js\n * request(someUrl, someOptions).catch(e => {\n *   if(e.name === \"ArcGISRequestError\") {\n *     console.log(\"Something went wrong with the request:\", e);\n *     console.log(\"Full server response\", e.response);\n *   }\n * })\n * ```\n */\nexport var ArcGISRequestError = /*#__PURE__*/function (_Error) {\n  _inherits(ArcGISRequestError, _Error);\n  var _super = _createSuper(ArcGISRequestError);\n  /**\n   * Create a new `ArcGISRequestError`  object.\n   *\n   * @param message - The error message from the API\n   * @param code - The error code from the API\n   * @param response - The original response from the API that caused the error\n   * @param url - The original url of the request\n   * @param options - The original options and parameters of the request\n   */\n  function ArcGISRequestError(message, code, response, url, options) {\n    var _this;\n    _classCallCheck(this, ArcGISRequestError);\n    // 'Error' breaks prototype chain here\n    _this = _super.call(this, message);\n    // restore prototype chain, see https://stackoverflow.com/questions/41102060/typescript-extending-error-class\n    // we don't need to check for Object.setPrototypeOf as in the answers because we are ES2017 now.\n    // Also see https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    // and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#custom_error_types\n    var actualProto = (this instanceof ArcGISRequestError ? this.constructor : void 0).prototype;\n    Object.setPrototypeOf(_assertThisInitialized(_this), actualProto);\n    message = message || \"UNKNOWN_ERROR\";\n    code = code || \"UNKNOWN_ERROR_CODE\";\n    _this.name = \"ArcGISRequestError\";\n    _this.message = code === \"UNKNOWN_ERROR_CODE\" ? message : \"\".concat(code, \": \").concat(message);\n    _this.originalMessage = message;\n    _this.code = code;\n    _this.response = response;\n    _this.url = url;\n    _this.options = options;\n    return _this;\n  }\n  return _createClass(ArcGISRequestError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));","map":{"version":3,"names":["ArcGISRequestError","_Error","_inherits","_super","_createSuper","message","code","response","url","options","_this","_classCallCheck","call","actualProto","constructor","prototype","Object","setPrototypeOf","_assertThisInitialized","name","concat","originalMessage","_createClass","_wrapNativeSuper","Error"],"sources":["C:\\code-challenge-react\\node_modules\\@esri\\arcgis-rest-request\\src\\utils\\ArcGISRequestError.ts"],"sourcesContent":["/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IRequestOptions } from \"./IRequestOptions.js\";\n\n/**\n * This represents a generic error from an ArcGIS endpoint. There will be details about the error in the {@linkcode ArcGISRequestError.message},  {@linkcode ArcGISRequestError.originalMessage} properties on the error. You\n * can also access the original server response at  {@linkcode ArcGISRequestError.response} which may have additional details.\n *\n * ```js\n * request(someUrl, someOptions).catch(e => {\n *   if(e.name === \"ArcGISRequestError\") {\n *     console.log(\"Something went wrong with the request:\", e);\n *     console.log(\"Full server response\", e.response);\n *   }\n * })\n * ```\n */\nexport class ArcGISRequestError extends Error {\n  /**\n   * The name of this error. Will always be `\"ArcGISRequestError\"` to conform with the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class.\n   */\n  public name: string;\n\n  /**\n   * Formatted error message. See the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class for more details.\n   */\n  public message: string;\n\n  /**\n   * The errror message return from the request.\n   */\n  public originalMessage: string;\n\n  /**\n   * The error code returned from the request.\n   */\n  public code: string | number;\n\n  /**\n   * The original JSON response the caused the error.\n   */\n  public response: any;\n\n  /**\n   * The URL of the original request that caused the error\n   */\n  public url: string;\n\n  /**\n   * The options of the original request that caused the error\n   */\n  public options: IRequestOptions;\n\n  /**\n   * Create a new `ArcGISRequestError`  object.\n   *\n   * @param message - The error message from the API\n   * @param code - The error code from the API\n   * @param response - The original response from the API that caused the error\n   * @param url - The original url of the request\n   * @param options - The original options and parameters of the request\n   */\n  constructor(\n    message?: string,\n    code?: string | number,\n    response?: any,\n    url?: string,\n    options?: IRequestOptions\n  ) {\n    // 'Error' breaks prototype chain here\n    super(message);\n\n    // restore prototype chain, see https://stackoverflow.com/questions/41102060/typescript-extending-error-class\n    // we don't need to check for Object.setPrototypeOf as in the answers because we are ES2017 now.\n    // Also see https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    // and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#custom_error_types\n    const actualProto = new.target.prototype;\n    Object.setPrototypeOf(this, actualProto);\n\n    message = message || \"UNKNOWN_ERROR\";\n    code = code || \"UNKNOWN_ERROR_CODE\";\n\n    this.name = \"ArcGISRequestError\";\n    this.message =\n      code === \"UNKNOWN_ERROR_CODE\" ? message : `${code}: ${message}`;\n    this.originalMessage = message;\n    this.code = code;\n    this.response = response;\n    this.url = url;\n    this.options = options;\n  }\n}\n"],"mappings":";;;;;;AAAA;;AAKA;;;;;;;;;;;;;AAaA,WAAaA,kBAAmB,0BAAAC,MAAA;EAAAC,SAAA,CAAAF,kBAAA,EAAAC,MAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,kBAAA;EAoC9B;;;;;;;;;EASA,SAAAA,mBACEK,OAAgB,EAChBC,IAAsB,EACtBC,QAAc,EACdC,GAAY,EACZC,OAAyB;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAX,kBAAA;IAEzB;IACAU,KAAA,GAAAP,MAAA,CAAAS,IAAA,OAAMP,OAAO;IAEb;IACA;IACA;IACA;IACA,IAAMQ,WAAW,GAAG,iBAAAb,kBAAA,QAAAc,WAAA,WAAWC,SAAS;IACxCC,MAAM,CAACC,cAAc,CAAAC,sBAAA,CAAAR,KAAA,GAAOG,WAAW,CAAC;IAExCR,OAAO,GAAGA,OAAO,IAAI,eAAe;IACpCC,IAAI,GAAGA,IAAI,IAAI,oBAAoB;IAEnCI,KAAA,CAAKS,IAAI,GAAG,oBAAoB;IAChCT,KAAA,CAAKL,OAAO,GACVC,IAAI,KAAK,oBAAoB,GAAGD,OAAO,MAAAe,MAAA,CAAMd,IAAI,QAAAc,MAAA,CAAKf,OAAO,CAAE;IACjEK,KAAA,CAAKW,eAAe,GAAGhB,OAAO;IAC9BK,KAAA,CAAKJ,IAAI,GAAGA,IAAI;IAChBI,KAAA,CAAKH,QAAQ,GAAGA,QAAQ;IACxBG,KAAA,CAAKF,GAAG,GAAGA,GAAG;IACdE,KAAA,CAAKD,OAAO,GAAGA,OAAO;IAAC,OAAAC,KAAA;EACzB;EAAC,OAAAY,YAAA,CAAAtB,kBAAA;AAAA,gBAAAuB,gBAAA,CAzEqCC,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}