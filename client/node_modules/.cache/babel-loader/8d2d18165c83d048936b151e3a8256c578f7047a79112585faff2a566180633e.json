{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport { _ as e } from \"../../../chunks/tslib.es6.js\";\nimport \"../../../geometry.js\";\nimport t from \"../../../core/Error.js\";\nimport { isNone as i, assertIsSome as s, isSome as r, unwrap as a } from \"../../../core/maybe.js\";\nimport { urlToObject as l } from \"../../../core/urlUtils.js\";\nimport { property as o } from \"../../../core/accessorSupport/decorators/property.js\";\nimport \"../../../core/accessorSupport/ensureType.js\";\nimport \"../../../core/arrayUtils.js\";\nimport { subclass as n } from \"../../../core/accessorSupport/decorators/subclass.js\";\nimport c from \"../RasterInfo.js\";\nimport m from \"../RasterStorageInfo.js\";\nimport { readServiceTileInfo as h } from \"../serviceTileInfoProperty.js\";\nimport u from \"../TileInfo.js\";\nimport { TilemapCache as f } from \"../TilemapCache.js\";\nimport p from \"./BaseRaster.js\";\nimport { setValidBoundary as y } from \"../rasterFunctions/pixelUtils.js\";\nimport d from \"../rasterTransforms/GCSShiftTransform.js\";\nimport { fetchServiceRasterInfo as x } from \"../../../rest/imageService/fetchRasterInfo.js\";\nimport g from \"../../../geometry/SpatialReference.js\";\nimport v from \"../../../geometry/Point.js\";\nimport S from \"../../../geometry/Extent.js\";\nlet I = class extends p {\n  constructor() {\n    super(...arguments), this._levelOffset = 0, this._tilemapCache = null, this._slices = null, this.datasetFormat = \"RasterTileServer\", this.tileType = null;\n  }\n  async open(e) {\n    await this.init();\n    const r = e && e.signal,\n      a = this.sourceJSON ? {\n        data: this.sourceJSON\n      } : await this.request(this.url, {\n        query: {\n          f: \"json\"\n        },\n        signal: r\n      });\n    a.ssl && (this.url = this.url.replace(/^http:/i, \"https:\"));\n    const o = a.data;\n    if (this.sourceJSON = o, !o) throw new t(\"imageserverraster:open\", \"cannot initialize tiled image service, missing service info\");\n    if (!o.tileInfo) throw new t(\"imageserverraster:open\", \"use ImageryLayer to open non-tiled image services\");\n    this._fixScaleInServiceInfo();\n    const n = [\"jpg\", \"jpeg\", \"png\", \"png8\", \"png24\", \"png32\", \"mixed\"];\n    this.tileType = o.cacheType, null == this.tileType && (n.includes(o.tileInfo.format.toLowerCase()) ? this.tileType = \"Map\" : \"lerc\" === o.tileInfo.format.toLowerCase() ? this.tileType = \"Elevation\" : this.tileType = \"Raster\"), this.datasetName = o.name?.slice(o.name.indexOf(\"/\") + 1) ?? \"\";\n    const c = await this._fetchRasterInfo({\n      signal: r\n    });\n    if (i(c)) throw new t(\"image-server-raster:open\", \"cannot initialize image service\");\n    const p = \"Map\" === this.tileType ? h(o.tileInfo, o) : u.fromJSON(o.tileInfo);\n    s(p);\n    const [y, d] = this._computeMinMaxLOD(c, p),\n      {\n        extent: x,\n        pixelSize: g\n      } = c,\n      v = .5 / c.width * g.x,\n      S = Math.max(g.x, g.y),\n      {\n        lods: I\n      } = p;\n    (\"Map\" !== this.tileType && 0 !== o.maxScale || Math.abs(g.x - g.y) > v || !I.some(e => Math.abs(e.resolution - S) < v)) && (g.x = g.y = y.resolution, c.width = Math.ceil((x.xmax - x.xmin) / g.x - .1), c.height = Math.ceil((x.ymax - x.ymin) / g.y - .1));\n    const w = y.level - d.level,\n      [j, T] = p.size,\n      b = [],\n      M = [];\n    I.forEach((e, t) => {\n      e.level >= d.level && e.level <= y.level && b.push({\n        x: e.resolution,\n        y: e.resolution\n      }), t < I.length - 1 && M.push(Math.round(10 * e.resolution / I[t + 1].resolution) / 10);\n    }), b.sort((e, t) => e.x - t.x);\n    const _ = this.computeBlockBoundary(x, j, T, p.origin, b, w),\n      R = b.length > 1 ? b.slice(1) : null;\n    let z;\n    o.transposeInfo && (z = {\n      tileSize: [o.transposeInfo.rows, o.transposeInfo.cols],\n      packetSize: c.keyProperties?._yxs.PacketSize ?? 0\n    });\n    const P = M.length <= 1 || M.length >= 3 && M.slice(0, M.length - 1).every(e => e === M[0]) ? M[0] ?? 2 : Math.round(10 / (d.resolution / y.resolution) ** (-1 / w)) / 10;\n    if (c.storageInfo = new m({\n      blockWidth: p.size[0],\n      blockHeight: p.size[1],\n      pyramidBlockWidth: p.size[0],\n      pyramidBlockHeight: p.size[1],\n      pyramidResolutions: R,\n      pyramidScalingFactor: P,\n      compression: p.format,\n      origin: p.origin,\n      firstPyramidLevel: 1,\n      maximumPyramidLevel: w,\n      tileInfo: p,\n      transposeInfo: z,\n      blockBoundary: _\n    }), this._fixGCSShift(c), this._set(\"rasterInfo\", c), o.capabilities.toLowerCase().includes(\"tilemap\")) {\n      const e = {\n        tileInfo: c.storageInfo.tileInfo,\n        parsedUrl: l(this.url),\n        url: this.url,\n        tileServers: [],\n        type: \"tile\"\n      };\n      this._tilemapCache = new f({\n        layer: e\n      });\n    }\n  }\n  async fetchRawTile(e, t, i) {\n    let s = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const {\n        storageInfo: l,\n        extent: o\n      } = this.rasterInfo,\n      {\n        transposeInfo: n\n      } = l,\n      c = r(n) && !!s.transposedVariableName;\n    if (this._slices && !c && null == s.sliceId) return null;\n    const m = c ? 0 : l.maximumPyramidLevel - e + this._levelOffset,\n      h = `${this.url}/tile/${m}/${t}/${i}`,\n      u = this._slices ? c ? {\n        variable: s.transposedVariableName\n      } : {\n        sliceId: s.sliceId || 0\n      } : null,\n      {\n        data: f\n      } = await this.request(h, {\n        query: u,\n        responseType: \"array-buffer\",\n        signal: s.signal\n      });\n    if (!f) return null;\n    const p = c ? n.tileSize : l.tileInfo.size,\n      d = await this.decodePixelBlock(f, {\n        width: p[0],\n        height: p[1],\n        planes: null,\n        pixelType: null,\n        isPoint: \"Elevation\" === this.tileType,\n        returnInterleaved: c,\n        noDataValue: a(this.rasterInfo.noDataValue)\n      });\n    if (null == d) return null;\n    const x = l.blockBoundary[e];\n    if (\"jpg\" !== l.compression || i > x.minCol && i < x.maxCol && t > x.minRow && t < x.maxRow) return d;\n    const {\n        origin: g,\n        blockWidth: v,\n        blockHeight: S\n      } = l,\n      {\n        x: I,\n        y: w\n      } = this.getPyramidPixelSize(e),\n      j = Math.round((o.xmin - g.x) / I) % v,\n      T = Math.round((o.xmax - g.x) / I) % v || v,\n      b = Math.round((g.y - o.ymax) / w) % S,\n      M = Math.round((g.y - o.ymin) / w) % S || S,\n      _ = i === x.minCol ? j : 0,\n      R = t === x.minRow ? b : 0,\n      z = i === x.maxCol ? T : v,\n      P = t === x.maxRow ? M : S;\n    return y(d, {\n      x: _,\n      y: R\n    }, {\n      width: z - _,\n      height: P - R\n    }), d;\n  }\n  getSliceIndex(e) {\n    if (!this._slices || i(e) || 0 === e.length) return null;\n    const t = e;\n    for (let i = 0; i < this._slices.length; i++) {\n      const e = this._slices[i].multidimensionalDefinition;\n      if (e.length === t.length && !e.some(e => {\n        const i = t.find(t => e.variableName === t.variableName && t.dimensionName === e.dimensionName);\n        if (!i) return !0;\n        return (Array.isArray(e.values[0]) ? `${e.values[0][0]}-${e.values[0][1]}` : e.values[0]) !== (Array.isArray(i.values[0]) ? `${i.values[0][0]}-${i.values[0][1]}` : i.values[0]);\n      })) return i;\n    }\n    return null;\n  }\n  async fetchVariableStatisticsHistograms(e, t) {\n    const i = this.request(this.url + \"/statistics\", {\n        query: {\n          variable: e,\n          f: \"json\"\n        },\n        signal: t\n      }).then(e => e.data?.statistics),\n      s = this.request(this.url + \"/histograms\", {\n        query: {\n          variable: e,\n          f: \"json\"\n        },\n        signal: t\n      }).then(e => e.data?.histograms),\n      r = await Promise.all([i, s]);\n    return r[0] && r[0].forEach(e => {\n      e.avg = e.mean, e.stddev = e.standardDeviation;\n    }), {\n      statistics: r[0] || null,\n      histograms: r[1] || null\n    };\n  }\n  async computeBestPyramidLevelForLocation(e) {\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!this._tilemapCache) return 0;\n    let i = this.identifyPixelLocation(e, 0, a(t.datumTransformation));\n    if (null === i) return null;\n    let s = 0;\n    const {\n      maximumPyramidLevel: r\n    } = this.rasterInfo.storageInfo;\n    let l = r - s + this._levelOffset;\n    const o = i.srcLocation;\n    for (; l >= 0;) {\n      try {\n        if (\"available\" === (await this._tilemapCache.fetchAvailability(l, i.row, i.col, t))) break;\n      } catch {}\n      if (l--, s++, i = this.identifyPixelLocation(o, s, a(t.datumTransformation)), null === i) return null;\n    }\n    return -1 === l || null == i ? null : s;\n  }\n  async _fetchRasterInfo(e) {\n    const t = this.sourceJSON;\n    if (\"Map\" === this.tileType) {\n      const e = t.fullExtent || t.extent,\n        i = Math.ceil((e.xmax - e.xmin) / t.pixelSizeX - .1),\n        s = Math.ceil((e.ymax - e.ymin) / t.pixelSizeY - .1),\n        r = g.fromJSON(t.spatialReference || e.spatialReference),\n        a = new v({\n          x: t.pixelSizeX,\n          y: t.pixelSizeY,\n          spatialReference: r\n        });\n      return new c({\n        width: i,\n        height: s,\n        bandCount: 3,\n        extent: S.fromJSON(e),\n        spatialReference: r,\n        pixelSize: a,\n        pixelType: \"u8\",\n        statistics: null,\n        keyProperties: {\n          DataType: \"processed\"\n        }\n      });\n    }\n    const {\n        signal: i\n      } = e,\n      s = x(this.url, this.sourceJSON, {\n        signal: i,\n        query: this.ioConfig.customFetchParameters\n      }),\n      r = t.hasMultidimensions ? this.request(`${this.url}/slices`, {\n        query: {\n          f: \"json\"\n        },\n        signal: i\n      }).then(e => e.data && e.data.slices).catch(() => null) : null,\n      a = await Promise.all([s, r]);\n    return this._slices = a[1], a[0];\n  }\n  _fixScaleInServiceInfo() {\n    const {\n      sourceJSON: e\n    } = this;\n    e.minScale && e.minScale < 0 && (e.minScale = 0), e.maxScale && e.maxScale < 0 && (e.maxScale = 0);\n  }\n  _fixGCSShift(e) {\n    const {\n      extent: t,\n      spatialReference: i\n    } = e;\n    t.xmin > -1 && t.xmax > 181 && i?.wkid && i.isGeographic && (e.nativeExtent = e.extent, e.transform = new d(), e.extent = e.transform.forwardTransform(t));\n  }\n  _computeMinMaxLOD(e, t) {\n    const {\n        pixelSize: i\n      } = e,\n      s = .5 / e.width * i.x,\n      {\n        lods: r\n      } = t,\n      a = t.lodAt(Math.max.apply(null, r.map(e => e.level))),\n      l = t.lodAt(Math.min.apply(null, r.map(e => e.level))),\n      {\n        tileType: o\n      } = this;\n    if (\"Map\" === o) return this._levelOffset = r[0].level, [a, l];\n    if (\"Raster\" === o) {\n      return [r.find(e => e.resolution === i.x) ?? a, l];\n    }\n    const {\n      minScale: n,\n      maxScale: c\n    } = this.sourceJSON;\n    let m = a;\n    c > 0 && (m = r.find(e => Math.abs(e.scale - c) < s), m || (m = r.filter(e => e.scale > c).sort((e, t) => e.scale > t.scale ? 1 : -1)[0] ?? a));\n    let h = l;\n    return n > 0 && (h = r.find(e => Math.abs(e.scale - n) < s) ?? l, this._levelOffset = h.level - l.level), [m, h];\n  }\n};\ne([o({\n  type: String,\n  json: {\n    write: !0\n  }\n})], I.prototype, \"datasetFormat\", void 0), e([o()], I.prototype, \"tileType\", void 0), I = e([n(\"esri.layers.support.rasterDatasets.ImageServerRaster\")], I);\nconst w = I;\nexport { w as default };","map":{"version":3,"names":["_","e","t","isNone","i","assertIsSome","s","isSome","r","unwrap","a","urlToObject","l","property","o","subclass","n","c","m","readServiceTileInfo","h","u","TilemapCache","f","p","setValidBoundary","y","d","fetchServiceRasterInfo","x","g","v","S","I","constructor","arguments","_levelOffset","_tilemapCache","_slices","datasetFormat","tileType","open","init","signal","sourceJSON","data","request","url","query","ssl","replace","tileInfo","_fixScaleInServiceInfo","cacheType","includes","format","toLowerCase","datasetName","name","slice","indexOf","_fetchRasterInfo","fromJSON","_computeMinMaxLOD","extent","pixelSize","width","Math","max","lods","maxScale","abs","some","resolution","ceil","xmax","xmin","height","ymax","ymin","w","level","j","T","size","b","M","forEach","push","length","round","sort","computeBlockBoundary","origin","R","z","transposeInfo","tileSize","rows","cols","packetSize","keyProperties","_yxs","PacketSize","P","every","storageInfo","blockWidth","blockHeight","pyramidBlockWidth","pyramidBlockHeight","pyramidResolutions","pyramidScalingFactor","compression","firstPyramidLevel","maximumPyramidLevel","blockBoundary","_fixGCSShift","_set","capabilities","parsedUrl","tileServers","type","layer","fetchRawTile","undefined","rasterInfo","transposedVariableName","sliceId","variable","responseType","decodePixelBlock","planes","pixelType","isPoint","returnInterleaved","noDataValue","minCol","maxCol","minRow","maxRow","getPyramidPixelSize","getSliceIndex","multidimensionalDefinition","find","variableName","dimensionName","Array","isArray","values","fetchVariableStatisticsHistograms","then","statistics","histograms","Promise","all","avg","mean","stddev","standardDeviation","computeBestPyramidLevelForLocation","identifyPixelLocation","datumTransformation","srcLocation","fetchAvailability","row","col","fullExtent","pixelSizeX","pixelSizeY","spatialReference","bandCount","DataType","ioConfig","customFetchParameters","hasMultidimensions","slices","catch","minScale","wkid","isGeographic","nativeExtent","transform","forwardTransform","lodAt","apply","map","min","scale","filter","String","json","write","prototype","default"],"sources":["C:/code-challenge-react/frontend/node_modules/@arcgis/core/layers/support/rasterDatasets/ImageServerRaster.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport{_ as e}from\"../../../chunks/tslib.es6.js\";import\"../../../geometry.js\";import t from\"../../../core/Error.js\";import{isNone as i,assertIsSome as s,isSome as r,unwrap as a}from\"../../../core/maybe.js\";import{urlToObject as l}from\"../../../core/urlUtils.js\";import{property as o}from\"../../../core/accessorSupport/decorators/property.js\";import\"../../../core/accessorSupport/ensureType.js\";import\"../../../core/arrayUtils.js\";import{subclass as n}from\"../../../core/accessorSupport/decorators/subclass.js\";import c from\"../RasterInfo.js\";import m from\"../RasterStorageInfo.js\";import{readServiceTileInfo as h}from\"../serviceTileInfoProperty.js\";import u from\"../TileInfo.js\";import{TilemapCache as f}from\"../TilemapCache.js\";import p from\"./BaseRaster.js\";import{setValidBoundary as y}from\"../rasterFunctions/pixelUtils.js\";import d from\"../rasterTransforms/GCSShiftTransform.js\";import{fetchServiceRasterInfo as x}from\"../../../rest/imageService/fetchRasterInfo.js\";import g from\"../../../geometry/SpatialReference.js\";import v from\"../../../geometry/Point.js\";import S from\"../../../geometry/Extent.js\";let I=class extends p{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat=\"RasterTileServer\",this.tileType=null}async open(e){await this.init();const r=e&&e.signal,a=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:\"json\"},signal:r});a.ssl&&(this.url=this.url.replace(/^http:/i,\"https:\"));const o=a.data;if(this.sourceJSON=o,!o)throw new t(\"imageserverraster:open\",\"cannot initialize tiled image service, missing service info\");if(!o.tileInfo)throw new t(\"imageserverraster:open\",\"use ImageryLayer to open non-tiled image services\");this._fixScaleInServiceInfo();const n=[\"jpg\",\"jpeg\",\"png\",\"png8\",\"png24\",\"png32\",\"mixed\"];this.tileType=o.cacheType,null==this.tileType&&(n.includes(o.tileInfo.format.toLowerCase())?this.tileType=\"Map\":\"lerc\"===o.tileInfo.format.toLowerCase()?this.tileType=\"Elevation\":this.tileType=\"Raster\"),this.datasetName=o.name?.slice(o.name.indexOf(\"/\")+1)??\"\";const c=await this._fetchRasterInfo({signal:r});if(i(c))throw new t(\"image-server-raster:open\",\"cannot initialize image service\");const p=\"Map\"===this.tileType?h(o.tileInfo,o):u.fromJSON(o.tileInfo);s(p);const[y,d]=this._computeMinMaxLOD(c,p),{extent:x,pixelSize:g}=c,v=.5/c.width*g.x,S=Math.max(g.x,g.y),{lods:I}=p;(\"Map\"!==this.tileType&&0!==o.maxScale||Math.abs(g.x-g.y)>v||!I.some((e=>Math.abs(e.resolution-S)<v)))&&(g.x=g.y=y.resolution,c.width=Math.ceil((x.xmax-x.xmin)/g.x-.1),c.height=Math.ceil((x.ymax-x.ymin)/g.y-.1));const w=y.level-d.level,[j,T]=p.size,b=[],M=[];I.forEach(((e,t)=>{e.level>=d.level&&e.level<=y.level&&b.push({x:e.resolution,y:e.resolution}),t<I.length-1&&M.push(Math.round(10*e.resolution/I[t+1].resolution)/10)})),b.sort(((e,t)=>e.x-t.x));const _=this.computeBlockBoundary(x,j,T,p.origin,b,w),R=b.length>1?b.slice(1):null;let z;o.transposeInfo&&(z={tileSize:[o.transposeInfo.rows,o.transposeInfo.cols],packetSize:c.keyProperties?._yxs.PacketSize??0});const P=M.length<=1||M.length>=3&&M.slice(0,M.length-1).every((e=>e===M[0]))?M[0]??2:Math.round(10/(d.resolution/y.resolution)**(-1/w))/10;if(c.storageInfo=new m({blockWidth:p.size[0],blockHeight:p.size[1],pyramidBlockWidth:p.size[0],pyramidBlockHeight:p.size[1],pyramidResolutions:R,pyramidScalingFactor:P,compression:p.format,origin:p.origin,firstPyramidLevel:1,maximumPyramidLevel:w,tileInfo:p,transposeInfo:z,blockBoundary:_}),this._fixGCSShift(c),this._set(\"rasterInfo\",c),o.capabilities.toLowerCase().includes(\"tilemap\")){const e={tileInfo:c.storageInfo.tileInfo,parsedUrl:l(this.url),url:this.url,tileServers:[],type:\"tile\"};this._tilemapCache=new f({layer:e})}}async fetchRawTile(e,t,i,s={}){const{storageInfo:l,extent:o}=this.rasterInfo,{transposeInfo:n}=l,c=r(n)&&!!s.transposedVariableName;if(this._slices&&!c&&null==s.sliceId)return null;const m=c?0:l.maximumPyramidLevel-e+this._levelOffset,h=`${this.url}/tile/${m}/${t}/${i}`,u=this._slices?c?{variable:s.transposedVariableName}:{sliceId:s.sliceId||0}:null,{data:f}=await this.request(h,{query:u,responseType:\"array-buffer\",signal:s.signal});if(!f)return null;const p=c?n.tileSize:l.tileInfo.size,d=await this.decodePixelBlock(f,{width:p[0],height:p[1],planes:null,pixelType:null,isPoint:\"Elevation\"===this.tileType,returnInterleaved:c,noDataValue:a(this.rasterInfo.noDataValue)});if(null==d)return null;const x=l.blockBoundary[e];if(\"jpg\"!==l.compression||i>x.minCol&&i<x.maxCol&&t>x.minRow&&t<x.maxRow)return d;const{origin:g,blockWidth:v,blockHeight:S}=l,{x:I,y:w}=this.getPyramidPixelSize(e),j=Math.round((o.xmin-g.x)/I)%v,T=Math.round((o.xmax-g.x)/I)%v||v,b=Math.round((g.y-o.ymax)/w)%S,M=Math.round((g.y-o.ymin)/w)%S||S,_=i===x.minCol?j:0,R=t===x.minRow?b:0,z=i===x.maxCol?T:v,P=t===x.maxRow?M:S;return y(d,{x:_,y:R},{width:z-_,height:P-R}),d}getSliceIndex(e){if(!this._slices||i(e)||0===e.length)return null;const t=e;for(let i=0;i<this._slices.length;i++){const e=this._slices[i].multidimensionalDefinition;if(e.length===t.length&&!e.some((e=>{const i=t.find((t=>e.variableName===t.variableName&&t.dimensionName===e.dimensionName));if(!i)return!0;return(Array.isArray(e.values[0])?`${e.values[0][0]}-${e.values[0][1]}`:e.values[0])!==(Array.isArray(i.values[0])?`${i.values[0][0]}-${i.values[0][1]}`:i.values[0])})))return i}return null}async fetchVariableStatisticsHistograms(e,t){const i=this.request(this.url+\"/statistics\",{query:{variable:e,f:\"json\"},signal:t}).then((e=>e.data?.statistics)),s=this.request(this.url+\"/histograms\",{query:{variable:e,f:\"json\"},signal:t}).then((e=>e.data?.histograms)),r=await Promise.all([i,s]);return r[0]&&r[0].forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),{statistics:r[0]||null,histograms:r[1]||null}}async computeBestPyramidLevelForLocation(e,t={}){if(!this._tilemapCache)return 0;let i=this.identifyPixelLocation(e,0,a(t.datumTransformation));if(null===i)return null;let s=0;const{maximumPyramidLevel:r}=this.rasterInfo.storageInfo;let l=r-s+this._levelOffset;const o=i.srcLocation;for(;l>=0;){try{if(\"available\"===await this._tilemapCache.fetchAvailability(l,i.row,i.col,t))break}catch{}if(l--,s++,i=this.identifyPixelLocation(o,s,a(t.datumTransformation)),null===i)return null}return-1===l||null==i?null:s}async _fetchRasterInfo(e){const t=this.sourceJSON;if(\"Map\"===this.tileType){const e=t.fullExtent||t.extent,i=Math.ceil((e.xmax-e.xmin)/t.pixelSizeX-.1),s=Math.ceil((e.ymax-e.ymin)/t.pixelSizeY-.1),r=g.fromJSON(t.spatialReference||e.spatialReference),a=new v({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:r});return new c({width:i,height:s,bandCount:3,extent:S.fromJSON(e),spatialReference:r,pixelSize:a,pixelType:\"u8\",statistics:null,keyProperties:{DataType:\"processed\"}})}const{signal:i}=e,s=x(this.url,this.sourceJSON,{signal:i,query:this.ioConfig.customFetchParameters}),r=t.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:\"json\"},signal:i}).then((e=>e.data&&e.data.slices)).catch((()=>null)):null,a=await Promise.all([s,r]);return this._slices=a[1],a[0]}_fixScaleInServiceInfo(){const{sourceJSON:e}=this;e.minScale&&e.minScale<0&&(e.minScale=0),e.maxScale&&e.maxScale<0&&(e.maxScale=0)}_fixGCSShift(e){const{extent:t,spatialReference:i}=e;t.xmin>-1&&t.xmax>181&&i?.wkid&&i.isGeographic&&(e.nativeExtent=e.extent,e.transform=new d,e.extent=e.transform.forwardTransform(t))}_computeMinMaxLOD(e,t){const{pixelSize:i}=e,s=.5/e.width*i.x,{lods:r}=t,a=t.lodAt(Math.max.apply(null,r.map((e=>e.level)))),l=t.lodAt(Math.min.apply(null,r.map((e=>e.level)))),{tileType:o}=this;if(\"Map\"===o)return this._levelOffset=r[0].level,[a,l];if(\"Raster\"===o){return[r.find((e=>e.resolution===i.x))??a,l]}const{minScale:n,maxScale:c}=this.sourceJSON;let m=a;c>0&&(m=r.find((e=>Math.abs(e.scale-c)<s)),m||(m=r.filter((e=>e.scale>c)).sort(((e,t)=>e.scale>t.scale?1:-1))[0]??a));let h=l;return n>0&&(h=r.find((e=>Math.abs(e.scale-n)<s))??l,this._levelOffset=h.level-l.level),[m,h]}};e([o({type:String,json:{write:!0}})],I.prototype,\"datasetFormat\",void 0),e([o()],I.prototype,\"tileType\",void 0),I=e([n(\"esri.layers.support.rasterDatasets.ImageServerRaster\")],I);const w=I;export{w as default};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}