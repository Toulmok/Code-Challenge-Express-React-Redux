{"ast":null,"code":"//https://github.com/ngduc/react-tabulator/blob/master/src/ConfigUtils.tsx\nimport * as Es6Promise from 'es6-promise'; // without this, 'yarn build' will complain about Promise.\nimport { render } from 'react-dom';\n\n// .prettierignore    (to keep relevant props together)\nconst NOOPS = () => {};\n\n// TODO: add proper types for props & callbacks\n_c = NOOPS;\nfunction syncRender(comp, el) {\n  return new Es6Promise.Promise(function (resolve, reject) {\n    render(comp, el, () => {\n      resolve(el);\n    });\n  });\n}\n\n// get callbacks from props (default: NOOP) to set them to Tabulator options later.\nexport const propsToOptions = async props => {\n  const output = {};\n  const defaultOptions = ['height', 'layout', 'layoutColumnsOnNewData', 'columnMinWidth', 'columnVertAlign', 'resizableColumns', 'resizableRows', 'autoResize', 'tooltips', 'tooltipsHeader', 'tooltipGenerationMode', 'initialSort', 'initialFilter', 'initialHeaderFilter', 'footerElement', 'index', 'keybindings', 'clipboard', 'clipboardCopyStyled', 'clipboardCopySelector', 'clipboardCopyFormatter', 'clipboardCopyHeader', 'clipboardPasteParser', 'clipboardPasteAction', 'rowFormatter', 'placeholder', 'selectable'];\n  for (const opt of defaultOptions) {\n    if (typeof props[opt] !== 'undefined') {\n      output[opt] = props[opt];\n    }\n  }\n  const callbackNames = ['tableBuilt', 'rowClick', 'rowDblClick', 'rowContext', 'rowTap', 'rowDblTap', 'rowTapHold', 'rowAdded', 'rowDeleted', 'rowMoved', 'rowUpdated', 'rowSelectionChanged', 'rowSelected', 'rowDeselected', 'rowResized', 'cellClick', 'cellDblClick', 'cellContext', 'cellTap', 'cellDblTap', 'cellTapHold', 'cellEditing', 'cellEditCancelled', 'columnMoved', 'columnResized', 'columnTitleChanged', 'columnVisibilityChanged', 'htmlImporting', 'htmlImported', 'dataLoading', 'dataLoaded', 'ajaxRequesting', 'ajaxResponse', 'dataFiltering', 'dataFiltered', 'dataSorting', 'dataSorted', 'renderStarted', 'renderComplete', 'pageLoaded', 'localized', 'dataGrouping', 'dataGrouped', 'groupVisibilityChanged', 'groupClick', 'groupDblClick', 'groupContext', 'groupTap', 'groupDblTap', 'groupTapHold', 'movableRowsSendingStart', 'movableRowsSent', 'movableRowsSentFailed', 'movableRowsSendingStop', 'movableRowsReceivingStart', 'movableRowsReceived', 'movableRowsReceivedFailed', 'movableRowsReceivingStop', 'validationFailed', 'clipboardCopied', 'clipboardPasted', 'clipboardPasteError', 'downloadReady', 'downloadComplete']; // don't add \"selectableCheck\" here, it will break \"rowSelectionChanged\"\n\n  for (const callbackName of callbackNames) {\n    if (typeof props[callbackName] !== 'undefined') {\n      output[callbackName] = props[callbackName] || NOOPS;\n    }\n  }\n  if (typeof props['footerElement'] === 'object') {\n    // convert from JSX to HTML string (tabulator's footerElement accepts string)\n    const el = await syncRender(props['footerElement'], document.createElement('div'));\n    output['footerElement'] = el.innerHTML;\n  }\n  return output;\n};\nvar _c;\n$RefreshReg$(_c, \"NOOPS\");","map":{"version":3,"names":["Es6Promise","render","NOOPS","_c","syncRender","comp","el","Promise","resolve","reject","propsToOptions","props","output","defaultOptions","opt","callbackNames","callbackName","document","createElement","innerHTML","$RefreshReg$"],"sources":["C:/code-challenge-react/frontend/src/unused/tabulator/ConfigUtils.tsx"],"sourcesContent":["//https://github.com/ngduc/react-tabulator/blob/master/src/ConfigUtils.tsx\r\nimport * as Es6Promise from 'es6-promise' // without this, 'yarn build' will complain about Promise.\r\nimport { render } from 'react-dom';\r\n\r\n// .prettierignore    (to keep relevant props together)\r\nconst NOOPS = () => {};\r\n\r\n// TODO: add proper types for props & callbacks\r\nexport interface IProps {\r\n  events?: any; // example: <ReactTabulator events={{ rowClick: (ev, row) => {} }}... />\r\n  className?: string;\r\n  columns: any[];\r\n  data?: any[];\r\n  height?: number;\r\n  layout?: string, /// layout type \"fitColumns\" | \"fitDataTable\" | \"fitDataStretch\" | \"fitData\" - default: \"fitData\"\r\n\tlayoutColumnsOnNewData?: boolean, // update column widths on setData - default: false\r\n\tcolumnMinWidth?: number, // minimum global width for a column - default: 40\r\n\tcolumnVertAlign?: string, // vertical alignment of column headers - default: 'top'\r\n\tresizableColumns?: boolean, // resizable columns - default: true\r\n\tresizableRows?: boolean, // resizable rows - default: false\r\n\tautoResize?: boolean, // auto resize table - default: true\r\n\ttooltips?: boolean, // Tool tip value - default: false\r\n\ttooltipsHeader?: boolean, // Tool tip for headers - default: false\r\n\ttooltipGenerationMode?: string, // when to generate tooltips - default: 'load'\r\n\tinitialSort?: boolean, // initial sorting criteria - default: false\r\n\tinitialFilter?: boolean, // initial filtering criteria - default: false\r\n\tinitialHeaderFilter?: boolean, // initial filtering criteria - default: false\r\n\tfooterElement?: any, // hold footer element - default: false\r\n\tindex?: string, // filed for row index - default: 'id'\r\n\tkeybindings?:[], // array for keybindings - default: []\r\n\tclipboard?: boolean, // enable clipboard - default: false\r\n\tclipboardCopyStyled?: boolean, // formatted table data - default: true\r\n\tclipboardCopySelector?: string, // method of chosing which data is coppied to the clipboard - default: 'active'\r\n\tclipboardCopyFormatter?: string, // convert data to a clipboard string - default: 'table'\r\n\tclipboardCopyHeader?: boolean, // include table headers in copt - default: true\r\n\tclipboardPasteParser?: string, // convert pasted clipboard data to rows - default: 'table'\r\n\tclipboardPasteAction?: string, // how to insert pasted data into the table - default: 'insert'\r\n  rowClick?: (e: any, row: any) => void;\r\n  tableBuilding?: () => void;\r\n  tableBuilt?: () => void;\r\n  rowDblClick?: any;\r\n  rowContext?: any;\r\n  rowTap?: any;\r\n  rowDblTap?: any;\r\n  rowTapHold?: any;\r\n  rowAdded?: any;\r\n  rowDeleted?: any;\r\n  rowMoved?: any;\r\n  rowUpdated?: any;\r\n  rowSelectionChanged?: any;\r\n  rowSelected?: any;\r\n  rowDeselected?: any;\r\n  rowResized?: any;\r\n  cellClick?: any;\r\n  cellDblClick?: any;\r\n  cellContext?: any;\r\n  cellTap?: any;\r\n  cellDblTap?: any;\r\n  cellTapHold?: any;\r\n  cellEditing?: any;\r\n  cellEdited?: any;\r\n  cellEditCancelled?: any;\r\n  columnMoved?: any;\r\n  columnResized?: any;\r\n  columnTitleChanged?: any;\r\n  columnVisibilityChanged?: any;\r\n  headerClick?: any;\r\n  headerDblClick?: any;\r\n  headerContext?: any;\r\n  headerTap?: any;\r\n  headerDblTap?: any;\r\n  headerTapHold?: any;\r\n  htmlImporting?: any;\r\n  htmlImported?: any;\r\n  dataLoading?: any;\r\n  dataLoaded?: any;\r\n  dataChanged?: any;\r\n  ajaxRequesting?: any;\r\n  ajaxResponse?: any;\r\n  ajaxError?: any;\r\n  dataFiltering?: any;\r\n  dataFiltered?: any;\r\n  dataSorting?: any;\r\n  dataSorted?: any;\r\n  renderStarted?: any;\r\n  renderComplete?: any;\r\n  pageLoaded?: any;\r\n  localized?: any;\r\n  dataGrouping?: any;\r\n  dataGrouped?: any;\r\n  groupVisibilityChanged?: any;\r\n  groupClick?: any;\r\n  groupDblClick?: any;\r\n  groupContext?: any;\r\n  groupTap?: any;\r\n  groupDblTap?: any;\r\n  groupTapHold?: any;\r\n  movableRowsSendingStart?: any;\r\n  movableRowsSent?: any;\r\n  movableRowsSentFailed?: any;\r\n  movableRowsSendingStop?: any;\r\n  movableRowsReceivingStart?: any;\r\n  movableRowsReceived?: any;\r\n  movableRowsReceivedFailed?: any;\r\n  movableRowsReceivingStop?: any;\r\n  validationFailed?: any;\r\n  clipboardCopied?: any;\r\n  clipboardPasted?: any;\r\n  clipboardPasteError?: any;\r\n  downloadReady?: any;\r\n  downloadComplete?: any;\r\n  selectableCheck?: any;\r\n  \r\n  // NOTE: you can directly pass *any* tabulator options via this. (see README)\r\n  options?: any; // Tabulator options object\r\n}\r\n\r\nfunction syncRender(comp: any, el: any): any {\r\n  return new Es6Promise.Promise(function(resolve, reject) {\r\n    render(comp, el, () => {\r\n      resolve(el)\r\n    })\r\n  });\r\n}\r\n\r\n// get callbacks from props (default: NOOP) to set them to Tabulator options later.\r\nexport const propsToOptions = async (props: any) => {\r\n  const output: any = {}\r\n\r\n  const defaultOptions = ['height', 'layout', 'layoutColumnsOnNewData', 'columnMinWidth', 'columnVertAlign',\r\n  'resizableColumns', 'resizableRows', 'autoResize', 'tooltips', 'tooltipsHeader', 'tooltipGenerationMode',\r\n  'initialSort', 'initialFilter', 'initialHeaderFilter', 'footerElement', 'index', 'keybindings', 'clipboard', 'clipboardCopyStyled',\r\n  'clipboardCopySelector', 'clipboardCopyFormatter', 'clipboardCopyHeader', 'clipboardPasteParser',\r\n  'clipboardPasteAction', 'rowFormatter', 'placeholder', 'selectable']\r\n\r\n  for (const opt of defaultOptions) {\r\n    if (typeof props[opt] !== 'undefined') {\r\n      output[opt] = props[opt]\r\n    }\r\n  }\r\n\r\n  const callbackNames = ['tableBuilt','rowClick','rowDblClick','rowContext','rowTap','rowDblTap','rowTapHold',\r\n    'rowAdded','rowDeleted','rowMoved','rowUpdated','rowSelectionChanged','rowSelected','rowDeselected','rowResized',\r\n    'cellClick','cellDblClick','cellContext','cellTap','cellDblTap','cellTapHold','cellEditing','cellEditCancelled',\r\n    'columnMoved','columnResized','columnTitleChanged','columnVisibilityChanged',\r\n    'htmlImporting','htmlImported','dataLoading','dataLoaded',\r\n    'ajaxRequesting','ajaxResponse','dataFiltering','dataFiltered','dataSorting','dataSorted',\r\n    'renderStarted','renderComplete','pageLoaded','localized','dataGrouping','dataGrouped',\r\n    'groupVisibilityChanged','groupClick','groupDblClick','groupContext','groupTap','groupDblTap','groupTapHold',\r\n    'movableRowsSendingStart','movableRowsSent','movableRowsSentFailed','movableRowsSendingStop','movableRowsReceivingStart','movableRowsReceived','movableRowsReceivedFailed','movableRowsReceivingStop',\r\n    'validationFailed','clipboardCopied','clipboardPasted','clipboardPasteError',\r\n    'downloadReady','downloadComplete']; // don't add \"selectableCheck\" here, it will break \"rowSelectionChanged\"\r\n  \r\n  for (const callbackName of callbackNames) {\r\n    if (typeof props[callbackName] !== 'undefined') {\r\n      output[callbackName] = props[callbackName] || NOOPS\r\n    }\r\n  }\r\n  if (typeof props['footerElement'] === 'object') {\r\n    // convert from JSX to HTML string (tabulator's footerElement accepts string)\r\n    const el = await syncRender(props['footerElement'], document.createElement('div'))\r\n    output['footerElement'] = el.innerHTML\r\n  }\r\n  return output\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}