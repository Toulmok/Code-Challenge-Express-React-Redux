{"ast":null,"code":"import Portal from '@arcgis/core/portal/Portal';\nimport { LOAD_PORTAL, SET_IDENTITY, GET_USER_ITEMS, SET_USER_ITEMS } from '../constants/action-types';\nconst portal = new Portal({\n  authMode: 'immediate'\n});\nconst qParamArray = ['title', 'type', 'created', 'tag'];\n\n/**\r\n * Middleware function with the signature\r\n *\r\n * storeInstance =>\r\n * functionToCallWithAnActionThatWillSendItToTheNextMiddleware =>\r\n * actionThatDispatchWasCalledWith =>\r\n * valueToUseAsTheReturnValueOfTheDispatchCall\r\n *\r\n * Typically written as\r\n *\r\n * store => next => action => result\r\n */\nconst arcgisMiddleWare = store => next => action => {\n  switch (action.type) {\n    case LOAD_PORTAL:\n      portal.load().then(() => {\n        store.dispatch({\n          type: SET_IDENTITY,\n          username: portal.user.username,\n          fullname: portal.user.fullName,\n          email: portal.user.email,\n          thumbnailurl: portal.user.thumbnailUrl\n        });\n        store.dispatch({\n          type: GET_USER_ITEMS\n        });\n      });\n    case GET_USER_ITEMS:\n      next(action);\n      console.log(\"getting user items\");\n\n      //Does this sanitize?\n      let myUrlGet = new URL(window.location.href);\n      console.log(myUrlGet.toString());\n      let myUrlHas = new URLSearchParams(myUrlGet.search);\n      let qString = '';\n      if (myUrlHas.has(\"dcreated\")) {\n        let qDCreated = myUrlHas.get(\"dcreated\");\n        console.log(qDCreated);\n        if (qDCreated != '') {\n          let created = new Date(qDCreated);\n          let createdUnix = created.getTime().toString();\n          if (myUrlHas.get(\"rcreated\") == \"before\") {\n            createdUnix = '[0 TO ' + createdUnix + ']';\n          } else if (myUrlHas.get(\"rcreated\") == \"after\") {\n            createdUnix = '[' + createdUnix + ' TO 99999999999999]';\n          }\n          ;\n          console.log(createdUnix);\n          myUrlHas.set(\"created\", createdUnix);\n        }\n      }\n      myUrlGet.search = myUrlHas.toString();\n      const new_url = myUrlGet.toString();\n      console.log(new_url);\n      window.history.replaceState('', '', myUrlGet.search);\n      for (const field of qParamArray) {\n        if (myUrlHas.has(field)) {\n          if (myUrlGet.searchParams.get(field) != '') {\n            qString += ' AND ' + field + ':' + myUrlGet.searchParams.get(field);\n          }\n        }\n      }\n      if (portal.user != null) {\n        console.log(qString);\n        console.log(portal.user.username);\n        try {\n          return portal.queryItems({\n            query: `owner:${portal.user.username}` + qString,\n            sortField: 'modified',\n            sortOrder: 'desc',\n            num: 15\n          }).then(_ref => {\n            let {\n              results\n            } = _ref;\n            return store.dispatch({\n              type: SET_USER_ITEMS,\n              userItems: results\n            });\n          });\n        } catch {\n          return 0;\n        } finally {\n          return 0;\n        }\n      }\n    default:\n      return next(action);\n  }\n};\nexport default arcgisMiddleWare;","map":{"version":3,"names":["Portal","LOAD_PORTAL","SET_IDENTITY","GET_USER_ITEMS","SET_USER_ITEMS","portal","authMode","qParamArray","arcgisMiddleWare","store","next","action","type","load","then","dispatch","username","user","fullname","fullName","email","thumbnailurl","thumbnailUrl","console","log","myUrlGet","URL","window","location","href","toString","myUrlHas","URLSearchParams","search","qString","has","qDCreated","get","created","Date","createdUnix","getTime","set","new_url","history","replaceState","field","searchParams","queryItems","query","sortField","sortOrder","num","_ref","results","userItems"],"sources":["C:/code-challenge-react/frontend/src/middleware/arcgis-portal.js"],"sourcesContent":["import Portal from '@arcgis/core/portal/Portal'\r\n\r\nimport {\r\n  LOAD_PORTAL,\r\n  SET_IDENTITY,\r\n  GET_USER_ITEMS,\r\n  SET_USER_ITEMS,\r\n} from '../constants/action-types'\r\n\r\nconst portal = new Portal({ authMode: 'immediate' })\r\nconst qParamArray = ['title','type','created','tag']\r\n\r\n/**\r\n * Middleware function with the signature\r\n *\r\n * storeInstance =>\r\n * functionToCallWithAnActionThatWillSendItToTheNextMiddleware =>\r\n * actionThatDispatchWasCalledWith =>\r\n * valueToUseAsTheReturnValueOfTheDispatchCall\r\n *\r\n * Typically written as\r\n *\r\n * store => next => action => result\r\n */\r\nconst arcgisMiddleWare = store => next => (action) => {\r\n  switch (action.type) {\r\n    case LOAD_PORTAL:\r\n      portal.load()\r\n      .then(() => {\r\n        store.dispatch({\r\n          type: SET_IDENTITY,\r\n          username: portal.user.username,\r\n          fullname: portal.user.fullName,\r\n          email: portal.user.email,\r\n          thumbnailurl: portal.user.thumbnailUrl,\r\n        })\r\n        store.dispatch({ type: GET_USER_ITEMS })\r\n      })\r\n\r\n    case GET_USER_ITEMS:\r\n      next(action)\r\n      console.log(\"getting user items\")\r\n\r\n      //Does this sanitize?\r\n      let myUrlGet = new URL(window.location.href); console.log(myUrlGet.toString())\r\n      let myUrlHas = new URLSearchParams(myUrlGet.search)\r\n      let qString = ''\r\n\r\n      if(myUrlHas.has(\"dcreated\")) {\r\n        let qDCreated = myUrlHas.get(\"dcreated\"); console.log(qDCreated)\r\n        if((qDCreated != '')){\r\n          let created = new Date(qDCreated)\r\n          let createdUnix = created.getTime().toString()\r\n          if(myUrlHas.get(\"rcreated\")==\"before\") {\r\n            createdUnix = '[0 TO ' + createdUnix + ']'\r\n          } else if (myUrlHas.get(\"rcreated\")==\"after\") {\r\n            createdUnix = '[' + createdUnix + ' TO 99999999999999]'\r\n          }; console.log(createdUnix)\r\n          myUrlHas.set(\"created\",createdUnix)\r\n        }\r\n      }\r\n\r\n      myUrlGet.search = myUrlHas.toString()\r\n      const new_url = myUrlGet.toString(); console.log(new_url)\r\n      window.history.replaceState('','',myUrlGet.search)\r\n\r\n      for (const field of qParamArray) {\r\n        if(myUrlHas.has(field)) {\r\n          if((myUrlGet.searchParams.get(field) != '')){\r\n            qString += ' AND ' + field + ':' + myUrlGet.searchParams.get(field)\r\n          }\r\n        }\r\n      }\r\n      \r\n      if (portal.user != null) {\r\n        console.log(qString)\r\n        console.log(portal.user.username)\r\n        try { \r\n          return portal.queryItems({\r\n            query: `owner:${portal.user.username}` + qString,\r\n            sortField: 'modified',\r\n            sortOrder: 'desc',\r\n            num: 15,\r\n          })\r\n          .then(({ results }) => store.dispatch({\r\n            type: SET_USER_ITEMS,\r\n            userItems: results,\r\n          }))\r\n        }\r\n        catch { return 0 }\r\n        finally { return 0 }\r\n      }\r\n\r\n    default:\r\n      return next(action)\r\n  }\r\n}\r\n\r\nexport default arcgisMiddleWare"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}