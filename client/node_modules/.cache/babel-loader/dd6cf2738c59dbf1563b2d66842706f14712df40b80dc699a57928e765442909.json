{"ast":null,"code":"import _classCallCheck from \"C:/code-challenge-react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/code-challenge-react/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\nimport { fetchToken } from \"./fetch-token.js\";\nimport { ArcGISTokenRequestError, ArcGISTokenRequestErrorCodes } from \"./utils/ArcGISTokenRequestError.js\";\n/**\n * Used to authenticate methods in ArcGIS REST JS with oAuth 2.0 application credentials. The instance of `ApplicationCredentialsManager` can be passed to {@linkcode IRequestOptions.authentication} to authenticate requests.\n *\n * ```js\n * import { ApplicationCredentialsManager } from '@esri/arcgis-rest-request';\n *\n * const session = ApplicationCredentialsManager.fromCredentials({\n *   clientId: \"abc123\",\n *   clientSecret: \"••••••\"\n * })\n * ```\n */\nexport var ApplicationCredentialsManager = /*#__PURE__*/function () {\n  function ApplicationCredentialsManager(options) {\n    _classCallCheck(this, ApplicationCredentialsManager);\n    this.clientId = options.clientId;\n    this.clientSecret = options.clientSecret;\n    this.token = options.token;\n    this.expires = options.expires;\n    this.portal = options.portal || \"https://www.arcgis.com/sharing/rest\";\n    this.duration = options.duration || 7200;\n  }\n  /**\n   * Preferred method for creating an `ApplicationCredentialsManager`\n   */\n  _createClass(ApplicationCredentialsManager, [{\n    key: \"getToken\",\n    value:\n    // URL is not actually read or passed through.\n    function getToken(url, requestOptions) {\n      if (this.token && this.expires && this.expires.getTime() > Date.now()) {\n        return Promise.resolve(this.token);\n      }\n      if (this._pendingTokenRequest) {\n        return this._pendingTokenRequest;\n      }\n      this._pendingTokenRequest = this.refreshToken(requestOptions);\n      return this._pendingTokenRequest;\n    }\n  }, {\n    key: \"refreshToken\",\n    value: function refreshToken(requestOptions) {\n      var _this = this;\n      var options = Object.assign({\n        params: {\n          client_id: this.clientId,\n          client_secret: this.clientSecret,\n          grant_type: \"client_credentials\",\n          expiration: this.duration\n        }\n      }, requestOptions);\n      return fetchToken(\"\".concat(this.portal, \"/oauth2/token/\"), options).then(function (response) {\n        _this._pendingTokenRequest = null;\n        _this.token = response.token;\n        _this.expires = response.expires;\n        return response.token;\n      }).catch(function (e) {\n        throw new ArcGISTokenRequestError(e.message, ArcGISTokenRequestErrorCodes.TOKEN_REFRESH_FAILED, e.response, e.url, e.options);\n      });\n    }\n  }, {\n    key: \"refreshCredentials\",\n    value: function refreshCredentials() {\n      var _this2 = this;\n      return this.refreshToken().then(function () {\n        return _this2;\n      });\n    }\n  }], [{\n    key: \"fromCredentials\",\n    value: function fromCredentials(options) {\n      return new ApplicationCredentialsManager(options);\n    }\n  }]);\n  return ApplicationCredentialsManager;\n}();\n/**\n * @deprecated - Use {@linkcode ApplicationCredentialsManager}.\n * @internal\n */ /* istanbul ignore next */\nexport function ApplicationSession(options) {\n  console.log(\"DEPRECATED:, 'ApplicationSession' is deprecated. Use 'ApplicationCredentialsManager' instead.\");\n  return new ApplicationCredentialsManager(options);\n}","map":{"version":3,"names":["fetchToken","ArcGISTokenRequestError","ArcGISTokenRequestErrorCodes","ApplicationCredentialsManager","options","_classCallCheck","clientId","clientSecret","token","expires","portal","duration","_createClass","key","value","getToken","url","requestOptions","getTime","Date","now","Promise","resolve","_pendingTokenRequest","refreshToken","_this","Object","assign","params","client_id","client_secret","grant_type","expiration","concat","then","response","catch","e","message","TOKEN_REFRESH_FAILED","refreshCredentials","_this2","fromCredentials","ApplicationSession","console","log"],"sources":["C:\\code-challenge-react\\node_modules\\@esri\\arcgis-rest-request\\src\\ApplicationCredentialsManager.ts"],"sourcesContent":["/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IAuthenticationManager } from \"./utils/IAuthenticationManager.js\";\nimport { ITokenRequestOptions } from \"./utils/ITokenRequestOptions.js\";\nimport { fetchToken } from \"./fetch-token.js\";\nimport {\n  ArcGISTokenRequestError,\n  ArcGISTokenRequestErrorCodes\n} from \"./utils/ArcGISTokenRequestError.js\";\nimport { ArcGISRequestError } from \"./utils/ArcGISRequestError.js\";\n\nexport interface IApplicationCredentialsManagerOptions {\n  /**\n   * Client ID of your application. Can be obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise.\n   */\n  clientId: string;\n\n  /**\n   * A Client Secret is also obtained by registering an application\n   * on [ArcGIS for Developers](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/signing-in-arcgis-online-users/#registering-your-application),\n   * [ArcGIS Online](http://doc.arcgis.com/en/arcgis-online/share-maps/add-items.htm#ESRI_SECTION1_0D1B620254F745AE84F394289F8AF44B) or on your instance of ArcGIS Enterprise. Treat it like a password.\n   */\n  clientSecret: string;\n\n  /**\n   * OAuth 2.0 access token from a previous application session.\n   */\n  token?: string;\n\n  /**\n   * Expiration date for the `token`\n   */\n  expires?: Date;\n\n  /**\n   * URL of ArcGIS REST base, defaults to \"https://www.arcgis.com/sharing/rest\"\n   */\n  portal?: string;\n\n  /**\n   * Duration of requested tokens in minutes. defaults to 7200 (5 days).\n   */\n  duration?: number;\n}\n\n/**\n * Used to authenticate methods in ArcGIS REST JS with oAuth 2.0 application credentials. The instance of `ApplicationCredentialsManager` can be passed to {@linkcode IRequestOptions.authentication} to authenticate requests.\n *\n * ```js\n * import { ApplicationCredentialsManager } from '@esri/arcgis-rest-request';\n *\n * const session = ApplicationCredentialsManager.fromCredentials({\n *   clientId: \"abc123\",\n *   clientSecret: \"••••••\"\n * })\n * ```\n */\nexport class ApplicationCredentialsManager implements IAuthenticationManager {\n  public portal: string;\n  private clientId: string;\n  private clientSecret: string;\n  private token: string;\n  private expires: Date;\n  private duration: number;\n\n  /**\n   * Preferred method for creating an `ApplicationCredentialsManager`\n   */\n  public static fromCredentials(\n    options: IApplicationCredentialsManagerOptions\n  ) {\n    return new ApplicationCredentialsManager(options);\n  }\n\n  /**\n   * Internal object to keep track of pending token requests. Used to prevent\n   *  duplicate token requests.\n   */\n  private _pendingTokenRequest: Promise<string>;\n\n  constructor(options: IApplicationCredentialsManagerOptions) {\n    this.clientId = options.clientId;\n    this.clientSecret = options.clientSecret;\n    this.token = options.token;\n    this.expires = options.expires;\n    this.portal = options.portal || \"https://www.arcgis.com/sharing/rest\";\n    this.duration = options.duration || 7200;\n  }\n\n  // URL is not actually read or passed through.\n  public getToken(\n    url: string,\n    requestOptions?: ITokenRequestOptions\n  ): Promise<string> {\n    if (this.token && this.expires && this.expires.getTime() > Date.now()) {\n      return Promise.resolve(this.token);\n    }\n\n    if (this._pendingTokenRequest) {\n      return this._pendingTokenRequest;\n    }\n\n    this._pendingTokenRequest = this.refreshToken(requestOptions);\n\n    return this._pendingTokenRequest;\n  }\n\n  public refreshToken(requestOptions?: ITokenRequestOptions): Promise<string> {\n    const options = {\n      params: {\n        client_id: this.clientId,\n        client_secret: this.clientSecret,\n        grant_type: \"client_credentials\",\n        expiration: this.duration\n      },\n      ...requestOptions\n    };\n\n    return fetchToken(`${this.portal}/oauth2/token/`, options)\n      .then((response) => {\n        this._pendingTokenRequest = null;\n        this.token = response.token;\n        this.expires = response.expires;\n        return response.token;\n      })\n      .catch((e: ArcGISRequestError) => {\n        throw new ArcGISTokenRequestError(\n          e.message,\n          ArcGISTokenRequestErrorCodes.TOKEN_REFRESH_FAILED,\n          e.response,\n          e.url,\n          e.options\n        );\n      });\n  }\n\n  public refreshCredentials() {\n    return this.refreshToken().then(() => this);\n  }\n}\n\n/**\n * @deprecated - Use {@linkcode ApplicationCredentialsManager}.\n * @internal\n */ /* istanbul ignore next */\nexport function ApplicationSession(\n  options: IApplicationCredentialsManagerOptions\n) {\n  console.log(\n    \"DEPRECATED:, 'ApplicationSession' is deprecated. Use 'ApplicationCredentialsManager' instead.\"\n  );\n\n  return new ApplicationCredentialsManager(options);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}