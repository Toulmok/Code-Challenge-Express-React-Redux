{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport { isNone as e, isSome as t } from \"../../../core/maybe.js\";\nimport { polygonCentroid as i, extentCentroid as s } from \"../../../geometry/support/centroid.js\";\nimport { getPolygonExtent as a, getGeometryExtent as r } from \"../../../geometry/support/extentUtils.js\";\nimport { toQuantizationTransform as n } from \"../../../geometry/support/quantizationUtils.js\";\nimport { isValid as o, equals as l } from \"../../../geometry/support/spatialReferenceUtils.js\";\nimport u from \"./AttributesBuilder.js\";\nimport { project as c } from \"./projectionSupport.js\";\nimport { makeEdgeCandidate as d, makeVertexCandidate as m } from \"./SnappingCandidate.js\";\nimport { cleanFromGeometryEngine as h, getGeometry as f, transformCentroid as g } from \"./utils.js\";\nimport { isStringField as p } from \"../../support/fieldUtils.js\";\nimport { isNullCountSupported as y, calculateStringStatistics as x, calculateStatistics as I, processSummaryStatisticsResult as T, calculateUniqueValuesCount as V, createUVResult as F, calculateClassBreaks as S, resolveCBResult as _, calculateHistogram as z, getAttributeComparator as v, calculatePercentile as b } from \"../../../statistics/utils.js\";\nimport { loadArcade as R } from \"../../../support/arcadeOnDemand.js\";\nclass A {\n  constructor(e, t, i) {\n    this.items = e, this.query = t, this.geometryType = i.geometryType, this.hasM = i.hasM, this.hasZ = i.hasZ, this.fieldsIndex = i.fieldsIndex, this.objectIdField = i.objectIdField, this.spatialReference = i.spatialReference, this.featureAdapter = i.featureAdapter;\n  }\n  get size() {\n    return this.items.length;\n  }\n  createQueryResponseForCount() {\n    const e = new u(this.query, this.featureAdapter, this.fieldsIndex);\n    if (!this.query.outStatistics) return e.countDistinctValues(this.items);\n    const {\n        groupByFieldsForStatistics: t,\n        having: i,\n        outStatistics: s\n      } = this.query,\n      a = t?.length;\n    if (!!!a) return 1;\n    const r = new Map(),\n      n = new Map(),\n      o = new Set();\n    for (const l of s) {\n      const {\n          statisticType: s\n        } = l,\n        a = \"exceedslimit\" !== s ? l.onStatisticField : void 0;\n      if (!n.has(a)) {\n        const i = [];\n        for (const s of t) {\n          const t = this._getAttributeValues(e, s, r);\n          i.push(t);\n        }\n        n.set(a, this._calculateUniqueValues(i, e.returnDistinctValues));\n      }\n      const u = n.get(a);\n      for (const t in u) {\n        const {\n            data: s,\n            items: a\n          } = u[t],\n          r = s.join(\",\");\n        i && !e.validateItems(a, i) || o.add(r);\n      }\n    }\n    return o.size;\n  }\n  async createQueryResponse() {\n    let e;\n    if (this.query.outStatistics) {\n      e = this.query.outStatistics.some(e => \"exceedslimit\" === e.statisticType) ? this._createExceedsLimitQueryResponse(this.query) : await this._createStatisticsQueryResponse(this.query);\n    } else e = this._createFeatureQueryResponse(this.query);\n    if (this.query.returnQueryGeometry) {\n      const t = this.query.geometry;\n      o(this.query.outSR) && !l(t.spatialReference, this.query.outSR) ? e.queryGeometry = h({\n        spatialReference: this.query.outSR,\n        ...c(t, t.spatialReference, this.query.outSR)\n      }) : e.queryGeometry = h({\n        spatialReference: this.query.outSR,\n        ...t\n      });\n    }\n    return e;\n  }\n  createSnappingResponse(t, i) {\n    const s = this.featureAdapter,\n      a = N(this.hasZ, this.hasM),\n      {\n        point: r,\n        mode: n\n      } = t,\n      o = \"number\" == typeof t.distance ? t.distance : t.distance.x,\n      l = \"number\" == typeof t.distance ? t.distance : t.distance.y,\n      u = {\n        candidates: []\n      },\n      c = \"esriGeometryPolygon\" === this.geometryType,\n      h = this._getPointCreator(n, this.spatialReference, i),\n      f = new q(null, 0),\n      g = new q(null, 0),\n      p = {\n        x: 0,\n        y: 0,\n        z: 0\n      };\n    for (const y of this.items) {\n      const i = s.getGeometry(y);\n      if (e(i)) continue;\n      const {\n        coords: n,\n        lengths: x\n      } = i;\n      if (f.coords = n, g.coords = n, t.types & D.EDGE) {\n        let e = 0;\n        for (let t = 0; t < x.length; t++) {\n          const i = x[t];\n          for (let t = 0; t < i; t++, e += a) {\n            const n = f;\n            if (n.coordsIndex = e, t !== i - 1) {\n              const t = g;\n              t.coordsIndex = e + a;\n              const i = p;\n              E(p, r, n, t);\n              const c = (r.x - i.x) / o,\n                m = (r.y - i.y) / l,\n                f = c * c + m * m;\n              f <= 1 && u.candidates.push(d(s.getObjectId(y), h(i), Math.sqrt(f), h(n), h(t)));\n            }\n          }\n        }\n      }\n      if (t.types & D.VERTEX) {\n        const e = c ? n.length - a : n.length;\n        for (let t = 0; t < e; t += a) {\n          const e = f;\n          e.coordsIndex = t;\n          const i = (r.x - e.x) / o,\n            a = (r.y - e.y) / l,\n            n = i * i + a * a;\n          n <= 1 && u.candidates.push(m(s.getObjectId(y), h(e), Math.sqrt(n)));\n        }\n      }\n    }\n    return u.candidates.sort((e, t) => e.distance - t.distance), u;\n  }\n  _getPointCreator(e, i, s) {\n    const a = t(s) && !l(i, s) ? e => c(e, i, s) : e => e,\n      {\n        hasZ: r\n      } = this,\n      n = 0;\n    return \"3d\" === e ? r ? _ref => {\n      let {\n        x: e,\n        y: t,\n        z: i\n      } = _ref;\n      return a({\n        x: e,\n        y: t,\n        z: i\n      });\n    } : _ref2 => {\n      let {\n        x: e,\n        y: t\n      } = _ref2;\n      return a({\n        x: e,\n        y: t,\n        z: n\n      });\n    } : _ref3 => {\n      let {\n        x: e,\n        y: t\n      } = _ref3;\n      return a({\n        x: e,\n        y: t\n      });\n    };\n  }\n  async createSummaryStatisticsResponse(e) {\n    const {\n        field: t,\n        valueExpression: i,\n        normalizationField: s,\n        normalizationType: a,\n        normalizationTotal: r,\n        minValue: n,\n        maxValue: o,\n        scale: l\n      } = e,\n      u = this.fieldsIndex.isDateField(t),\n      c = await this._getDataValues({\n        field: t,\n        valueExpression: i,\n        normalizationField: s,\n        normalizationType: a,\n        normalizationTotal: r,\n        scale: l\n      }),\n      d = y({\n        normalizationType: a,\n        normalizationField: s,\n        minValue: n,\n        maxValue: o\n      }),\n      m = this.fieldsIndex.get(t),\n      h = {\n        value: .5,\n        fieldType: m?.type\n      },\n      f = p(m) ? x({\n        values: c,\n        supportsNullCount: d,\n        percentileParams: h\n      }) : I({\n        values: c,\n        minValue: n,\n        maxValue: o,\n        useSampleStdDev: !a,\n        supportsNullCount: d,\n        percentileParams: h\n      });\n    return T(f, u);\n  }\n  async createUniqueValuesResponse(e) {\n    const {\n        field: t,\n        valueExpression: i,\n        domains: s,\n        returnAllCodedValues: a,\n        scale: r\n      } = e,\n      n = await this._getDataValues({\n        field: t,\n        field2: e.field2,\n        field3: e.field3,\n        fieldDelimiter: e.fieldDelimiter,\n        valueExpression: i,\n        scale: r\n      }),\n      o = V(n);\n    return F(o, s, a, e.fieldDelimiter);\n  }\n  async createClassBreaksResponse(e) {\n    const {\n        field: t,\n        valueExpression: i,\n        normalizationField: s,\n        normalizationType: a,\n        normalizationTotal: r,\n        classificationMethod: n,\n        standardDeviationInterval: o,\n        minValue: l,\n        maxValue: u,\n        numClasses: c,\n        scale: d\n      } = e,\n      m = await this._getDataValues({\n        field: t,\n        valueExpression: i,\n        normalizationField: s,\n        normalizationType: a,\n        normalizationTotal: r,\n        scale: d\n      }),\n      h = S(m, {\n        field: t,\n        normalizationField: s,\n        normalizationType: a,\n        normalizationTotal: r,\n        classificationMethod: n,\n        standardDeviationInterval: o,\n        minValue: l,\n        maxValue: u,\n        numClasses: c\n      });\n    return _(h, n);\n  }\n  async createHistogramResponse(e) {\n    const {\n        field: t,\n        valueExpression: i,\n        normalizationField: s,\n        normalizationType: a,\n        normalizationTotal: r,\n        classificationMethod: n,\n        standardDeviationInterval: o,\n        minValue: l,\n        maxValue: u,\n        numBins: c,\n        scale: d\n      } = e,\n      m = await this._getDataValues({\n        field: t,\n        valueExpression: i,\n        normalizationField: s,\n        normalizationType: a,\n        normalizationTotal: r,\n        scale: d\n      });\n    return z(m, {\n      field: t,\n      normalizationField: s,\n      normalizationType: a,\n      normalizationTotal: r,\n      classificationMethod: n,\n      standardDeviationInterval: o,\n      minValue: l,\n      maxValue: u,\n      numBins: c\n    });\n  }\n  _sortFeatures(e, t, i) {\n    if (e.length > 1 && t && t.length) for (const s of t.reverse()) {\n      const t = s.split(\" \"),\n        a = t[0],\n        r = this.fieldsIndex.get(a),\n        n = !!t[1] && \"desc\" === t[1].toLowerCase(),\n        o = v(r?.type, n);\n      e.sort((e, t) => {\n        const s = i(e, a, r),\n          n = i(t, a, r);\n        return o(s, n);\n      });\n    }\n  }\n  _createFeatureQueryResponse(e) {\n    const t = this.items,\n      {\n        geometryType: i,\n        hasM: s,\n        hasZ: a,\n        objectIdField: r,\n        spatialReference: o\n      } = this,\n      {\n        outFields: l,\n        outSR: u,\n        quantizationParameters: c,\n        resultRecordCount: d,\n        resultOffset: m,\n        returnZ: f,\n        returnM: g\n      } = e,\n      p = null != d && t.length > (m || 0) + d,\n      y = l && (l.includes(\"*\") ? [...this.fieldsIndex.fields] : l.map(e => this.fieldsIndex.get(e)));\n    return {\n      exceededTransferLimit: p,\n      features: this._createFeatures(e, t),\n      fields: y,\n      geometryType: i,\n      hasM: s && g,\n      hasZ: a && f,\n      objectIdFieldName: r,\n      spatialReference: h(u || o),\n      transform: c && n(c) || null\n    };\n  }\n  _createFeatures(e, t) {\n    const i = new u(e, this.featureAdapter, this.fieldsIndex),\n      {\n        hasM: s,\n        hasZ: a\n      } = this,\n      {\n        orderByFields: r,\n        quantizationParameters: o,\n        returnGeometry: l,\n        returnCentroid: c,\n        maxAllowableOffset: d,\n        resultOffset: m,\n        resultRecordCount: h,\n        returnZ: p = !1,\n        returnM: y = !1\n      } = e,\n      x = a && p,\n      I = s && y;\n    let T = [],\n      V = 0;\n    const F = [...t];\n    if (this._sortFeatures(F, r, (e, t, s) => i.getFieldValue(e, t, s)), l || c) {\n      const e = n(o) ?? void 0;\n      if (l && !c) for (const t of F) T[V++] = {\n        attributes: i.getAttributes(t),\n        geometry: f(this.geometryType, this.hasZ, this.hasM, this.featureAdapter.getGeometry(t), d, e, x, I)\n      };else if (!l && c) for (const t of F) T[V++] = {\n        attributes: i.getAttributes(t),\n        centroid: g(this, this.featureAdapter.getCentroid(t, this), e)\n      };else for (const t of F) T[V++] = {\n        attributes: i.getAttributes(t),\n        centroid: g(this, this.featureAdapter.getCentroid(t, this), e),\n        geometry: f(this.geometryType, this.hasZ, this.hasM, this.featureAdapter.getGeometry(t), d, e, x, I)\n      };\n    } else for (const n of F) {\n      const e = i.getAttributes(n);\n      e && (T[V++] = {\n        attributes: e\n      });\n    }\n    const S = m || 0;\n    if (null != h) {\n      const e = S + h;\n      T = T.slice(S, Math.min(T.length, e));\n    }\n    return T;\n  }\n  _createExceedsLimitQueryResponse(e) {\n    let i = !1,\n      s = Number.POSITIVE_INFINITY,\n      a = Number.POSITIVE_INFINITY,\n      r = Number.POSITIVE_INFINITY;\n    for (const t of e.outStatistics ?? []) if (\"exceedslimit\" === t.statisticType) {\n      s = null != t.maxPointCount ? t.maxPointCount : Number.POSITIVE_INFINITY, a = null != t.maxRecordCount ? t.maxRecordCount : Number.POSITIVE_INFINITY, r = null != t.maxVertexCount ? t.maxVertexCount : Number.POSITIVE_INFINITY;\n      break;\n    }\n    if (\"esriGeometryPoint\" === this.geometryType) i = this.items.length > s;else if (this.items.length > a) i = !0;else {\n      const e = N(this.hasZ, this.hasM),\n        s = this.featureAdapter;\n      i = this.items.reduce((e, i) => {\n        const a = s.getGeometry(i);\n        return e + (t(a) && a.coords.length || 0);\n      }, 0) / e > r;\n    }\n    return {\n      fields: [{\n        name: \"exceedslimit\",\n        type: \"esriFieldTypeInteger\",\n        alias: \"exceedslimit\",\n        sqlType: \"sqlTypeInteger\",\n        domain: null,\n        defaultValue: null\n      }],\n      features: [{\n        attributes: {\n          exceedslimit: Number(i)\n        }\n      }]\n    };\n  }\n  async _createStatisticsQueryResponse(e) {\n    const t = {\n        attributes: {}\n      },\n      i = [],\n      s = new Map(),\n      a = new Map(),\n      r = new Map(),\n      n = new Map(),\n      o = new u(e, this.featureAdapter, this.fieldsIndex),\n      l = e.outStatistics,\n      {\n        groupByFieldsForStatistics: c,\n        having: d,\n        orderByFields: m\n      } = e,\n      h = c && c.length,\n      f = !!h,\n      g = f ? c[0] : null,\n      p = f && !this.fieldsIndex.get(g);\n    for (const u of l ?? []) {\n      const {\n          outStatisticFieldName: e,\n          statisticType: l\n        } = u,\n        m = u,\n        y = \"exceedslimit\" !== l ? u.onStatisticField : void 0,\n        x = \"percentile_disc\" === l || \"percentile_cont\" === l,\n        I = \"EnvelopeAggregate\" === l || \"CentroidAggregate\" === l || \"ConvexHullAggregate\" === l,\n        T = f && 1 === h && (y === g || p) && \"count\" === l;\n      if (f) {\n        if (!r.has(y)) {\n          const e = [];\n          for (const t of c) {\n            const i = this._getAttributeValues(o, t, s);\n            e.push(i);\n          }\n          r.set(y, this._calculateUniqueValues(e, !I && o.returnDistinctValues));\n        }\n        const t = r.get(y);\n        for (const i in t) {\n          const {\n              count: a,\n              data: r,\n              items: l,\n              itemPositions: u\n            } = t[i],\n            h = r.join(\",\");\n          if (!d || o.validateItems(l, d)) {\n            const t = n.get(h) || {\n              attributes: {}\n            };\n            if (I) {\n              t.aggregateGeometries || (t.aggregateGeometries = {});\n              const {\n                aggregateGeometries: e,\n                outStatisticFieldName: i\n              } = await this._getAggregateGeometry(m, l);\n              t.aggregateGeometries[i] = e;\n            } else {\n              let i = null;\n              if (T) i = a;else {\n                const e = this._getAttributeValues(o, y, s),\n                  t = u.map(t => e[t]);\n                i = x && \"statisticParameters\" in m ? this._getPercentileValue(m, t) : this._getStatisticValue(m, t, null, o.returnDistinctValues);\n              }\n              t.attributes[e] = i;\n            }\n            let i = 0;\n            c.forEach((e, s) => t.attributes[this.fieldsIndex.get(e) ? e : \"EXPR_\" + ++i] = r[s]), n.set(h, t);\n          }\n        }\n      } else if (I) {\n        t.aggregateGeometries || (t.aggregateGeometries = {});\n        const {\n          aggregateGeometries: e,\n          outStatisticFieldName: i\n        } = await this._getAggregateGeometry(m, this.items);\n        t.aggregateGeometries[i] = e;\n      } else {\n        const i = this._getAttributeValues(o, y, s);\n        t.attributes[e] = x && \"statisticParameters\" in m ? this._getPercentileValue(m, i) : this._getStatisticValue(m, i, a, o.returnDistinctValues);\n      }\n      i.push({\n        name: e,\n        alias: e,\n        type: \"esriFieldTypeDouble\"\n      });\n    }\n    const y = f ? Array.from(n.values()) : [t];\n    return this._sortFeatures(y, m, (e, t) => e.attributes[t]), {\n      fields: i,\n      features: y\n    };\n  }\n  async _getAggregateGeometry(e, t) {\n    const n = await import(\"../../../geometry/geometryEngineJSON.js\"),\n      {\n        statisticType: o,\n        outStatisticFieldName: l\n      } = e,\n      {\n        featureAdapter: u,\n        spatialReference: c,\n        geometryType: d,\n        hasZ: m,\n        hasM: h\n      } = this,\n      g = t.map(e => f(d, m, h, u.getGeometry(e))),\n      p = n.convexHull(c, g, !0)[0],\n      y = {\n        aggregateGeometries: null,\n        outStatisticFieldName: null\n      };\n    if (\"EnvelopeAggregate\" === o) {\n      const e = p ? a(p) : r(n.union(c, g));\n      y.aggregateGeometries = {\n        ...e,\n        spatialReference: c\n      }, y.outStatisticFieldName = l || \"extent\";\n    } else if (\"CentroidAggregate\" === o) {\n      const e = p ? i(p) : s(r(n.union(c, g)));\n      y.aggregateGeometries = {\n        x: e[0],\n        y: e[1],\n        spatialReference: c\n      }, y.outStatisticFieldName = l || \"centroid\";\n    } else \"ConvexHullAggregate\" === o && (y.aggregateGeometries = p, y.outStatisticFieldName = l || \"convexHull\");\n    return y;\n  }\n  _getStatisticValue(e, t, i, s) {\n    const {\n      onStatisticField: a,\n      statisticType: r\n    } = e;\n    let n = null;\n    n = i?.has(a) ? i.get(a) : p(this.fieldsIndex.get(a)) ? x({\n      values: t,\n      returnDistinct: s\n    }) : I({\n      values: s ? [...new Set(t)] : t,\n      minValue: null,\n      maxValue: null,\n      useSampleStdDev: !0\n    }), i && i.set(a, n);\n    return n[\"var\" === r ? \"variance\" : r];\n  }\n  _getPercentileValue(e, t) {\n    const {\n        onStatisticField: i,\n        statisticParameters: s,\n        statisticType: a\n      } = e,\n      {\n        value: r,\n        orderBy: n\n      } = s,\n      o = this.fieldsIndex.get(i);\n    return b(t, {\n      value: r,\n      orderBy: n,\n      fieldType: o?.type,\n      isDiscrete: \"percentile_disc\" === a\n    });\n  }\n  _getAttributeValues(e, t, i) {\n    if (i.has(t)) return i.get(t);\n    const s = this.fieldsIndex.get(t),\n      a = this.items.map(i => e.getFieldValue(i, t, s));\n    return i.set(t, a), a;\n  }\n  _getAttributeDataValues(e, t) {\n    return this.items.map(i => e.getDataValue(i, {\n      field: t.field,\n      field2: t.field2,\n      field3: t.field3,\n      fieldDelimiter: t.fieldDelimiter,\n      normalizationField: t.normalizationField,\n      normalizationType: t.normalizationType,\n      normalizationTotal: t.normalizationTotal\n    }));\n  }\n  async _getAttributeExpressionValues(e, t, i) {\n    const {\n        arcadeUtils: s\n      } = await R(),\n      a = s.createFunction(t),\n      r = i && s.getViewInfo(i);\n    return e.getExpressionValues(this.items, a, r, s);\n  }\n  _calculateUniqueValues(e, t) {\n    const i = {},\n      s = this.items,\n      a = s.length;\n    for (let r = 0; r < a; r++) {\n      const a = s[r],\n        n = [];\n      for (const t of e) n.push(t[r]);\n      const o = n.join(\",\");\n      null == i[o] ? i[o] = {\n        count: 1,\n        data: n,\n        items: [a],\n        itemPositions: [r]\n      } : (t || i[o].count++, i[o].items.push(a), i[o].itemPositions.push(r));\n    }\n    return i;\n  }\n  async _getDataValues(e) {\n    const t = new u(this.query, this.featureAdapter, this.fieldsIndex),\n      {\n        valueExpression: i,\n        field: s,\n        normalizationField: a,\n        normalizationType: r,\n        normalizationTotal: n,\n        scale: o\n      } = e,\n      l = i ? {\n        viewingMode: \"map\",\n        scale: o,\n        spatialReference: this.query.outSR || this.spatialReference\n      } : null;\n    return i ? this._getAttributeExpressionValues(t, i, l) : this._getAttributeDataValues(t, {\n      field: s,\n      field2: e.field2,\n      field3: e.field3,\n      fieldDelimiter: e.fieldDelimiter,\n      normalizationField: a,\n      normalizationType: r,\n      normalizationTotal: n\n    });\n  }\n}\nfunction E(e, t, i, s) {\n  const a = s.x - i.x,\n    r = s.y - i.y,\n    n = a * a + r * r,\n    o = (t.x - i.x) * a + (t.y - i.y) * r,\n    l = Math.min(1, Math.max(0, o / n));\n  e.x = i.x + a * l, e.y = i.y + r * l;\n}\nfunction N(e, t) {\n  return e ? t ? 4 : 3 : t ? 3 : 2;\n}\nvar D;\n!function (e) {\n  e[e.NONE = 0] = \"NONE\", e[e.EDGE = 1] = \"EDGE\", e[e.VERTEX = 2] = \"VERTEX\";\n}(D || (D = {}));\nclass q {\n  constructor(e, t) {\n    this.coords = e, this.coordsIndex = t;\n  }\n  get x() {\n    return this.coords[this.coordsIndex];\n  }\n  get y() {\n    return this.coords[this.coordsIndex + 1];\n  }\n  get z() {\n    return this.coords[this.coordsIndex + 2];\n  }\n}\nexport { A as QueryEngineResult, D as SnappingTypes };","map":{"version":3,"names":["isNone","e","isSome","t","polygonCentroid","i","extentCentroid","s","getPolygonExtent","a","getGeometryExtent","r","toQuantizationTransform","n","isValid","o","equals","l","u","project","c","makeEdgeCandidate","d","makeVertexCandidate","m","cleanFromGeometryEngine","h","getGeometry","f","transformCentroid","g","isStringField","p","isNullCountSupported","y","calculateStringStatistics","x","calculateStatistics","I","processSummaryStatisticsResult","T","calculateUniqueValuesCount","V","createUVResult","F","calculateClassBreaks","S","resolveCBResult","_","calculateHistogram","z","getAttributeComparator","v","calculatePercentile","b","loadArcade","R","A","constructor","items","query","geometryType","hasM","hasZ","fieldsIndex","objectIdField","spatialReference","featureAdapter","size","length","createQueryResponseForCount","outStatistics","countDistinctValues","groupByFieldsForStatistics","having","Map","Set","statisticType","onStatisticField","has","_getAttributeValues","push","set","_calculateUniqueValues","returnDistinctValues","get","data","join","validateItems","add","createQueryResponse","some","_createExceedsLimitQueryResponse","_createStatisticsQueryResponse","_createFeatureQueryResponse","returnQueryGeometry","geometry","outSR","queryGeometry","createSnappingResponse","N","point","mode","distance","candidates","_getPointCreator","q","coords","lengths","types","D","EDGE","coordsIndex","E","getObjectId","Math","sqrt","VERTEX","sort","_ref","_ref2","_ref3","createSummaryStatisticsResponse","field","valueExpression","normalizationField","normalizationType","normalizationTotal","minValue","maxValue","scale","isDateField","_getDataValues","value","fieldType","type","values","supportsNullCount","percentileParams","useSampleStdDev","createUniqueValuesResponse","domains","returnAllCodedValues","field2","field3","fieldDelimiter","createClassBreaksResponse","classificationMethod","standardDeviationInterval","numClasses","createHistogramResponse","numBins","_sortFeatures","reverse","split","toLowerCase","outFields","quantizationParameters","resultRecordCount","resultOffset","returnZ","returnM","includes","fields","map","exceededTransferLimit","features","_createFeatures","objectIdFieldName","transform","orderByFields","returnGeometry","returnCentroid","maxAllowableOffset","getFieldValue","attributes","getAttributes","centroid","getCentroid","slice","min","Number","POSITIVE_INFINITY","maxPointCount","maxRecordCount","maxVertexCount","reduce","name","alias","sqlType","domain","defaultValue","exceedslimit","outStatisticFieldName","count","itemPositions","aggregateGeometries","_getAggregateGeometry","_getPercentileValue","_getStatisticValue","forEach","Array","from","convexHull","union","returnDistinct","statisticParameters","orderBy","isDiscrete","_getAttributeDataValues","getDataValue","_getAttributeExpressionValues","arcadeUtils","createFunction","getViewInfo","getExpressionValues","viewingMode","max","NONE","QueryEngineResult","SnappingTypes"],"sources":["C:/code-challenge-react/frontend/node_modules/@arcgis/core/layers/graphics/data/QueryEngineResult.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport{isNone as e,isSome as t}from\"../../../core/maybe.js\";import{polygonCentroid as i,extentCentroid as s}from\"../../../geometry/support/centroid.js\";import{getPolygonExtent as a,getGeometryExtent as r}from\"../../../geometry/support/extentUtils.js\";import{toQuantizationTransform as n}from\"../../../geometry/support/quantizationUtils.js\";import{isValid as o,equals as l}from\"../../../geometry/support/spatialReferenceUtils.js\";import u from\"./AttributesBuilder.js\";import{project as c}from\"./projectionSupport.js\";import{makeEdgeCandidate as d,makeVertexCandidate as m}from\"./SnappingCandidate.js\";import{cleanFromGeometryEngine as h,getGeometry as f,transformCentroid as g}from\"./utils.js\";import{isStringField as p}from\"../../support/fieldUtils.js\";import{isNullCountSupported as y,calculateStringStatistics as x,calculateStatistics as I,processSummaryStatisticsResult as T,calculateUniqueValuesCount as V,createUVResult as F,calculateClassBreaks as S,resolveCBResult as _,calculateHistogram as z,getAttributeComparator as v,calculatePercentile as b}from\"../../../statistics/utils.js\";import{loadArcade as R}from\"../../../support/arcadeOnDemand.js\";class A{constructor(e,t,i){this.items=e,this.query=t,this.geometryType=i.geometryType,this.hasM=i.hasM,this.hasZ=i.hasZ,this.fieldsIndex=i.fieldsIndex,this.objectIdField=i.objectIdField,this.spatialReference=i.spatialReference,this.featureAdapter=i.featureAdapter}get size(){return this.items.length}createQueryResponseForCount(){const e=new u(this.query,this.featureAdapter,this.fieldsIndex);if(!this.query.outStatistics)return e.countDistinctValues(this.items);const{groupByFieldsForStatistics:t,having:i,outStatistics:s}=this.query,a=t?.length;if(!!!a)return 1;const r=new Map,n=new Map,o=new Set;for(const l of s){const{statisticType:s}=l,a=\"exceedslimit\"!==s?l.onStatisticField:void 0;if(!n.has(a)){const i=[];for(const s of t){const t=this._getAttributeValues(e,s,r);i.push(t)}n.set(a,this._calculateUniqueValues(i,e.returnDistinctValues))}const u=n.get(a);for(const t in u){const{data:s,items:a}=u[t],r=s.join(\",\");i&&!e.validateItems(a,i)||o.add(r)}}return o.size}async createQueryResponse(){let e;if(this.query.outStatistics){e=this.query.outStatistics.some((e=>\"exceedslimit\"===e.statisticType))?this._createExceedsLimitQueryResponse(this.query):await this._createStatisticsQueryResponse(this.query)}else e=this._createFeatureQueryResponse(this.query);if(this.query.returnQueryGeometry){const t=this.query.geometry;o(this.query.outSR)&&!l(t.spatialReference,this.query.outSR)?e.queryGeometry=h({spatialReference:this.query.outSR,...c(t,t.spatialReference,this.query.outSR)}):e.queryGeometry=h({spatialReference:this.query.outSR,...t})}return e}createSnappingResponse(t,i){const s=this.featureAdapter,a=N(this.hasZ,this.hasM),{point:r,mode:n}=t,o=\"number\"==typeof t.distance?t.distance:t.distance.x,l=\"number\"==typeof t.distance?t.distance:t.distance.y,u={candidates:[]},c=\"esriGeometryPolygon\"===this.geometryType,h=this._getPointCreator(n,this.spatialReference,i),f=new q(null,0),g=new q(null,0),p={x:0,y:0,z:0};for(const y of this.items){const i=s.getGeometry(y);if(e(i))continue;const{coords:n,lengths:x}=i;if(f.coords=n,g.coords=n,t.types&D.EDGE){let e=0;for(let t=0;t<x.length;t++){const i=x[t];for(let t=0;t<i;t++,e+=a){const n=f;if(n.coordsIndex=e,t!==i-1){const t=g;t.coordsIndex=e+a;const i=p;E(p,r,n,t);const c=(r.x-i.x)/o,m=(r.y-i.y)/l,f=c*c+m*m;f<=1&&u.candidates.push(d(s.getObjectId(y),h(i),Math.sqrt(f),h(n),h(t)))}}}}if(t.types&D.VERTEX){const e=c?n.length-a:n.length;for(let t=0;t<e;t+=a){const e=f;e.coordsIndex=t;const i=(r.x-e.x)/o,a=(r.y-e.y)/l,n=i*i+a*a;n<=1&&u.candidates.push(m(s.getObjectId(y),h(e),Math.sqrt(n)))}}}return u.candidates.sort(((e,t)=>e.distance-t.distance)),u}_getPointCreator(e,i,s){const a=t(s)&&!l(i,s)?e=>c(e,i,s):e=>e,{hasZ:r}=this,n=0;return\"3d\"===e?r?({x:e,y:t,z:i})=>a({x:e,y:t,z:i}):({x:e,y:t})=>a({x:e,y:t,z:n}):({x:e,y:t})=>a({x:e,y:t})}async createSummaryStatisticsResponse(e){const{field:t,valueExpression:i,normalizationField:s,normalizationType:a,normalizationTotal:r,minValue:n,maxValue:o,scale:l}=e,u=this.fieldsIndex.isDateField(t),c=await this._getDataValues({field:t,valueExpression:i,normalizationField:s,normalizationType:a,normalizationTotal:r,scale:l}),d=y({normalizationType:a,normalizationField:s,minValue:n,maxValue:o}),m=this.fieldsIndex.get(t),h={value:.5,fieldType:m?.type},f=p(m)?x({values:c,supportsNullCount:d,percentileParams:h}):I({values:c,minValue:n,maxValue:o,useSampleStdDev:!a,supportsNullCount:d,percentileParams:h});return T(f,u)}async createUniqueValuesResponse(e){const{field:t,valueExpression:i,domains:s,returnAllCodedValues:a,scale:r}=e,n=await this._getDataValues({field:t,field2:e.field2,field3:e.field3,fieldDelimiter:e.fieldDelimiter,valueExpression:i,scale:r}),o=V(n);return F(o,s,a,e.fieldDelimiter)}async createClassBreaksResponse(e){const{field:t,valueExpression:i,normalizationField:s,normalizationType:a,normalizationTotal:r,classificationMethod:n,standardDeviationInterval:o,minValue:l,maxValue:u,numClasses:c,scale:d}=e,m=await this._getDataValues({field:t,valueExpression:i,normalizationField:s,normalizationType:a,normalizationTotal:r,scale:d}),h=S(m,{field:t,normalizationField:s,normalizationType:a,normalizationTotal:r,classificationMethod:n,standardDeviationInterval:o,minValue:l,maxValue:u,numClasses:c});return _(h,n)}async createHistogramResponse(e){const{field:t,valueExpression:i,normalizationField:s,normalizationType:a,normalizationTotal:r,classificationMethod:n,standardDeviationInterval:o,minValue:l,maxValue:u,numBins:c,scale:d}=e,m=await this._getDataValues({field:t,valueExpression:i,normalizationField:s,normalizationType:a,normalizationTotal:r,scale:d});return z(m,{field:t,normalizationField:s,normalizationType:a,normalizationTotal:r,classificationMethod:n,standardDeviationInterval:o,minValue:l,maxValue:u,numBins:c})}_sortFeatures(e,t,i){if(e.length>1&&t&&t.length)for(const s of t.reverse()){const t=s.split(\" \"),a=t[0],r=this.fieldsIndex.get(a),n=!!t[1]&&\"desc\"===t[1].toLowerCase(),o=v(r?.type,n);e.sort(((e,t)=>{const s=i(e,a,r),n=i(t,a,r);return o(s,n)}))}}_createFeatureQueryResponse(e){const t=this.items,{geometryType:i,hasM:s,hasZ:a,objectIdField:r,spatialReference:o}=this,{outFields:l,outSR:u,quantizationParameters:c,resultRecordCount:d,resultOffset:m,returnZ:f,returnM:g}=e,p=null!=d&&t.length>(m||0)+d,y=l&&(l.includes(\"*\")?[...this.fieldsIndex.fields]:l.map((e=>this.fieldsIndex.get(e))));return{exceededTransferLimit:p,features:this._createFeatures(e,t),fields:y,geometryType:i,hasM:s&&g,hasZ:a&&f,objectIdFieldName:r,spatialReference:h(u||o),transform:c&&n(c)||null}}_createFeatures(e,t){const i=new u(e,this.featureAdapter,this.fieldsIndex),{hasM:s,hasZ:a}=this,{orderByFields:r,quantizationParameters:o,returnGeometry:l,returnCentroid:c,maxAllowableOffset:d,resultOffset:m,resultRecordCount:h,returnZ:p=!1,returnM:y=!1}=e,x=a&&p,I=s&&y;let T=[],V=0;const F=[...t];if(this._sortFeatures(F,r,((e,t,s)=>i.getFieldValue(e,t,s))),l||c){const e=n(o)??void 0;if(l&&!c)for(const t of F)T[V++]={attributes:i.getAttributes(t),geometry:f(this.geometryType,this.hasZ,this.hasM,this.featureAdapter.getGeometry(t),d,e,x,I)};else if(!l&&c)for(const t of F)T[V++]={attributes:i.getAttributes(t),centroid:g(this,this.featureAdapter.getCentroid(t,this),e)};else for(const t of F)T[V++]={attributes:i.getAttributes(t),centroid:g(this,this.featureAdapter.getCentroid(t,this),e),geometry:f(this.geometryType,this.hasZ,this.hasM,this.featureAdapter.getGeometry(t),d,e,x,I)}}else for(const n of F){const e=i.getAttributes(n);e&&(T[V++]={attributes:e})}const S=m||0;if(null!=h){const e=S+h;T=T.slice(S,Math.min(T.length,e))}return T}_createExceedsLimitQueryResponse(e){let i=!1,s=Number.POSITIVE_INFINITY,a=Number.POSITIVE_INFINITY,r=Number.POSITIVE_INFINITY;for(const t of e.outStatistics??[])if(\"exceedslimit\"===t.statisticType){s=null!=t.maxPointCount?t.maxPointCount:Number.POSITIVE_INFINITY,a=null!=t.maxRecordCount?t.maxRecordCount:Number.POSITIVE_INFINITY,r=null!=t.maxVertexCount?t.maxVertexCount:Number.POSITIVE_INFINITY;break}if(\"esriGeometryPoint\"===this.geometryType)i=this.items.length>s;else if(this.items.length>a)i=!0;else{const e=N(this.hasZ,this.hasM),s=this.featureAdapter;i=this.items.reduce(((e,i)=>{const a=s.getGeometry(i);return e+(t(a)&&a.coords.length||0)}),0)/e>r}return{fields:[{name:\"exceedslimit\",type:\"esriFieldTypeInteger\",alias:\"exceedslimit\",sqlType:\"sqlTypeInteger\",domain:null,defaultValue:null}],features:[{attributes:{exceedslimit:Number(i)}}]}}async _createStatisticsQueryResponse(e){const t={attributes:{}},i=[],s=new Map,a=new Map,r=new Map,n=new Map,o=new u(e,this.featureAdapter,this.fieldsIndex),l=e.outStatistics,{groupByFieldsForStatistics:c,having:d,orderByFields:m}=e,h=c&&c.length,f=!!h,g=f?c[0]:null,p=f&&!this.fieldsIndex.get(g);for(const u of l??[]){const{outStatisticFieldName:e,statisticType:l}=u,m=u,y=\"exceedslimit\"!==l?u.onStatisticField:void 0,x=\"percentile_disc\"===l||\"percentile_cont\"===l,I=\"EnvelopeAggregate\"===l||\"CentroidAggregate\"===l||\"ConvexHullAggregate\"===l,T=f&&1===h&&(y===g||p)&&\"count\"===l;if(f){if(!r.has(y)){const e=[];for(const t of c){const i=this._getAttributeValues(o,t,s);e.push(i)}r.set(y,this._calculateUniqueValues(e,!I&&o.returnDistinctValues))}const t=r.get(y);for(const i in t){const{count:a,data:r,items:l,itemPositions:u}=t[i],h=r.join(\",\");if(!d||o.validateItems(l,d)){const t=n.get(h)||{attributes:{}};if(I){t.aggregateGeometries||(t.aggregateGeometries={});const{aggregateGeometries:e,outStatisticFieldName:i}=await this._getAggregateGeometry(m,l);t.aggregateGeometries[i]=e}else{let i=null;if(T)i=a;else{const e=this._getAttributeValues(o,y,s),t=u.map((t=>e[t]));i=x&&\"statisticParameters\"in m?this._getPercentileValue(m,t):this._getStatisticValue(m,t,null,o.returnDistinctValues)}t.attributes[e]=i}let i=0;c.forEach(((e,s)=>t.attributes[this.fieldsIndex.get(e)?e:\"EXPR_\"+ ++i]=r[s])),n.set(h,t)}}}else if(I){t.aggregateGeometries||(t.aggregateGeometries={});const{aggregateGeometries:e,outStatisticFieldName:i}=await this._getAggregateGeometry(m,this.items);t.aggregateGeometries[i]=e}else{const i=this._getAttributeValues(o,y,s);t.attributes[e]=x&&\"statisticParameters\"in m?this._getPercentileValue(m,i):this._getStatisticValue(m,i,a,o.returnDistinctValues)}i.push({name:e,alias:e,type:\"esriFieldTypeDouble\"})}const y=f?Array.from(n.values()):[t];return this._sortFeatures(y,m,((e,t)=>e.attributes[t])),{fields:i,features:y}}async _getAggregateGeometry(e,t){const n=await import(\"../../../geometry/geometryEngineJSON.js\"),{statisticType:o,outStatisticFieldName:l}=e,{featureAdapter:u,spatialReference:c,geometryType:d,hasZ:m,hasM:h}=this,g=t.map((e=>f(d,m,h,u.getGeometry(e)))),p=n.convexHull(c,g,!0)[0],y={aggregateGeometries:null,outStatisticFieldName:null};if(\"EnvelopeAggregate\"===o){const e=p?a(p):r(n.union(c,g));y.aggregateGeometries={...e,spatialReference:c},y.outStatisticFieldName=l||\"extent\"}else if(\"CentroidAggregate\"===o){const e=p?i(p):s(r(n.union(c,g)));y.aggregateGeometries={x:e[0],y:e[1],spatialReference:c},y.outStatisticFieldName=l||\"centroid\"}else\"ConvexHullAggregate\"===o&&(y.aggregateGeometries=p,y.outStatisticFieldName=l||\"convexHull\");return y}_getStatisticValue(e,t,i,s){const{onStatisticField:a,statisticType:r}=e;let n=null;n=i?.has(a)?i.get(a):p(this.fieldsIndex.get(a))?x({values:t,returnDistinct:s}):I({values:s?[...new Set(t)]:t,minValue:null,maxValue:null,useSampleStdDev:!0}),i&&i.set(a,n);return n[\"var\"===r?\"variance\":r]}_getPercentileValue(e,t){const{onStatisticField:i,statisticParameters:s,statisticType:a}=e,{value:r,orderBy:n}=s,o=this.fieldsIndex.get(i);return b(t,{value:r,orderBy:n,fieldType:o?.type,isDiscrete:\"percentile_disc\"===a})}_getAttributeValues(e,t,i){if(i.has(t))return i.get(t);const s=this.fieldsIndex.get(t),a=this.items.map((i=>e.getFieldValue(i,t,s)));return i.set(t,a),a}_getAttributeDataValues(e,t){return this.items.map((i=>e.getDataValue(i,{field:t.field,field2:t.field2,field3:t.field3,fieldDelimiter:t.fieldDelimiter,normalizationField:t.normalizationField,normalizationType:t.normalizationType,normalizationTotal:t.normalizationTotal})))}async _getAttributeExpressionValues(e,t,i){const{arcadeUtils:s}=await R(),a=s.createFunction(t),r=i&&s.getViewInfo(i);return e.getExpressionValues(this.items,a,r,s)}_calculateUniqueValues(e,t){const i={},s=this.items,a=s.length;for(let r=0;r<a;r++){const a=s[r],n=[];for(const t of e)n.push(t[r]);const o=n.join(\",\");null==i[o]?i[o]={count:1,data:n,items:[a],itemPositions:[r]}:(t||i[o].count++,i[o].items.push(a),i[o].itemPositions.push(r))}return i}async _getDataValues(e){const t=new u(this.query,this.featureAdapter,this.fieldsIndex),{valueExpression:i,field:s,normalizationField:a,normalizationType:r,normalizationTotal:n,scale:o}=e,l=i?{viewingMode:\"map\",scale:o,spatialReference:this.query.outSR||this.spatialReference}:null;return i?this._getAttributeExpressionValues(t,i,l):this._getAttributeDataValues(t,{field:s,field2:e.field2,field3:e.field3,fieldDelimiter:e.fieldDelimiter,normalizationField:a,normalizationType:r,normalizationTotal:n})}}function E(e,t,i,s){const a=s.x-i.x,r=s.y-i.y,n=a*a+r*r,o=(t.x-i.x)*a+(t.y-i.y)*r,l=Math.min(1,Math.max(0,o/n));e.x=i.x+a*l,e.y=i.y+r*l}function N(e,t){return e?t?4:3:t?3:2}var D;!function(e){e[e.NONE=0]=\"NONE\",e[e.EDGE=1]=\"EDGE\",e[e.VERTEX=2]=\"VERTEX\"}(D||(D={}));class q{constructor(e,t){this.coords=e,this.coordsIndex=t}get x(){return this.coords[this.coordsIndex]}get y(){return this.coords[this.coordsIndex+1]}get z(){return this.coords[this.coordsIndex+2]}}export{A as QueryEngineResult,D as SnappingTypes};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}