{"ast":null,"code":"import _objectSpread from \"C:/code-challenge-react/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"C:/code-challenge-react/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/code-challenge-react/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/code-challenge-react/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/code-challenge-react/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport e from \"../../core/Error.js\";\nimport { isSome as r } from \"../../core/maybe.js\";\nimport { open as o } from \"../../core/workers/workers.js\";\nimport t from \"./PixelBlock.js\";\nvar n = /*#__PURE__*/function () {\n  function n() {\n    _classCallCheck(this, n);\n    this._workerThread = null, this._destroyed = !1;\n  }\n  _createClass(n, [{\n    key: \"initialize\",\n    value: function () {\n      var _initialize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var e;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return o(\"RasterWorker\");\n            case 2:\n              e = _context.sent;\n              this._destroyed ? e.close() : this._workerThread = e;\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function initialize() {\n        return _initialize.apply(this, arguments);\n      }\n      return initialize;\n    }()\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._destroyed = !0, this._workerThread && (this._workerThread.close(), this._workerThread = null);\n    }\n  }, {\n    key: \"convertVectorFieldData\",\n    value: function () {\n      var _convertVectorFieldData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(r, o) {\n        var _n;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (this._workerThread) {\n                _context2.next = 2;\n                break;\n              }\n              throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n            case 2:\n              _context2.next = 4;\n              return this._workerThread.invoke(\"convertVectorFieldData\", {\n                pixelBlock: r.pixelBlock.toJSON(),\n                type: r.dataType\n              }, o);\n            case 4:\n              _n = _context2.sent;\n              return _context2.abrupt(\"return\", _n ? new t(_n) : null);\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function convertVectorFieldData(_x, _x2) {\n        return _convertVectorFieldData.apply(this, arguments);\n      }\n      return convertVectorFieldData;\n    }()\n  }, {\n    key: \"decode\",\n    value: function () {\n      var _decode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(r, o) {\n        var _n2;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (this._workerThread) {\n                _context3.next = 2;\n                break;\n              }\n              throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n            case 2:\n              _context3.next = 4;\n              return this._workerThread.invoke(\"decode\", r, o);\n            case 4:\n              _n2 = _context3.sent;\n              return _context3.abrupt(\"return\", _n2 ? new t(_n2) : null);\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function decode(_x3, _x4) {\n        return _decode.apply(this, arguments);\n      }\n      return decode;\n    }()\n  }, {\n    key: \"symbolize\",\n    value: function () {\n      var _symbolize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(o, _n3) {\n        var a, i;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (this._workerThread) {\n                _context4.next = 2;\n                break;\n              }\n              throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n            case 2:\n              a = {\n                extent: o.extent && o.extent.toJSON(),\n                pixelBlock: r(o.pixelBlock) && o.pixelBlock.toJSON(),\n                simpleStretchParams: o.simpleStretchParams,\n                bandIds: o.bandIds\n              };\n              _context4.next = 5;\n              return this._workerThread.invoke(\"symbolize\", a, _n3);\n            case 5:\n              i = _context4.sent;\n              return _context4.abrupt(\"return\", i ? new t(i) : null);\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function symbolize(_x5, _x6) {\n        return _symbolize.apply(this, arguments);\n      }\n      return symbolize;\n    }()\n  }, {\n    key: \"updateSymbolizer\",\n    value: function () {\n      var _updateSymbolizer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(r, o) {\n        var _r$rendererJSON;\n        var t;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              if (this._workerThread) {\n                _context5.next = 2;\n                break;\n              }\n              throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n            case 2:\n              t = r === null || r === void 0 ? void 0 : (_r$rendererJSON = r.rendererJSON) === null || _r$rendererJSON === void 0 ? void 0 : _r$rendererJSON.histograms;\n              _context5.next = 5;\n              return Promise.all(this._workerThread.broadcast(\"updateSymbolizer\", {\n                symbolizerJSON: r.toJSON(),\n                histograms: t\n              }, o));\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function updateSymbolizer(_x7, _x8) {\n        return _updateSymbolizer.apply(this, arguments);\n      }\n      return updateSymbolizer;\n    }()\n  }, {\n    key: \"updateRasterFunction\",\n    value: function () {\n      var _updateRasterFunction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(r, o) {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              if (this._workerThread) {\n                _context6.next = 2;\n                break;\n              }\n              throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n            case 2:\n              _context6.next = 4;\n              return Promise.all(this._workerThread.broadcast(\"updateRasterFunction\", {\n                rasterFunctionJSON: r.toJSON()\n              }, o));\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function updateRasterFunction(_x9, _x10) {\n        return _updateRasterFunction.apply(this, arguments);\n      }\n      return updateRasterFunction;\n    }()\n  }, {\n    key: \"process\",\n    value: function () {\n      var _process = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(o, _n4) {\n        var _o$extent;\n        var a;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              if (this._workerThread) {\n                _context7.next = 2;\n                break;\n              }\n              throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n            case 2:\n              _context7.next = 4;\n              return this._workerThread.invoke(\"process\", {\n                extent: (_o$extent = o.extent) === null || _o$extent === void 0 ? void 0 : _o$extent.toJSON(),\n                primaryPixelBlocks: o.primaryPixelBlocks.map(function (e) {\n                  return r(e) ? e.toJSON() : null;\n                }),\n                primaryRasterIds: o.primaryRasterIds\n              }, _n4);\n            case 4:\n              a = _context7.sent;\n              return _context7.abrupt(\"return\", a ? new t(a) : null);\n            case 6:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function process(_x11, _x12) {\n        return _process.apply(this, arguments);\n      }\n      return process;\n    }()\n  }, {\n    key: \"stretch\",\n    value: function () {\n      var _stretch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(r, o) {\n        var _n5, a;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              if (this._workerThread) {\n                _context8.next = 2;\n                break;\n              }\n              throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n            case 2:\n              if (r !== null && r !== void 0 && r.pixelBlock) {\n                _context8.next = 4;\n                break;\n              }\n              return _context8.abrupt(\"return\", null);\n            case 4:\n              _n5 = {\n                srcPixelBlock: r.pixelBlock.toJSON(),\n                stretchParams: r.stretchParams\n              };\n              _context8.next = 7;\n              return this._workerThread.invoke(\"stretch\", _n5, o);\n            case 7:\n              a = _context8.sent;\n              return _context8.abrupt(\"return\", a ? new t(a) : null);\n            case 9:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function stretch(_x13, _x14) {\n        return _stretch.apply(this, arguments);\n      }\n      return stretch;\n    }()\n  }, {\n    key: \"split\",\n    value: function () {\n      var _split = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(r, o) {\n        var _n6, a;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              if (this._workerThread) {\n                _context9.next = 2;\n                break;\n              }\n              throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n            case 2:\n              if (r !== null && r !== void 0 && r.pixelBlock) {\n                _context9.next = 4;\n                break;\n              }\n              return _context9.abrupt(\"return\", null);\n            case 4:\n              _n6 = {\n                srcPixelBlock: r.pixelBlock.toJSON(),\n                tileSize: r.tileSize,\n                maximumPyramidLevel: r.maximumPyramidLevel\n              };\n              _context9.next = 7;\n              return this._workerThread.invoke(\"split\", _n6, o);\n            case 7:\n              a = _context9.sent;\n              return _context9.abrupt(\"return\", (a && a.forEach(function (e, r) {\n                a.set(r, e ? t.fromJSON(e) : null);\n              }), a));\n            case 9:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }));\n      function split(_x15, _x16) {\n        return _split.apply(this, arguments);\n      }\n      return split;\n    }()\n  }, {\n    key: \"estimateStatisticsHistograms\",\n    value: function () {\n      var _estimateStatisticsHistograms = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(r, o) {\n        var t;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              if (this._workerThread) {\n                _context10.next = 2;\n                break;\n              }\n              throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n            case 2:\n              if (r !== null && r !== void 0 && r.pixelBlock) {\n                _context10.next = 4;\n                break;\n              }\n              return _context10.abrupt(\"return\", null);\n            case 4:\n              t = {\n                srcPixelBlock: r.pixelBlock.toJSON()\n              };\n              _context10.next = 7;\n              return this._workerThread.invoke(\"estimateStatisticsHistograms\", t, o);\n            case 7:\n              return _context10.abrupt(\"return\", _context10.sent);\n            case 8:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }));\n      function estimateStatisticsHistograms(_x17, _x18) {\n        return _estimateStatisticsHistograms.apply(this, arguments);\n      }\n      return estimateStatisticsHistograms;\n    }()\n  }, {\n    key: \"mosaicAndTransform\",\n    value: function () {\n      var _mosaicAndTransform = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(o, _n7) {\n        var _o$srcPixelBlocks;\n        var a, i;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              if (this._workerThread) {\n                _context11.next = 2;\n                break;\n              }\n              throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n            case 2:\n              if (o !== null && o !== void 0 && (_o$srcPixelBlocks = o.srcPixelBlocks) !== null && _o$srcPixelBlocks !== void 0 && _o$srcPixelBlocks.length) {\n                _context11.next = 4;\n                break;\n              }\n              return _context11.abrupt(\"return\", {\n                pixelBlock: null\n              });\n            case 4:\n              a = _objectSpread(_objectSpread({}, o), {}, {\n                srcPixelBlocks: o.srcPixelBlocks.map(function (e) {\n                  return r(e) ? e.toJSON() : null;\n                })\n              });\n              _context11.next = 7;\n              return this._workerThread.invoke(\"mosaicAndTransform\", a, _n7);\n            case 7:\n              i = _context11.sent;\n              return _context11.abrupt(\"return\", {\n                pixelBlock: i.pixelBlock ? new t(i.pixelBlock) : null,\n                localNorthDirections: i.localNorthDirections\n              });\n            case 9:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }));\n      function mosaicAndTransform(_x19, _x20) {\n        return _mosaicAndTransform.apply(this, arguments);\n      }\n      return mosaicAndTransform;\n    }()\n  }, {\n    key: \"createFlowMesh\",\n    value: function () {\n      var _createFlowMesh = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(r, o) {\n        var t, _n8, a, i;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              if (this._workerThread) {\n                _context12.next = 2;\n                break;\n              }\n              throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n            case 2:\n              t = {\n                buffer: r.flowData.data.buffer,\n                maskBuffer: r.flowData.mask.buffer,\n                width: r.flowData.width,\n                height: r.flowData.height\n              };\n              _n8 = r.meshType;\n              a = r.simulationSettings;\n              _context12.next = 7;\n              return this._workerThread.invoke(\"createFlowMesh\", {\n                meshType: _n8,\n                flowData: t,\n                simulationSettings: a\n              }, _objectSpread(_objectSpread({}, o), {}, {\n                transferList: [t.buffer, t.maskBuffer]\n              }));\n            case 7:\n              i = _context12.sent;\n              return _context12.abrupt(\"return\", {\n                vertexData: new Float32Array(i.vertexBuffer),\n                indexData: new Uint32Array(i.indexBuffer)\n              });\n            case 9:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, this);\n      }));\n      function createFlowMesh(_x21, _x22) {\n        return _createFlowMesh.apply(this, arguments);\n      }\n      return createFlowMesh;\n    }()\n  }, {\n    key: \"getProjectionOffsetGrid\",\n    value: function getProjectionOffsetGrid(o, t) {\n      if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n      var _n9 = r(o.datumTransformation) ? o.datumTransformation.steps.map(function (e) {\n          return {\n            wkid: e.wkid,\n            wkt: e.wkt,\n            isInverse: e.isInverse\n          };\n        }) : null,\n        a = r(o.rasterTransform) ? o.rasterTransform.toJSON() : null,\n        i = {\n          projectedExtent: o.projectedExtent.toJSON(),\n          srcBufferExtent: o.srcBufferExtent.toJSON(),\n          pixelSize: o.pixelSize,\n          hasWrapAround: o.hasWrapAround,\n          spacing: o.spacing,\n          datumTransformationSteps: _n9,\n          rasterTransform: a,\n          isAdaptive: o.isAdaptive,\n          includeGCSGrid: o.includeGCSGrid\n        };\n      return this._workerThread.invoke(\"getProjectionOffsetGrid\", i, t);\n    }\n  }]);\n  return n;\n}();\nexport { n as default };","map":{"version":3,"names":["e","isSome","r","open","o","t","n","_classCallCheck","_workerThread","_destroyed","_createClass","key","value","_initialize","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","sent","close","stop","initialize","apply","arguments","destroy","_convertVectorFieldData","_callee2","_n","_callee2$","_context2","invoke","pixelBlock","toJSON","type","dataType","abrupt","convertVectorFieldData","_x","_x2","_decode","_callee3","_n2","_callee3$","_context3","decode","_x3","_x4","_symbolize","_callee4","a","i","_callee4$","_context4","extent","simpleStretchParams","bandIds","symbolize","_x5","_x6","_updateSymbolizer","_callee5","_r$rendererJSON","_callee5$","_context5","rendererJSON","histograms","Promise","all","broadcast","symbolizerJSON","updateSymbolizer","_x7","_x8","_updateRasterFunction","_callee6","_callee6$","_context6","rasterFunctionJSON","updateRasterFunction","_x9","_x10","_process","_callee7","_o$extent","_callee7$","_context7","primaryPixelBlocks","map","primaryRasterIds","process","_x11","_x12","_stretch","_callee8","_n5","_callee8$","_context8","srcPixelBlock","stretchParams","stretch","_x13","_x14","_split","_callee9","_n6","_callee9$","_context9","tileSize","maximumPyramidLevel","forEach","set","fromJSON","split","_x15","_x16","_estimateStatisticsHistograms","_callee10","_callee10$","_context10","estimateStatisticsHistograms","_x17","_x18","_mosaicAndTransform","_callee11","_o$srcPixelBlocks","_callee11$","_context11","srcPixelBlocks","length","_objectSpread","localNorthDirections","mosaicAndTransform","_x19","_x20","_createFlowMesh","_callee12","_n8","_callee12$","_context12","buffer","flowData","data","maskBuffer","mask","width","height","meshType","simulationSettings","transferList","vertexData","Float32Array","vertexBuffer","indexData","Uint32Array","indexBuffer","createFlowMesh","_x21","_x22","getProjectionOffsetGrid","datumTransformation","steps","wkid","wkt","isInverse","rasterTransform","projectedExtent","srcBufferExtent","pixelSize","hasWrapAround","spacing","datumTransformationSteps","isAdaptive","includeGCSGrid","default"],"sources":["C:/code-challenge-react/frontend/node_modules/@arcgis/core/layers/support/RasterJobHandler.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport e from\"../../core/Error.js\";import{isSome as r}from\"../../core/maybe.js\";import{open as o}from\"../../core/workers/workers.js\";import t from\"./PixelBlock.js\";class n{constructor(){this._workerThread=null,this._destroyed=!1}async initialize(){const e=await o(\"RasterWorker\");this._destroyed?e.close():this._workerThread=e}destroy(){this._destroyed=!0,this._workerThread&&(this._workerThread.close(),this._workerThread=null)}async convertVectorFieldData(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const n=await this._workerThread.invoke(\"convertVectorFieldData\",{pixelBlock:r.pixelBlock.toJSON(),type:r.dataType},o);return n?new t(n):null}async decode(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const n=await this._workerThread.invoke(\"decode\",r,o);return n?new t(n):null}async symbolize(o,n){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const a={extent:o.extent&&o.extent.toJSON(),pixelBlock:r(o.pixelBlock)&&o.pixelBlock.toJSON(),simpleStretchParams:o.simpleStretchParams,bandIds:o.bandIds},i=await this._workerThread.invoke(\"symbolize\",a,n);return i?new t(i):null}async updateSymbolizer(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const t=r?.rendererJSON?.histograms;await Promise.all(this._workerThread.broadcast(\"updateSymbolizer\",{symbolizerJSON:r.toJSON(),histograms:t},o))}async updateRasterFunction(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");await Promise.all(this._workerThread.broadcast(\"updateRasterFunction\",{rasterFunctionJSON:r.toJSON()},o))}async process(o,n){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const a=await this._workerThread.invoke(\"process\",{extent:o.extent?.toJSON(),primaryPixelBlocks:o.primaryPixelBlocks.map((e=>r(e)?e.toJSON():null)),primaryRasterIds:o.primaryRasterIds},n);return a?new t(a):null}async stretch(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");if(!r?.pixelBlock)return null;const n={srcPixelBlock:r.pixelBlock.toJSON(),stretchParams:r.stretchParams},a=await this._workerThread.invoke(\"stretch\",n,o);return a?new t(a):null}async split(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");if(!r?.pixelBlock)return null;const n={srcPixelBlock:r.pixelBlock.toJSON(),tileSize:r.tileSize,maximumPyramidLevel:r.maximumPyramidLevel},a=await this._workerThread.invoke(\"split\",n,o);return a&&a.forEach(((e,r)=>{a.set(r,e?t.fromJSON(e):null)})),a}async estimateStatisticsHistograms(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");if(!r?.pixelBlock)return null;const t={srcPixelBlock:r.pixelBlock.toJSON()};return await this._workerThread.invoke(\"estimateStatisticsHistograms\",t,o)}async mosaicAndTransform(o,n){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");if(!o?.srcPixelBlocks?.length)return{pixelBlock:null};const a={...o,srcPixelBlocks:o.srcPixelBlocks.map((e=>r(e)?e.toJSON():null))},i=await this._workerThread.invoke(\"mosaicAndTransform\",a,n);return{pixelBlock:i.pixelBlock?new t(i.pixelBlock):null,localNorthDirections:i.localNorthDirections}}async createFlowMesh(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const t={buffer:r.flowData.data.buffer,maskBuffer:r.flowData.mask.buffer,width:r.flowData.width,height:r.flowData.height},{meshType:n,simulationSettings:a}=r,i=await this._workerThread.invoke(\"createFlowMesh\",{meshType:n,flowData:t,simulationSettings:a},{...o,transferList:[t.buffer,t.maskBuffer]});return{vertexData:new Float32Array(i.vertexBuffer),indexData:new Uint32Array(i.indexBuffer)}}getProjectionOffsetGrid(o,t){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const n=r(o.datumTransformation)?o.datumTransformation.steps.map((e=>({wkid:e.wkid,wkt:e.wkt,isInverse:e.isInverse}))):null,a=r(o.rasterTransform)?o.rasterTransform.toJSON():null,i={projectedExtent:o.projectedExtent.toJSON(),srcBufferExtent:o.srcBufferExtent.toJSON(),pixelSize:o.pixelSize,hasWrapAround:o.hasWrapAround,spacing:o.spacing,datumTransformationSteps:n,rasterTransform:a,isAdaptive:o.isAdaptive,includeGCSGrid:o.includeGCSGrid};return this._workerThread.invoke(\"getProjectionOffsetGrid\",i,t)}}export{n as default};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}