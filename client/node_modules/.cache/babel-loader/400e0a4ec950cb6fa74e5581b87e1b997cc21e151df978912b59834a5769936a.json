{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport { c as r } from \"../../../../../../chunks/mat3f64.js\";\nimport { c as o } from \"../../../../../../chunks/mat4f64.js\";\nimport { c as e } from \"../../../../../../chunks/vec3f32.js\";\nimport { c as t } from \"../../../../../../chunks/vec3f64.js\";\nimport { PositionAttribute as a } from \"./PositionAttribute.glsl.js\";\nimport { DoublePrecision as s } from \"../util/DoublePrecision.glsl.js\";\nimport { Float3DrawUniform as i } from \"../../shaderModules/Float3DrawUniform.js\";\nimport { Float3PassUniform as m } from \"../../shaderModules/Float3PassUniform.js\";\nimport { glsl as d, NoParameters as n } from \"../../shaderModules/interfaces.js\";\nimport { Matrix3DrawUniform as l } from \"../../shaderModules/Matrix3DrawUniform.js\";\nimport { Matrix3PassUniform as f } from \"../../shaderModules/Matrix3PassUniform.js\";\nimport { Matrix4PassUniform as v } from \"../../shaderModules/Matrix4PassUniform.js\";\nfunction F(r, o) {\n  r.include(a);\n  const e = r.vertex;\n  e.include(s, o), r.varyings.add(\"vPositionWorldCameraRelative\", \"vec3\"), r.varyings.add(\"vPosition_view\", \"vec3\"), e.uniforms.add([new m(\"transformWorldFromViewTH\", r => r.transformWorldFromViewTH), new m(\"transformWorldFromViewTL\", r => r.transformWorldFromViewTL), new f(\"transformViewFromCameraRelativeRS\", r => r.transformViewFromCameraRelativeRS), new v(\"transformProjFromView\", r => r.transformProjFromView), new l(\"transformWorldFromModelRS\", r => r.transformWorldFromModelRS), new i(\"transformWorldFromModelTH\", r => r.transformWorldFromModelTH), new i(\"transformWorldFromModelTL\", r => r.transformWorldFromModelTL)]), e.code.add(d`vec3 positionWorldCameraRelative() {\nvec3 rotatedModelPosition = transformWorldFromModelRS * positionModel();\nvec3 transform_CameraRelativeFromModel = dpAdd(\ntransformWorldFromModelTL,\ntransformWorldFromModelTH,\n-transformWorldFromViewTL,\n-transformWorldFromViewTH\n);\nreturn transform_CameraRelativeFromModel + rotatedModelPosition;\n}`), e.code.add(d`\n    void forwardPosition(float fOffset) {\n      vPositionWorldCameraRelative = positionWorldCameraRelative();\n      if (fOffset != 0.0) {\n        vPositionWorldCameraRelative += fOffset * ${o.spherical ? d`normalize(transformWorldFromViewTL + vPositionWorldCameraRelative)` : d`vec3(0.0, 0.0, 1.0)`};\n      }\n\n      vPosition_view = transformViewFromCameraRelativeRS * vPositionWorldCameraRelative;\n      gl_Position = transformProjFromView * vec4(vPosition_view, 1.0);\n    }\n  `), r.fragment.uniforms.add(new m(\"transformWorldFromViewTL\", r => r.transformWorldFromViewTL)), e.code.add(d`vec3 positionWorld() {\nreturn transformWorldFromViewTL + vPositionWorldCameraRelative;\n}`), r.fragment.code.add(d`vec3 positionWorld() {\nreturn transformWorldFromViewTL + vPositionWorldCameraRelative;\n}`);\n}\nclass c extends n {\n  constructor() {\n    super(...arguments), this.transformWorldFromViewTH = t(), this.transformWorldFromViewTL = t(), this.transformViewFromCameraRelativeRS = r(), this.transformProjFromView = o();\n  }\n}\nclass W extends n {\n  constructor() {\n    super(...arguments), this.transformWorldFromModelRS = r(), this.transformWorldFromModelTH = e(), this.transformWorldFromModelTL = e();\n  }\n}\nexport { F as VertexPosition, W as VertexPositionDrawParameters, c as VertexPositionPassParameters };","map":{"version":3,"names":["c","r","o","e","t","PositionAttribute","a","DoublePrecision","s","Float3DrawUniform","i","Float3PassUniform","m","glsl","d","NoParameters","n","Matrix3DrawUniform","l","Matrix3PassUniform","f","Matrix4PassUniform","v","F","include","vertex","varyings","add","uniforms","transformWorldFromViewTH","transformWorldFromViewTL","transformViewFromCameraRelativeRS","transformProjFromView","transformWorldFromModelRS","transformWorldFromModelTH","transformWorldFromModelTL","code","spherical","fragment","constructor","arguments","W","VertexPosition","VertexPositionDrawParameters","VertexPositionPassParameters"],"sources":["C:/code-challenge-react/client/node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/VertexPosition.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport{c as r}from\"../../../../../../chunks/mat3f64.js\";import{c as o}from\"../../../../../../chunks/mat4f64.js\";import{c as e}from\"../../../../../../chunks/vec3f32.js\";import{c as t}from\"../../../../../../chunks/vec3f64.js\";import{PositionAttribute as a}from\"./PositionAttribute.glsl.js\";import{DoublePrecision as s}from\"../util/DoublePrecision.glsl.js\";import{Float3DrawUniform as i}from\"../../shaderModules/Float3DrawUniform.js\";import{Float3PassUniform as m}from\"../../shaderModules/Float3PassUniform.js\";import{glsl as d,NoParameters as n}from\"../../shaderModules/interfaces.js\";import{Matrix3DrawUniform as l}from\"../../shaderModules/Matrix3DrawUniform.js\";import{Matrix3PassUniform as f}from\"../../shaderModules/Matrix3PassUniform.js\";import{Matrix4PassUniform as v}from\"../../shaderModules/Matrix4PassUniform.js\";function F(r,o){r.include(a);const e=r.vertex;e.include(s,o),r.varyings.add(\"vPositionWorldCameraRelative\",\"vec3\"),r.varyings.add(\"vPosition_view\",\"vec3\"),e.uniforms.add([new m(\"transformWorldFromViewTH\",(r=>r.transformWorldFromViewTH)),new m(\"transformWorldFromViewTL\",(r=>r.transformWorldFromViewTL)),new f(\"transformViewFromCameraRelativeRS\",(r=>r.transformViewFromCameraRelativeRS)),new v(\"transformProjFromView\",(r=>r.transformProjFromView)),new l(\"transformWorldFromModelRS\",(r=>r.transformWorldFromModelRS)),new i(\"transformWorldFromModelTH\",(r=>r.transformWorldFromModelTH)),new i(\"transformWorldFromModelTL\",(r=>r.transformWorldFromModelTL))]),e.code.add(d`vec3 positionWorldCameraRelative() {\nvec3 rotatedModelPosition = transformWorldFromModelRS * positionModel();\nvec3 transform_CameraRelativeFromModel = dpAdd(\ntransformWorldFromModelTL,\ntransformWorldFromModelTH,\n-transformWorldFromViewTL,\n-transformWorldFromViewTH\n);\nreturn transform_CameraRelativeFromModel + rotatedModelPosition;\n}`),e.code.add(d`\n    void forwardPosition(float fOffset) {\n      vPositionWorldCameraRelative = positionWorldCameraRelative();\n      if (fOffset != 0.0) {\n        vPositionWorldCameraRelative += fOffset * ${o.spherical?d`normalize(transformWorldFromViewTL + vPositionWorldCameraRelative)`:d`vec3(0.0, 0.0, 1.0)`};\n      }\n\n      vPosition_view = transformViewFromCameraRelativeRS * vPositionWorldCameraRelative;\n      gl_Position = transformProjFromView * vec4(vPosition_view, 1.0);\n    }\n  `),r.fragment.uniforms.add(new m(\"transformWorldFromViewTL\",(r=>r.transformWorldFromViewTL))),e.code.add(d`vec3 positionWorld() {\nreturn transformWorldFromViewTL + vPositionWorldCameraRelative;\n}`),r.fragment.code.add(d`vec3 positionWorld() {\nreturn transformWorldFromViewTL + vPositionWorldCameraRelative;\n}`)}class c extends n{constructor(){super(...arguments),this.transformWorldFromViewTH=t(),this.transformWorldFromViewTL=t(),this.transformViewFromCameraRelativeRS=r(),this.transformProjFromView=o()}}class W extends n{constructor(){super(...arguments),this.transformWorldFromModelRS=r(),this.transformWorldFromModelTH=e(),this.transformWorldFromModelTL=e()}}export{F as VertexPosition,W as VertexPositionDrawParameters,c as VertexPositionPassParameters};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}