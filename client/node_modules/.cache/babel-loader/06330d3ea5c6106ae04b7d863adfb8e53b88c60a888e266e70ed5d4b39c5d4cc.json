{"ast":null,"code":"import _regeneratorRuntime from \"C:/code-challenge-react/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/code-challenge-react/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/code-challenge-react/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/code-challenge-react/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport t from \"../../../core/Error.js\";\nimport e from \"./CloudRaster.js\";\nimport r from \"./ImageAuxRaster.js\";\nimport s from \"./ImageServerRaster.js\";\nimport o from \"./MRFRaster.js\";\nimport a from \"./TIFFRaster.js\";\nvar c = new Map();\nc.set(\"CRF\", {\n  desc: \"Cloud Raster Format\",\n  constructor: e\n}), c.set(\"MRF\", {\n  desc: \"Meta Raster Format\",\n  constructor: o\n}), c.set(\"TIFF\", {\n  desc: \"GeoTIFF\",\n  constructor: a\n}), c.set(\"RasterTileServer\", {\n  desc: \"Raster Tile Server\",\n  constructor: s\n}), c.set(\"JPG\", {\n  desc: \"JPG Raster Format\",\n  constructor: r\n}), c.set(\"PNG\", {\n  desc: \"PNG Raster Format\",\n  constructor: r\n}), c.set(\"GIF\", {\n  desc: \"GIF Raster Format\",\n  constructor: r\n}), c.set(\"BMP\", {\n  desc: \"BMP Raster Format\",\n  constructor: r\n});\nvar n = /*#__PURE__*/function () {\n  function n() {\n    _classCallCheck(this, n);\n  }\n  _createClass(n, null, [{\n    key: \"supportedFormats\",\n    get: function get() {\n      var t = new Set();\n      return c.forEach(function (e, r) {\n        return t.add(r);\n      }), t;\n    }\n  }, {\n    key: \"open\",\n    value: function () {\n      var _open = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(e) {\n        var r, s, o, a, _n, l, i, u, F, m;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              r = e.url, s = e.ioConfig, o = e.sourceJSON;\n              a = e.datasetFormat;\n              null == a && r.lastIndexOf(\".\") && (a = r.slice(r.lastIndexOf(\".\") + 1).toUpperCase()), \"OVR\" === a || \"TIF\" === a ? a = \"TIFF\" : \"JPG\" !== a && \"JPEG\" !== a && \"JFIF\" !== a || (a = \"JPG\"), r.toLowerCase().includes(\"/imageserver\") && !r.toLowerCase().includes(\"/wcsserver\") && (a = \"RasterTileServer\");\n              _n = {\n                url: r,\n                sourceJSON: o,\n                datasetFormat: a,\n                ioConfig: s !== null && s !== void 0 ? s : {\n                  bandIds: null,\n                  sampling: null\n                }\n              };\n              if (!(a && this.supportedFormats.has(a))) {\n                _context.next = 12;\n                break;\n              }\n              if (!(\"CRF\" === a && !(s !== null && s !== void 0 && s.enableCRF))) {\n                _context.next = 7;\n                break;\n              }\n              throw new t(\"rasterfactory:open\", \"cannot open raster: \".concat(r));\n            case 7:\n              l = c.get(a).constructor;\n              i = new l(_n);\n              _context.next = 11;\n              return i.open({\n                signal: e.signal\n              });\n            case 11:\n              return _context.abrupt(\"return\", i);\n            case 12:\n              if (!a) {\n                _context.next = 14;\n                break;\n              }\n              throw new t(\"rasterfactory:open\", \"not a supported format \" + a);\n            case 14:\n              u = Array.from(c.keys());\n              F = 0;\n              m = function m() {\n                return a = u[F++], a && (\"CRF\" !== a || s !== null && s !== void 0 && s.enableCRF) ? (l = c.get(a).constructor, i = new l(_n), i.open({\n                  signal: e.signal\n                }).then(function () {\n                  return i;\n                }).catch(function () {\n                  return m();\n                })) : null;\n              };\n              return _context.abrupt(\"return\", m());\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function open(_x) {\n        return _open.apply(this, arguments);\n      }\n      return open;\n    }()\n  }, {\n    key: \"register\",\n    value: function register(t, e, r) {\n      c.has(t.toUpperCase()) || c.set(t.toUpperCase(), {\n        desc: e,\n        constructor: r\n      });\n    }\n  }]);\n  return n;\n}();\nexport { n as default };","map":{"version":3,"names":["t","e","r","s","o","a","c","Map","set","desc","constructor","n","_classCallCheck","_createClass","key","get","Set","forEach","add","value","_open","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_n","l","i","u","F","m","wrap","_callee$","_context","prev","next","url","ioConfig","sourceJSON","datasetFormat","lastIndexOf","slice","toUpperCase","toLowerCase","includes","bandIds","sampling","supportedFormats","has","enableCRF","concat","open","signal","abrupt","Array","from","keys","then","catch","stop","_x","apply","arguments","register","default"],"sources":["C:/code-challenge-react/frontend/node_modules/@arcgis/core/layers/support/rasterDatasets/RasterFactory.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport t from\"../../../core/Error.js\";import e from\"./CloudRaster.js\";import r from\"./ImageAuxRaster.js\";import s from\"./ImageServerRaster.js\";import o from\"./MRFRaster.js\";import a from\"./TIFFRaster.js\";const c=new Map;c.set(\"CRF\",{desc:\"Cloud Raster Format\",constructor:e}),c.set(\"MRF\",{desc:\"Meta Raster Format\",constructor:o}),c.set(\"TIFF\",{desc:\"GeoTIFF\",constructor:a}),c.set(\"RasterTileServer\",{desc:\"Raster Tile Server\",constructor:s}),c.set(\"JPG\",{desc:\"JPG Raster Format\",constructor:r}),c.set(\"PNG\",{desc:\"PNG Raster Format\",constructor:r}),c.set(\"GIF\",{desc:\"GIF Raster Format\",constructor:r}),c.set(\"BMP\",{desc:\"BMP Raster Format\",constructor:r});class n{static get supportedFormats(){const t=new Set;return c.forEach(((e,r)=>t.add(r))),t}static async open(e){const{url:r,ioConfig:s,sourceJSON:o}=e;let a=e.datasetFormat;null==a&&r.lastIndexOf(\".\")&&(a=r.slice(r.lastIndexOf(\".\")+1).toUpperCase()),\"OVR\"===a||\"TIF\"===a?a=\"TIFF\":\"JPG\"!==a&&\"JPEG\"!==a&&\"JFIF\"!==a||(a=\"JPG\"),r.toLowerCase().includes(\"/imageserver\")&&!r.toLowerCase().includes(\"/wcsserver\")&&(a=\"RasterTileServer\");const n={url:r,sourceJSON:o,datasetFormat:a,ioConfig:s??{bandIds:null,sampling:null}};let l,i;if(a&&this.supportedFormats.has(a)){if(\"CRF\"===a&&!s?.enableCRF)throw new t(\"rasterfactory:open\",`cannot open raster: ${r}`);return l=c.get(a).constructor,i=new l(n),await i.open({signal:e.signal}),i}if(a)throw new t(\"rasterfactory:open\",\"not a supported format \"+a);const u=Array.from(c.keys());let F=0;const m=()=>(a=u[F++],a&&(\"CRF\"!==a||s?.enableCRF)?(l=c.get(a).constructor,i=new l(n),i.open({signal:e.signal}).then((()=>i)).catch((()=>m()))):null);return m()}static register(t,e,r){c.has(t.toUpperCase())||c.set(t.toUpperCase(),{desc:e,constructor:r})}}export{n as default};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}