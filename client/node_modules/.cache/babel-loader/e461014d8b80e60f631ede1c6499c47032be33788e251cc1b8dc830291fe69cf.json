{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport e from \"../../core/Error.js\";\nimport { isSome as r } from \"../../core/maybe.js\";\nimport { open as o } from \"../../core/workers/workers.js\";\nimport t from \"./PixelBlock.js\";\nclass n {\n  constructor() {\n    this._workerThread = null, this._destroyed = !1;\n  }\n  async initialize() {\n    const e = await o(\"RasterWorker\");\n    this._destroyed ? e.close() : this._workerThread = e;\n  }\n  destroy() {\n    this._destroyed = !0, this._workerThread && (this._workerThread.close(), this._workerThread = null);\n  }\n  async convertVectorFieldData(r, o) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    const n = await this._workerThread.invoke(\"convertVectorFieldData\", {\n      pixelBlock: r.pixelBlock.toJSON(),\n      type: r.dataType\n    }, o);\n    return n ? new t(n) : null;\n  }\n  async decode(r, o) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    const n = await this._workerThread.invoke(\"decode\", r, o);\n    return n ? new t(n) : null;\n  }\n  async symbolize(o, n) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    const a = {\n        extent: o.extent && o.extent.toJSON(),\n        pixelBlock: r(o.pixelBlock) && o.pixelBlock.toJSON(),\n        simpleStretchParams: o.simpleStretchParams,\n        bandIds: o.bandIds\n      },\n      i = await this._workerThread.invoke(\"symbolize\", a, n);\n    return i ? new t(i) : null;\n  }\n  async updateSymbolizer(r, o) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    const t = r?.rendererJSON?.histograms;\n    await Promise.all(this._workerThread.broadcast(\"updateSymbolizer\", {\n      symbolizerJSON: r.toJSON(),\n      histograms: t\n    }, o));\n  }\n  async updateRasterFunction(r, o) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    await Promise.all(this._workerThread.broadcast(\"updateRasterFunction\", {\n      rasterFunctionJSON: r.toJSON()\n    }, o));\n  }\n  async process(o, n) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    const a = await this._workerThread.invoke(\"process\", {\n      extent: o.extent?.toJSON(),\n      primaryPixelBlocks: o.primaryPixelBlocks.map(e => r(e) ? e.toJSON() : null),\n      primaryRasterIds: o.primaryRasterIds\n    }, n);\n    return a ? new t(a) : null;\n  }\n  async stretch(r, o) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    if (!r?.pixelBlock) return null;\n    const n = {\n        srcPixelBlock: r.pixelBlock.toJSON(),\n        stretchParams: r.stretchParams\n      },\n      a = await this._workerThread.invoke(\"stretch\", n, o);\n    return a ? new t(a) : null;\n  }\n  async split(r, o) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    if (!r?.pixelBlock) return null;\n    const n = {\n        srcPixelBlock: r.pixelBlock.toJSON(),\n        tileSize: r.tileSize,\n        maximumPyramidLevel: r.maximumPyramidLevel\n      },\n      a = await this._workerThread.invoke(\"split\", n, o);\n    return a && a.forEach((e, r) => {\n      a.set(r, e ? t.fromJSON(e) : null);\n    }), a;\n  }\n  async estimateStatisticsHistograms(r, o) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    if (!r?.pixelBlock) return null;\n    const t = {\n      srcPixelBlock: r.pixelBlock.toJSON()\n    };\n    return await this._workerThread.invoke(\"estimateStatisticsHistograms\", t, o);\n  }\n  async mosaicAndTransform(o, n) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    if (!o?.srcPixelBlocks?.length) return {\n      pixelBlock: null\n    };\n    const a = {\n        ...o,\n        srcPixelBlocks: o.srcPixelBlocks.map(e => r(e) ? e.toJSON() : null)\n      },\n      i = await this._workerThread.invoke(\"mosaicAndTransform\", a, n);\n    return {\n      pixelBlock: i.pixelBlock ? new t(i.pixelBlock) : null,\n      localNorthDirections: i.localNorthDirections\n    };\n  }\n  async createFlowMesh(r, o) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    const t = {\n        buffer: r.flowData.data.buffer,\n        maskBuffer: r.flowData.mask.buffer,\n        width: r.flowData.width,\n        height: r.flowData.height\n      },\n      {\n        meshType: n,\n        simulationSettings: a\n      } = r,\n      i = await this._workerThread.invoke(\"createFlowMesh\", {\n        meshType: n,\n        flowData: t,\n        simulationSettings: a\n      }, {\n        ...o,\n        transferList: [t.buffer, t.maskBuffer]\n      });\n    return {\n      vertexData: new Float32Array(i.vertexBuffer),\n      indexData: new Uint32Array(i.indexBuffer)\n    };\n  }\n  getProjectionOffsetGrid(o, t) {\n    if (!this._workerThread) throw new e(\"raster-jobhandler:no-connection\", \"no available worker connection\");\n    const n = r(o.datumTransformation) ? o.datumTransformation.steps.map(e => ({\n        wkid: e.wkid,\n        wkt: e.wkt,\n        isInverse: e.isInverse\n      })) : null,\n      a = r(o.rasterTransform) ? o.rasterTransform.toJSON() : null,\n      i = {\n        projectedExtent: o.projectedExtent.toJSON(),\n        srcBufferExtent: o.srcBufferExtent.toJSON(),\n        pixelSize: o.pixelSize,\n        hasWrapAround: o.hasWrapAround,\n        spacing: o.spacing,\n        datumTransformationSteps: n,\n        rasterTransform: a,\n        isAdaptive: o.isAdaptive,\n        includeGCSGrid: o.includeGCSGrid\n      };\n    return this._workerThread.invoke(\"getProjectionOffsetGrid\", i, t);\n  }\n}\nexport { n as default };","map":{"version":3,"names":["e","isSome","r","open","o","t","n","constructor","_workerThread","_destroyed","initialize","close","destroy","convertVectorFieldData","invoke","pixelBlock","toJSON","type","dataType","decode","symbolize","a","extent","simpleStretchParams","bandIds","i","updateSymbolizer","rendererJSON","histograms","Promise","all","broadcast","symbolizerJSON","updateRasterFunction","rasterFunctionJSON","process","primaryPixelBlocks","map","primaryRasterIds","stretch","srcPixelBlock","stretchParams","split","tileSize","maximumPyramidLevel","forEach","set","fromJSON","estimateStatisticsHistograms","mosaicAndTransform","srcPixelBlocks","length","localNorthDirections","createFlowMesh","buffer","flowData","data","maskBuffer","mask","width","height","meshType","simulationSettings","transferList","vertexData","Float32Array","vertexBuffer","indexData","Uint32Array","indexBuffer","getProjectionOffsetGrid","datumTransformation","steps","wkid","wkt","isInverse","rasterTransform","projectedExtent","srcBufferExtent","pixelSize","hasWrapAround","spacing","datumTransformationSteps","isAdaptive","includeGCSGrid","default"],"sources":["C:/code-challenge-react/client/node_modules/@arcgis/core/layers/support/RasterJobHandler.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport e from\"../../core/Error.js\";import{isSome as r}from\"../../core/maybe.js\";import{open as o}from\"../../core/workers/workers.js\";import t from\"./PixelBlock.js\";class n{constructor(){this._workerThread=null,this._destroyed=!1}async initialize(){const e=await o(\"RasterWorker\");this._destroyed?e.close():this._workerThread=e}destroy(){this._destroyed=!0,this._workerThread&&(this._workerThread.close(),this._workerThread=null)}async convertVectorFieldData(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const n=await this._workerThread.invoke(\"convertVectorFieldData\",{pixelBlock:r.pixelBlock.toJSON(),type:r.dataType},o);return n?new t(n):null}async decode(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const n=await this._workerThread.invoke(\"decode\",r,o);return n?new t(n):null}async symbolize(o,n){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const a={extent:o.extent&&o.extent.toJSON(),pixelBlock:r(o.pixelBlock)&&o.pixelBlock.toJSON(),simpleStretchParams:o.simpleStretchParams,bandIds:o.bandIds},i=await this._workerThread.invoke(\"symbolize\",a,n);return i?new t(i):null}async updateSymbolizer(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const t=r?.rendererJSON?.histograms;await Promise.all(this._workerThread.broadcast(\"updateSymbolizer\",{symbolizerJSON:r.toJSON(),histograms:t},o))}async updateRasterFunction(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");await Promise.all(this._workerThread.broadcast(\"updateRasterFunction\",{rasterFunctionJSON:r.toJSON()},o))}async process(o,n){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const a=await this._workerThread.invoke(\"process\",{extent:o.extent?.toJSON(),primaryPixelBlocks:o.primaryPixelBlocks.map((e=>r(e)?e.toJSON():null)),primaryRasterIds:o.primaryRasterIds},n);return a?new t(a):null}async stretch(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");if(!r?.pixelBlock)return null;const n={srcPixelBlock:r.pixelBlock.toJSON(),stretchParams:r.stretchParams},a=await this._workerThread.invoke(\"stretch\",n,o);return a?new t(a):null}async split(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");if(!r?.pixelBlock)return null;const n={srcPixelBlock:r.pixelBlock.toJSON(),tileSize:r.tileSize,maximumPyramidLevel:r.maximumPyramidLevel},a=await this._workerThread.invoke(\"split\",n,o);return a&&a.forEach(((e,r)=>{a.set(r,e?t.fromJSON(e):null)})),a}async estimateStatisticsHistograms(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");if(!r?.pixelBlock)return null;const t={srcPixelBlock:r.pixelBlock.toJSON()};return await this._workerThread.invoke(\"estimateStatisticsHistograms\",t,o)}async mosaicAndTransform(o,n){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");if(!o?.srcPixelBlocks?.length)return{pixelBlock:null};const a={...o,srcPixelBlocks:o.srcPixelBlocks.map((e=>r(e)?e.toJSON():null))},i=await this._workerThread.invoke(\"mosaicAndTransform\",a,n);return{pixelBlock:i.pixelBlock?new t(i.pixelBlock):null,localNorthDirections:i.localNorthDirections}}async createFlowMesh(r,o){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const t={buffer:r.flowData.data.buffer,maskBuffer:r.flowData.mask.buffer,width:r.flowData.width,height:r.flowData.height},{meshType:n,simulationSettings:a}=r,i=await this._workerThread.invoke(\"createFlowMesh\",{meshType:n,flowData:t,simulationSettings:a},{...o,transferList:[t.buffer,t.maskBuffer]});return{vertexData:new Float32Array(i.vertexBuffer),indexData:new Uint32Array(i.indexBuffer)}}getProjectionOffsetGrid(o,t){if(!this._workerThread)throw new e(\"raster-jobhandler:no-connection\",\"no available worker connection\");const n=r(o.datumTransformation)?o.datumTransformation.steps.map((e=>({wkid:e.wkid,wkt:e.wkt,isInverse:e.isInverse}))):null,a=r(o.rasterTransform)?o.rasterTransform.toJSON():null,i={projectedExtent:o.projectedExtent.toJSON(),srcBufferExtent:o.srcBufferExtent.toJSON(),pixelSize:o.pixelSize,hasWrapAround:o.hasWrapAround,spacing:o.spacing,datumTransformationSteps:n,rasterTransform:a,isAdaptive:o.isAdaptive,includeGCSGrid:o.includeGCSGrid};return this._workerThread.invoke(\"getProjectionOffsetGrid\",i,t)}}export{n as default};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}