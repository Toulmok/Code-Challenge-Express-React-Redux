{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport { neverReached as o } from \"../../../../../../../core/compilerUtils.js\";\nimport { packFloatRGBA as e } from \"../../../../../../../core/floatRGBA.js\";\nimport has from \"../../../../../../../core/has.js\";\nimport { DecodeSymbolColor as r } from \"./DecodeSymbolColor.glsl.js\";\nimport { ShaderOutput as t } from \"../../../../core/shaderLibrary/ShaderOutput.js\";\nimport { RgbaFloatEncoding as n } from \"../../../../core/shaderLibrary/util/RgbaFloatEncoding.glsl.js\";\nimport { textureSize as a, texelFetch as d } from \"../../../../core/shaderLibrary/util/WebGL2Utils.js\";\nimport { Float4DrawUniform as l } from \"../../../../core/shaderModules/Float4DrawUniform.js\";\nimport { IntegerDrawUniform as i } from \"../../../../core/shaderModules/IntegerDrawUniform.js\";\nimport { glsl as c } from \"../../../../core/shaderModules/interfaces.js\";\nimport { createTexture2DDrawSizeUniforms as s } from \"../../../../core/shaderModules/Texture2DDrawUniform.js\";\nimport { TextureSizeUniformType as x } from \"../../../../core/shaderModules/TextureSizeUniformType.js\";\nimport { VertexAttribute as m } from \"../../../../lib/VertexAttribute.js\";\nvar C;\n!function (o) {\n  o[o.Uniform = 0] = \"Uniform\", o[o.Varying = 1] = \"Varying\", o[o.COUNT = 2] = \"COUNT\";\n}(C || (C = {}));\nconst f = 429496.7296;\nfunction u(o, r) {\n  e(o / f * .5 + .5, r);\n}\nfunction p(e, r) {\n  switch (r.componentData) {\n    case C.Varying:\n      return v(e, r);\n    case C.Uniform:\n      return M(e);\n    case C.COUNT:\n      return;\n    default:\n      o(r.componentData);\n  }\n}\nfunction v(o, e) {\n  const {\n    vertex: l,\n    fragment: i\n  } = o;\n  l.include(n), l.uniforms.add(s(\"componentColorTex\", o => o.componentParameters.texture.texture, e.hasWebGL2Context ? x.None : x.Size)), o.attributes.add(m.COMPONENTINDEX, \"float\"), o.varyings.add(\"vExternalColorMixMode\", \"mediump float\"), o.varyings.add(\"vExternalColor\", \"vec4\");\n  const C = e.output === t.ObjectAndLayerIdColor;\n  C && o.varyings.add(\"vObjectAndLayerIdColor\", \"vec4\"), o.include(r), l.constants.add(\"elevationScale\", \"float\", 2 * f), l.constants.add(\"stride\", \"float\", has(\"enable-feature:objectAndLayerId-rendering\") ? 3 : 2), l.code.add(c`\n  vec2 getComponentTextureCoordinates(float componentIndex, float typeOffset) {\n    vec2 textureSize = ${a(e, \"componentColorTex\")};\n\n    float index = componentIndex * stride + typeOffset;\n    float coordX = mod(index, textureSize.x);\n    float coordY = floor(index / textureSize.x);\n\n    return vec2(coordX, coordY) + 0.5;\n  }\n  `), l.code.add(c`\n  vec4 _readComponentColor() {\n    vec2 textureCoordinates = getComponentTextureCoordinates(componentIndex, 0.0);\n\n    return ${d(e, \"componentColorTex\", \"textureCoordinates\", \"1.0 / componentColorTexSize\")};\n   }\n\n   float readElevationOffset() {\n    vec2 textureCoordinates = getComponentTextureCoordinates(componentIndex, 1.0);\n\n    vec4 encodedElevation = ${d(e, \"componentColorTex\", \"textureCoordinates\", \"1.0 / componentColorTexSize\")};\n    return (rgba2float(encodedElevation) - 0.5) * elevationScale;\n  }\n\n  ${C ? c`\n          void forwardObjectAndLayerIdColor() {\n            vec2 textureCoordinates = getComponentTextureCoordinates(componentIndex, 2.0);\n\n            vObjectAndLayerIdColor = ${d(e, \"componentColorTex\", \"textureCoordinates\", \"1.0 / componentColorTexSize\")};\n          }` : c`void forwardObjectAndLayerIdColor() {}`}\n\n  vec4 forwardExternalColor(out bool castShadows) {\n    vec4 componentColor = _readComponentColor() * 255.0;\n\n    float shadowFlag = mod(componentColor.b * 255.0, 2.0);\n    componentColor.b -= shadowFlag;\n    castShadows = shadowFlag >= 1.0;\n\n    int decodedColorMixMode;\n    vExternalColor = decodeSymbolColor(componentColor, decodedColorMixMode) * 0.003921568627451; // = 1/255;\n    vExternalColorMixMode = float(decodedColorMixMode) + 0.5; // add 0.5 to avoid interpolation artifacts\n\n    return vExternalColor;\n  }\n`), i.code.add(c`\n  void readExternalColor(out vec4 externalColor, out int externalColorMixMode) {\n    externalColor = vExternalColor;\n    externalColorMixMode = int(vExternalColorMixMode);\n  }\n\n  void outputObjectAndLayerIdColor() {\n     ${C ? c`gl_FragColor = vObjectAndLayerIdColor;` : \"\"}\n  }\n`);\n}\nfunction M(o) {\n  const {\n    vertex: e,\n    fragment: r\n  } = o;\n  e.uniforms.add(new l(\"externalColor\", o => o.componentParameters.externalColor)), r.uniforms.add(new i(\"externalColorMixMode\", o => o.componentParameters.externalColorMixMode)), o.varyings.add(\"vExternalColor\", \"vec4\"), e.code.add(c`float readElevationOffset() {\nreturn 0.0;\n}\nvoid forwardObjectAndLayerIdColor() {\n}\nvec4 forwardExternalColor(out bool castShadows) {\nvExternalColor = externalColor;\ncastShadows = true;\nreturn externalColor;\n}`), r.code.add(c`void readExternalColor(out vec4 color, out int colorMixMode) {\ncolor = vExternalColor;\ncolorMixMode = externalColorMixMode;\n}\nvoid outputObjectAndLayerIdColor() {\ngl_FragColor = vec4(1.0,0.0,0.0,0.0);\n}`);\n}\nexport { p as ComponentData, C as ComponentDataType, f as MAX_ELEVATION_OFFSET, u as encodeElevationOffset };","map":{"version":3,"names":["neverReached","o","packFloatRGBA","e","has","DecodeSymbolColor","r","ShaderOutput","t","RgbaFloatEncoding","n","textureSize","a","texelFetch","d","Float4DrawUniform","l","IntegerDrawUniform","i","glsl","c","createTexture2DDrawSizeUniforms","s","TextureSizeUniformType","x","VertexAttribute","m","C","Uniform","Varying","COUNT","f","u","p","componentData","v","M","vertex","fragment","include","uniforms","add","componentParameters","texture","hasWebGL2Context","None","Size","attributes","COMPONENTINDEX","varyings","output","ObjectAndLayerIdColor","constants","code","externalColor","externalColorMixMode","ComponentData","ComponentDataType","MAX_ELEVATION_OFFSET","encodeElevationOffset"],"sources":["C:/code-challenge-react/frontend/node_modules/@arcgis/core/views/3d/webgl-engine/collections/Component/Material/shader/ComponentData.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport{neverReached as o}from\"../../../../../../../core/compilerUtils.js\";import{packFloatRGBA as e}from\"../../../../../../../core/floatRGBA.js\";import has from\"../../../../../../../core/has.js\";import{DecodeSymbolColor as r}from\"./DecodeSymbolColor.glsl.js\";import{ShaderOutput as t}from\"../../../../core/shaderLibrary/ShaderOutput.js\";import{RgbaFloatEncoding as n}from\"../../../../core/shaderLibrary/util/RgbaFloatEncoding.glsl.js\";import{textureSize as a,texelFetch as d}from\"../../../../core/shaderLibrary/util/WebGL2Utils.js\";import{Float4DrawUniform as l}from\"../../../../core/shaderModules/Float4DrawUniform.js\";import{IntegerDrawUniform as i}from\"../../../../core/shaderModules/IntegerDrawUniform.js\";import{glsl as c}from\"../../../../core/shaderModules/interfaces.js\";import{createTexture2DDrawSizeUniforms as s}from\"../../../../core/shaderModules/Texture2DDrawUniform.js\";import{TextureSizeUniformType as x}from\"../../../../core/shaderModules/TextureSizeUniformType.js\";import{VertexAttribute as m}from\"../../../../lib/VertexAttribute.js\";var C;!function(o){o[o.Uniform=0]=\"Uniform\",o[o.Varying=1]=\"Varying\",o[o.COUNT=2]=\"COUNT\"}(C||(C={}));const f=429496.7296;function u(o,r){e(o/f*.5+.5,r)}function p(e,r){switch(r.componentData){case C.Varying:return v(e,r);case C.Uniform:return M(e);case C.COUNT:return;default:o(r.componentData)}}function v(o,e){const{vertex:l,fragment:i}=o;l.include(n),l.uniforms.add(s(\"componentColorTex\",(o=>o.componentParameters.texture.texture),e.hasWebGL2Context?x.None:x.Size)),o.attributes.add(m.COMPONENTINDEX,\"float\"),o.varyings.add(\"vExternalColorMixMode\",\"mediump float\"),o.varyings.add(\"vExternalColor\",\"vec4\");const C=e.output===t.ObjectAndLayerIdColor;C&&o.varyings.add(\"vObjectAndLayerIdColor\",\"vec4\"),o.include(r),l.constants.add(\"elevationScale\",\"float\",2*f),l.constants.add(\"stride\",\"float\",has(\"enable-feature:objectAndLayerId-rendering\")?3:2),l.code.add(c`\n  vec2 getComponentTextureCoordinates(float componentIndex, float typeOffset) {\n    vec2 textureSize = ${a(e,\"componentColorTex\")};\n\n    float index = componentIndex * stride + typeOffset;\n    float coordX = mod(index, textureSize.x);\n    float coordY = floor(index / textureSize.x);\n\n    return vec2(coordX, coordY) + 0.5;\n  }\n  `),l.code.add(c`\n  vec4 _readComponentColor() {\n    vec2 textureCoordinates = getComponentTextureCoordinates(componentIndex, 0.0);\n\n    return ${d(e,\"componentColorTex\",\"textureCoordinates\",\"1.0 / componentColorTexSize\")};\n   }\n\n   float readElevationOffset() {\n    vec2 textureCoordinates = getComponentTextureCoordinates(componentIndex, 1.0);\n\n    vec4 encodedElevation = ${d(e,\"componentColorTex\",\"textureCoordinates\",\"1.0 / componentColorTexSize\")};\n    return (rgba2float(encodedElevation) - 0.5) * elevationScale;\n  }\n\n  ${C?c`\n          void forwardObjectAndLayerIdColor() {\n            vec2 textureCoordinates = getComponentTextureCoordinates(componentIndex, 2.0);\n\n            vObjectAndLayerIdColor = ${d(e,\"componentColorTex\",\"textureCoordinates\",\"1.0 / componentColorTexSize\")};\n          }`:c`void forwardObjectAndLayerIdColor() {}`}\n\n  vec4 forwardExternalColor(out bool castShadows) {\n    vec4 componentColor = _readComponentColor() * 255.0;\n\n    float shadowFlag = mod(componentColor.b * 255.0, 2.0);\n    componentColor.b -= shadowFlag;\n    castShadows = shadowFlag >= 1.0;\n\n    int decodedColorMixMode;\n    vExternalColor = decodeSymbolColor(componentColor, decodedColorMixMode) * 0.003921568627451; // = 1/255;\n    vExternalColorMixMode = float(decodedColorMixMode) + 0.5; // add 0.5 to avoid interpolation artifacts\n\n    return vExternalColor;\n  }\n`),i.code.add(c`\n  void readExternalColor(out vec4 externalColor, out int externalColorMixMode) {\n    externalColor = vExternalColor;\n    externalColorMixMode = int(vExternalColorMixMode);\n  }\n\n  void outputObjectAndLayerIdColor() {\n     ${C?c`gl_FragColor = vObjectAndLayerIdColor;`:\"\"}\n  }\n`)}function M(o){const{vertex:e,fragment:r}=o;e.uniforms.add(new l(\"externalColor\",(o=>o.componentParameters.externalColor))),r.uniforms.add(new i(\"externalColorMixMode\",(o=>o.componentParameters.externalColorMixMode))),o.varyings.add(\"vExternalColor\",\"vec4\"),e.code.add(c`float readElevationOffset() {\nreturn 0.0;\n}\nvoid forwardObjectAndLayerIdColor() {\n}\nvec4 forwardExternalColor(out bool castShadows) {\nvExternalColor = externalColor;\ncastShadows = true;\nreturn externalColor;\n}`),r.code.add(c`void readExternalColor(out vec4 color, out int colorMixMode) {\ncolor = vExternalColor;\ncolorMixMode = externalColorMixMode;\n}\nvoid outputObjectAndLayerIdColor() {\ngl_FragColor = vec4(1.0,0.0,0.0,0.0);\n}`)}export{p as ComponentData,C as ComponentDataType,f as MAX_ELEVATION_OFFSET,u as encodeElevationOffset};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}