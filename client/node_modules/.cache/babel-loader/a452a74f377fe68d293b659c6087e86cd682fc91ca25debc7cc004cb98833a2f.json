{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport { RgbaFloatEncoding as e } from \"../../../core/shaderLibrary/util/RgbaFloatEncoding.glsl.js\";\nimport { textureSize as t } from \"../../../core/shaderLibrary/util/WebGL2Utils.js\";\nimport { FloatDrawUniform as r } from \"../../../core/shaderModules/FloatDrawUniform.js\";\nimport { NoParameters as s, glsl as a } from \"../../../core/shaderModules/interfaces.js\";\nimport { createTexture2DDrawSizeUniforms as o, Texture2DDrawUniform as u } from \"../../../core/shaderModules/Texture2DDrawUniform.js\";\nimport { TextureSizeUniformType as l } from \"../../../core/shaderModules/TextureSizeUniformType.js\";\nimport { usesSketchLogic as c, EdgeUtilMode as n } from \"./EdgeUtil.glsl.js\";\nimport { UnpackAttributes as i } from \"./UnpackAttributes.glsl.js\";\nclass d extends s {}\nfunction f(s, d) {\n  s.include(i, d);\n  const {\n    vertex: f,\n    fragment: k\n  } = s;\n  switch (c(d) && (f.uniforms.add(o(\"strokesTexture\", e => e.strokesTexture.texture, d.hasWebGL2Context ? l.None : l.InvSize)), f.uniforms.add([new r(\"strokesLog2Resolution\", e => Math.log2(e.strokesTexture.resolution)), new r(\"strokeVariants\", e => e.strokesTexture.variants)]), s.varyings.add(\"vStrokeUV\", \"vec2\"), k.uniforms.add([new u(\"strokesTexture\", e => e.strokesTexture.texture), new r(\"strokesNormalizationScale\", e => e.strokesTexture.normalizationScale)]), f.code.add(a`\n      void calculateStyleOutputsSketch(float lineLength, UnpackedAttributes unpackedAttributes) {\n        vec2 sidenessNorm = unpackedAttributes.sidenessNorm;\n\n        float lineIndex = clamp(ceil(log2(lineLength)), 0.0, strokesLog2Resolution);\n\n        vec2 textureSizeInverse = ${t(d, \"strokesTexture\", !0)};\n        vStrokeUV = vec2(exp2(lineIndex) * sidenessNorm.y, lineIndex * strokeVariants + variantStroke + 0.5) * textureSizeInverse;\n        vStrokeUV.x += variantOffset;\n      }\n    `), s.fragment.include(e), k.code.add(a`float calculateLineOffsetSketch() {\nfloat offsetNorm = rgba2float(texture2D(strokesTexture, vStrokeUV));\nreturn (offsetNorm - 0.5) * strokesNormalizationScale;\n}\nfloat calculateLinePressureSketch() {\nreturn rgba2float(texture2D(strokesTexture, vStrokeUV + vec2(0.0, 0.5)));\n}`)), d.mode) {\n    case n.SOLID:\n      f.code.add(a`void calculateStyleOutputs(UnpackedAttributes unpackedAttributes) {}`), k.code.add(a`float calculateLineOffset() {\nreturn 0.0;\n}\nfloat calculateLinePressure() {\nreturn 1.0;\n}`);\n      break;\n    case n.SKETCH:\n      f.code.add(a`void calculateStyleOutputs(UnpackedAttributes unpackedAttributes)\n{\ncalculateStyleOutputsSketch(vLineLengthPixels, unpackedAttributes);\n}`), k.code.add(a`float calculateLineOffset() {\nreturn calculateLineOffsetSketch();\n}\nfloat calculateLinePressure() {\nreturn calculateLinePressureSketch();\n}`);\n      break;\n    case n.MIXED:\n      s.varyings.add(\"vType\", \"float\"), f.code.add(a`void calculateStyleOutputs(UnpackedAttributes unpackedAttributes)\n{\nvType = unpackedAttributes.type;\nif (unpackedAttributes.type <= 0.0) {\ncalculateStyleOutputsSketch(vLineLengthPixels, unpackedAttributes);\n}\n}`), k.code.add(a`float calculateLineOffset() {\nif (vType <= 0.0) {\nreturn calculateLineOffsetSketch();\n}\nelse {\nreturn 0.0;\n}\n}\nfloat calculateLinePressure() {\nif (vType <= 0.0) {\nreturn calculateLinePressureSketch();\n}\nelse {\nreturn 1.0;\n}\n}`);\n  }\n}\nexport { f as LineOffset, d as LineOffsetDrawParameters };","map":{"version":3,"names":["RgbaFloatEncoding","e","textureSize","t","FloatDrawUniform","r","NoParameters","s","glsl","a","createTexture2DDrawSizeUniforms","o","Texture2DDrawUniform","u","TextureSizeUniformType","l","usesSketchLogic","c","EdgeUtilMode","n","UnpackAttributes","i","d","f","include","vertex","fragment","k","uniforms","add","strokesTexture","texture","hasWebGL2Context","None","InvSize","Math","log2","resolution","variants","varyings","normalizationScale","code","mode","SOLID","SKETCH","MIXED","LineOffset","LineOffsetDrawParameters"],"sources":["C:/code-challenge-react/frontend/node_modules/@arcgis/core/views/3d/webgl-engine/shaders/sources/edgeRenderer/LineOffset.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport{RgbaFloatEncoding as e}from\"../../../core/shaderLibrary/util/RgbaFloatEncoding.glsl.js\";import{textureSize as t}from\"../../../core/shaderLibrary/util/WebGL2Utils.js\";import{FloatDrawUniform as r}from\"../../../core/shaderModules/FloatDrawUniform.js\";import{NoParameters as s,glsl as a}from\"../../../core/shaderModules/interfaces.js\";import{createTexture2DDrawSizeUniforms as o,Texture2DDrawUniform as u}from\"../../../core/shaderModules/Texture2DDrawUniform.js\";import{TextureSizeUniformType as l}from\"../../../core/shaderModules/TextureSizeUniformType.js\";import{usesSketchLogic as c,EdgeUtilMode as n}from\"./EdgeUtil.glsl.js\";import{UnpackAttributes as i}from\"./UnpackAttributes.glsl.js\";class d extends s{}function f(s,d){s.include(i,d);const{vertex:f,fragment:k}=s;switch(c(d)&&(f.uniforms.add(o(\"strokesTexture\",(e=>e.strokesTexture.texture),d.hasWebGL2Context?l.None:l.InvSize)),f.uniforms.add([new r(\"strokesLog2Resolution\",(e=>Math.log2(e.strokesTexture.resolution))),new r(\"strokeVariants\",(e=>e.strokesTexture.variants))]),s.varyings.add(\"vStrokeUV\",\"vec2\"),k.uniforms.add([new u(\"strokesTexture\",(e=>e.strokesTexture.texture)),new r(\"strokesNormalizationScale\",(e=>e.strokesTexture.normalizationScale))]),f.code.add(a`\n      void calculateStyleOutputsSketch(float lineLength, UnpackedAttributes unpackedAttributes) {\n        vec2 sidenessNorm = unpackedAttributes.sidenessNorm;\n\n        float lineIndex = clamp(ceil(log2(lineLength)), 0.0, strokesLog2Resolution);\n\n        vec2 textureSizeInverse = ${t(d,\"strokesTexture\",!0)};\n        vStrokeUV = vec2(exp2(lineIndex) * sidenessNorm.y, lineIndex * strokeVariants + variantStroke + 0.5) * textureSizeInverse;\n        vStrokeUV.x += variantOffset;\n      }\n    `),s.fragment.include(e),k.code.add(a`float calculateLineOffsetSketch() {\nfloat offsetNorm = rgba2float(texture2D(strokesTexture, vStrokeUV));\nreturn (offsetNorm - 0.5) * strokesNormalizationScale;\n}\nfloat calculateLinePressureSketch() {\nreturn rgba2float(texture2D(strokesTexture, vStrokeUV + vec2(0.0, 0.5)));\n}`)),d.mode){case n.SOLID:f.code.add(a`void calculateStyleOutputs(UnpackedAttributes unpackedAttributes) {}`),k.code.add(a`float calculateLineOffset() {\nreturn 0.0;\n}\nfloat calculateLinePressure() {\nreturn 1.0;\n}`);break;case n.SKETCH:f.code.add(a`void calculateStyleOutputs(UnpackedAttributes unpackedAttributes)\n{\ncalculateStyleOutputsSketch(vLineLengthPixels, unpackedAttributes);\n}`),k.code.add(a`float calculateLineOffset() {\nreturn calculateLineOffsetSketch();\n}\nfloat calculateLinePressure() {\nreturn calculateLinePressureSketch();\n}`);break;case n.MIXED:s.varyings.add(\"vType\",\"float\"),f.code.add(a`void calculateStyleOutputs(UnpackedAttributes unpackedAttributes)\n{\nvType = unpackedAttributes.type;\nif (unpackedAttributes.type <= 0.0) {\ncalculateStyleOutputsSketch(vLineLengthPixels, unpackedAttributes);\n}\n}`),k.code.add(a`float calculateLineOffset() {\nif (vType <= 0.0) {\nreturn calculateLineOffsetSketch();\n}\nelse {\nreturn 0.0;\n}\n}\nfloat calculateLinePressure() {\nif (vType <= 0.0) {\nreturn calculateLinePressureSketch();\n}\nelse {\nreturn 1.0;\n}\n}`)}}export{f as LineOffset,d as LineOffsetDrawParameters};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}