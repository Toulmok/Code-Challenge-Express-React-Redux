{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport { glsl as e } from \"../../shaderModules/interfaces.js\";\nconst t = \"Size\",\n  n = \"InvSize\";\nfunction r(r, i) {\n  let o = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !1;\n  let u = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  if (r.hasWebGL2Context) {\n    const t = e`vec2(textureSize(${i}, ${e.int(u)}))`;\n    return o ? \"(1.0 / \" + t + \")\" : t;\n  }\n  return o ? i + n : i + t;\n}\nfunction i(t, r, i) {\n  let o = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  let u = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  if (t.hasWebGL2Context) return e`texelFetch(${r}, ivec2(${i}), ${e.int(u)})`;\n  let $ = e`texture2D(${r}, ${i} * `;\n  return $ += o ? e`(${o}))` : e`${r + n})`, $;\n}\nexport { n as TEXTURE_INVERSE_SIZE_UNIFORM_SUFFIX, t as TEXTURE_SIZE_UNIFORM_SUFFIX, i as texelFetch, r as textureSize };","map":{"version":3,"names":["glsl","e","t","n","r","i","o","arguments","length","undefined","u","hasWebGL2Context","int","$","TEXTURE_INVERSE_SIZE_UNIFORM_SUFFIX","TEXTURE_SIZE_UNIFORM_SUFFIX","texelFetch","textureSize"],"sources":["C:/code-challenge-react/frontend/node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/util/WebGL2Utils.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport{glsl as e}from\"../../shaderModules/interfaces.js\";const t=\"Size\",n=\"InvSize\";function r(r,i,o=!1,u=0){if(r.hasWebGL2Context){const t=e`vec2(textureSize(${i}, ${e.int(u)}))`;return o?\"(1.0 / \"+t+\")\":t}return o?i+n:i+t}function i(t,r,i,o=null,u=0){if(t.hasWebGL2Context)return e`texelFetch(${r}, ivec2(${i}), ${e.int(u)})`;let $=e`texture2D(${r}, ${i} * `;return $+=o?e`(${o}))`:e`${r+n})`,$}export{n as TEXTURE_INVERSE_SIZE_UNIFORM_SUFFIX,t as TEXTURE_SIZE_UNIFORM_SUFFIX,i as texelFetch,r as textureSize};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAAOA,IAAI,IAAIC,CAAC,QAAK,mCAAmC;AAAC,MAAMC,CAAC,GAAC,MAAM;EAACC,CAAC,GAAC,SAAS;AAAC,SAASC,CAACA,CAACA,CAAC,EAACC,CAAC,EAAU;EAAA,IAATC,CAAC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAC,CAAC,CAAC;EAAA,IAACG,CAAC,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAC,CAAC;EAAE,IAAGH,CAAC,CAACO,gBAAgB,EAAC;IAAC,MAAMT,CAAC,GAACD,CAAE,oBAAmBI,CAAE,KAAIJ,CAAC,CAACW,GAAG,CAACF,CAAC,CAAE,IAAG;IAAC,OAAOJ,CAAC,GAAC,SAAS,GAACJ,CAAC,GAAC,GAAG,GAACA,CAAC;EAAA;EAAC,OAAOI,CAAC,GAACD,CAAC,GAACF,CAAC,GAACE,CAAC,GAACH,CAAC;AAAA;AAAC,SAASG,CAACA,CAACH,CAAC,EAACE,CAAC,EAACC,CAAC,EAAY;EAAA,IAAXC,CAAC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAC,IAAI;EAAA,IAACG,CAAC,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAC,CAAC;EAAE,IAAGL,CAAC,CAACS,gBAAgB,EAAC,OAAOV,CAAE,cAAaG,CAAE,WAAUC,CAAE,MAAKJ,CAAC,CAACW,GAAG,CAACF,CAAC,CAAE,GAAE;EAAC,IAAIG,CAAC,GAACZ,CAAE,aAAYG,CAAE,KAAIC,CAAE,KAAI;EAAC,OAAOQ,CAAC,IAAEP,CAAC,GAACL,CAAE,IAAGK,CAAE,IAAG,GAACL,CAAE,GAAEG,CAAC,GAACD,CAAE,GAAE,EAACU,CAAC;AAAA;AAAC,SAAOV,CAAC,IAAIW,mCAAmC,EAACZ,CAAC,IAAIa,2BAA2B,EAACV,CAAC,IAAIW,UAAU,EAACZ,CAAC,IAAIa,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}