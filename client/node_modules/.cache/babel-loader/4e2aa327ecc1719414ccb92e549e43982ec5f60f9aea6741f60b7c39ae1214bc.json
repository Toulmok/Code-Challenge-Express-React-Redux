{"ast":null,"code":"/* Copyright 2017 Esri\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\n/*eslint-disable */\nimport Portal from '@arcgis/core/portal/Portal';\n/* eslint-enable */\n\nimport { LOAD_PORTAL, SET_IDENTITY, GET_USER_ITEMS, SET_USER_ITEMS } from '../constants/action-types';\nconst portal = new Portal({\n  authMode: 'immediate'\n});\nconst qParamArray = [\"title\", \"type\", \"created\"];\n\n/**\r\n * Middleware function with the signature\r\n *\r\n * storeInstance =>\r\n * functionToCallWithAnActionThatWillSendItToTheNextMiddleware =>\r\n * actionThatDispatchWasCalledWith =>\r\n * valueToUseAsTheReturnValueOfTheDispatchCall\r\n *\r\n * Typically written as\r\n *\r\n * store => next => action => result\r\n */\nconst arcgisMiddleWare = store => next => action => {\n  switch (action.type) {\n    case LOAD_PORTAL:\n      portal.load().then(() => {\n        store.dispatch({\n          type: SET_IDENTITY,\n          username: portal.user.username,\n          fullname: portal.user.fullName,\n          email: portal.user.email,\n          thumbnailurl: portal.user.thumbnailUrl\n        });\n        store.dispatch({\n          type: GET_USER_ITEMS\n        });\n      });\n    case GET_USER_ITEMS:\n      next(action);\n\n      //Does this sanitize?\n      let myUrlGet = new URL(window.location.href);\n      let myUrlHas = new URLSearchParams(myUrlGet.search);\n      let qString = '';\n      qParamArray.forEach(field => {\n        if (myUrlHas.has(field)) {\n          if (myUrlGet.searchParams.get(field) != '') {\n            qString += ' AND ' + field + ':' + myUrlGet.searchParams.get(field);\n          }\n        }\n      });\n      console.log(qString);\n      console.log(portal.user.username);\n      try {\n        return portal.queryItems({\n          query: `owner:${portal.user.username}` + qString,\n          sortField: 'modified',\n          sortOrder: 'desc',\n          num: 15\n        }).then(_ref => {\n          let {\n            results\n          } = _ref;\n          return store.dispatch({\n            type: SET_USER_ITEMS,\n            userItems: results\n          });\n        });\n      } catch {\n        return 0;\n      } finally {\n        return 0;\n      }\n    default:\n      return next(action);\n  }\n};\nexport default arcgisMiddleWare;","map":{"version":3,"names":["Portal","LOAD_PORTAL","SET_IDENTITY","GET_USER_ITEMS","SET_USER_ITEMS","portal","authMode","qParamArray","arcgisMiddleWare","store","next","action","type","load","then","dispatch","username","user","fullname","fullName","email","thumbnailurl","thumbnailUrl","myUrlGet","URL","window","location","href","myUrlHas","URLSearchParams","search","qString","forEach","field","has","searchParams","get","console","log","queryItems","query","sortField","sortOrder","num","_ref","results","userItems"],"sources":["C:/code-challenge-react/frontend/src/middleware/arcgis-portal.tsx"],"sourcesContent":["/* Copyright 2017 Esri\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\n/*eslint-disable */\r\nimport Portal from '@arcgis/core/portal/Portal'\r\n/* eslint-enable */\r\n\r\nimport {\r\n  LOAD_PORTAL,\r\n  SET_IDENTITY,\r\n  GET_USER_ITEMS,\r\n  SET_USER_ITEMS,\r\n} from '../constants/action-types'\r\n\r\nconst portal = new Portal({ authMode: 'immediate' })\r\nconst qParamArray = [\"title\",\"type\",\"created\"]\r\n\r\n/**\r\n * Middleware function with the signature\r\n *\r\n * storeInstance =>\r\n * functionToCallWithAnActionThatWillSendItToTheNextMiddleware =>\r\n * actionThatDispatchWasCalledWith =>\r\n * valueToUseAsTheReturnValueOfTheDispatchCall\r\n *\r\n * Typically written as\r\n *\r\n * store => next => action => result\r\n */\r\nconst arcgisMiddleWare = store => next => (action) => {\r\n  switch (action.type) {\r\n    case LOAD_PORTAL:\r\n      portal.load()\r\n      .then(() => {\r\n        store.dispatch({\r\n          type: SET_IDENTITY,\r\n          username: portal.user.username,\r\n          fullname: portal.user.fullName,\r\n          email: portal.user.email,\r\n          thumbnailurl: portal.user.thumbnailUrl,\r\n        })\r\n        store.dispatch({ type: GET_USER_ITEMS })\r\n      })\r\n\r\n    case GET_USER_ITEMS:\r\n      next(action)\r\n\r\n      //Does this sanitize?\r\n      let myUrlGet = new URL(window.location.href)\r\n      let myUrlHas = new URLSearchParams(myUrlGet.search)\r\n      let qString = ''\r\n\r\n      qParamArray.forEach(\r\n        field => {\r\n          if(myUrlHas.has(field)) {\r\n            if((myUrlGet.searchParams.get(field) != '')){\r\n              qString += ' AND ' + field + ':' + myUrlGet.searchParams.get(field)\r\n            }\r\n          }\r\n        }\r\n      )\r\n      \r\n      console.log(qString)\r\n      console.log(portal.user.username)\r\n      try { \r\n        return portal.queryItems({\r\n          query: `owner:${portal.user.username}` + qString,\r\n          sortField: 'modified',\r\n          sortOrder: 'desc',\r\n          num: 15,\r\n        })\r\n        .then(({ results }) => store.dispatch({\r\n          type: SET_USER_ITEMS,\r\n          userItems: results,\r\n        }))\r\n      }\r\n      catch { return 0 }\r\n      finally { return 0 }\r\n      \r\n    default:\r\n      return next(action)\r\n  }\r\n}\r\n\r\nexport default arcgisMiddleWare"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAM,MAAM,4BAA4B;AAC/C;;AAEA,SACEC,WAAW,EACXC,YAAY,EACZC,cAAc,EACdC,cAAc,QACT,2BAA2B;AAElC,MAAMC,MAAM,GAAG,IAAIL,MAAM,CAAC;EAAEM,QAAQ,EAAE;AAAY,CAAC,CAAC;AACpD,MAAMC,WAAW,GAAG,CAAC,OAAO,EAAC,MAAM,EAAC,SAAS,CAAC;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAGC,KAAK,IAAIC,IAAI,IAAKC,MAAM,IAAK;EACpD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKX,WAAW;MACdI,MAAM,CAACQ,IAAI,EAAE,CACZC,IAAI,CAAC,MAAM;QACVL,KAAK,CAACM,QAAQ,CAAC;UACbH,IAAI,EAAEV,YAAY;UAClBc,QAAQ,EAAEX,MAAM,CAACY,IAAI,CAACD,QAAQ;UAC9BE,QAAQ,EAAEb,MAAM,CAACY,IAAI,CAACE,QAAQ;UAC9BC,KAAK,EAAEf,MAAM,CAACY,IAAI,CAACG,KAAK;UACxBC,YAAY,EAAEhB,MAAM,CAACY,IAAI,CAACK;QAC5B,CAAC,CAAC;QACFb,KAAK,CAACM,QAAQ,CAAC;UAAEH,IAAI,EAAET;QAAe,CAAC,CAAC;MAC1C,CAAC,CAAC;IAEJ,KAAKA,cAAc;MACjBO,IAAI,CAACC,MAAM,CAAC;;MAEZ;MACA,IAAIY,QAAQ,GAAG,IAAIC,GAAG,CAACC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAC;MAC5C,IAAIC,QAAQ,GAAG,IAAIC,eAAe,CAACN,QAAQ,CAACO,MAAM,CAAC;MACnD,IAAIC,OAAO,GAAG,EAAE;MAEhBxB,WAAW,CAACyB,OAAO,CACjBC,KAAK,IAAI;QACP,IAAGL,QAAQ,CAACM,GAAG,CAACD,KAAK,CAAC,EAAE;UACtB,IAAIV,QAAQ,CAACY,YAAY,CAACC,GAAG,CAACH,KAAK,CAAC,IAAI,EAAE,EAAE;YAC1CF,OAAO,IAAI,OAAO,GAAGE,KAAK,GAAG,GAAG,GAAGV,QAAQ,CAACY,YAAY,CAACC,GAAG,CAACH,KAAK,CAAC;UACrE;QACF;MACF,CAAC,CACF;MAEDI,OAAO,CAACC,GAAG,CAACP,OAAO,CAAC;MACpBM,OAAO,CAACC,GAAG,CAACjC,MAAM,CAACY,IAAI,CAACD,QAAQ,CAAC;MACjC,IAAI;QACF,OAAOX,MAAM,CAACkC,UAAU,CAAC;UACvBC,KAAK,EAAG,SAAQnC,MAAM,CAACY,IAAI,CAACD,QAAS,EAAC,GAAGe,OAAO;UAChDU,SAAS,EAAE,UAAU;UACrBC,SAAS,EAAE,MAAM;UACjBC,GAAG,EAAE;QACP,CAAC,CAAC,CACD7B,IAAI,CAAC8B,IAAA;UAAA,IAAC;YAAEC;UAAQ,CAAC,GAAAD,IAAA;UAAA,OAAKnC,KAAK,CAACM,QAAQ,CAAC;YACpCH,IAAI,EAAER,cAAc;YACpB0C,SAAS,EAAED;UACb,CAAC,CAAC;QAAA,EAAC;MACL,CAAC,CACD,MAAM;QAAE,OAAO,CAAC;MAAC,CAAC,SACV;QAAE,OAAO,CAAC;MAAC;IAErB;MACE,OAAOnC,IAAI,CAACC,MAAM,CAAC;EAAA;AAEzB,CAAC;AAED,eAAeH,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}