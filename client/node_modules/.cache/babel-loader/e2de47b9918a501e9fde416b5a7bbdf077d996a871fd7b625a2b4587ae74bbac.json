{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport { result as e } from \"../../core/asyncUtils.js\";\nimport t from \"../../core/Error.js\";\nimport { assertIsSome as i, isNone as s, isSome as n } from \"../../core/maybe.js\";\nimport { whenOrAbort as o, throwIfAbortError as l, eachAlways as a } from \"../../core/promiseUtils.js\";\nimport { getMetersPerUnitForSR as r } from \"../../core/unitUtils.js\";\nimport c from \"../../geometry/Multipoint.js\";\nimport u from \"../../geometry/Point.js\";\nimport h from \"../../geometry/Polyline.js\";\nimport { initializeProjection as p, project as m } from \"../../geometry/projection.js\";\nimport { fromExtent as f, create as d, contains as y } from \"../../geometry/support/aaBoundingRect.js\";\nimport { MultiTileElevationSampler as T } from \"./ElevationSampler.js\";\nimport { ElevationTile as v } from \"./ElevationTile.js\";\nimport { TileKey as w } from \"./TileKey.js\";\nclass g {\n  async queryAll(e, i, s) {\n    if (!(e = s && s.ignoreInvisibleLayers ? e.filter(e => e.visible) : e.slice()).length) throw new t(\"elevation-query:invalid-layer\", \"Elevation queries require at least one elevation layer to fetch tiles from\");\n    const n = x.fromGeometry(i);\n    let o = !1;\n    s && s.returnSampleInfo || (o = !0);\n    const l = {\n        ...A,\n        ...s,\n        returnSampleInfo: !0\n      },\n      a = await this.query(e[e.length - 1], n, l),\n      r = await this._queryAllContinue(e, a, l);\n    return r.geometry = r.geometry.export(), o && delete r.sampleInfo, r;\n  }\n  async query(e, i, s) {\n    if (!e) throw new t(\"elevation-query:invalid-layer\", \"Elevation queries require an elevation layer to fetch tiles from\");\n    if (!i || !(i instanceof x) && \"point\" !== i.type && \"multipoint\" !== i.type && \"polyline\" !== i.type) throw new t(\"elevation-query:invalid-geometry\", \"Only point, polyline and multipoint geometries can be used to query elevation\");\n    const n = {\n        ...A,\n        ...s\n      },\n      o = new R(e, i.spatialReference, n),\n      l = n.signal;\n    return await e.load({\n      signal: l\n    }), await this._createGeometryDescriptor(o, i, l), await this._selectTiles(o, l), await this._populateElevationTiles(o, l), this._sampleGeometryWithElevation(o), this._createQueryResult(o, l);\n  }\n  async createSampler(e, i, s) {\n    if (!e) throw new t(\"elevation-query:invalid-layer\", \"Elevation queries require an elevation layer to fetch tiles from\");\n    if (!i || \"extent\" !== i.type) throw new t(\"elevation-query:invalid-extent\", \"Invalid or undefined extent\");\n    const n = {\n      ...A,\n      ...s\n    };\n    return this._createSampler(e, i, n);\n  }\n  async createSamplerAll(e, i, s) {\n    if (!(e = s && s.ignoreInvisibleLayers ? e.filter(e => e.visible) : e.slice()).length) throw new t(\"elevation-query:invalid-layer\", \"Elevation queries require at least one elevation layer to fetch tiles from\");\n    if (!i || \"extent\" !== i.type) throw new t(\"elevation-query:invalid-extent\", \"Invalid or undefined extent\");\n    const n = {\n        ...A,\n        ...s,\n        returnSampleInfo: !0\n      },\n      o = await this._createSampler(e[e.length - 1], i, n);\n    return this._createSamplerAllContinue(e, i, o, n);\n  }\n  async _createSampler(e, t, i, s) {\n    const n = i.signal;\n    await e.load({\n      signal: n\n    });\n    const o = t.spatialReference,\n      l = e.tileInfo.spatialReference;\n    o.equals(l) || (await p([{\n      source: o,\n      dest: l\n    }], {\n      signal: n\n    }), t = m(t, l));\n    const a = new q(e, t, i, s);\n    return await this._selectTiles(a, n), await this._populateElevationTiles(a, n), new T(a.elevationTiles, a.layer.tileInfo, a.options.noDataValue);\n  }\n  async _createSamplerAllContinue(e, t, i, s) {\n    if (e.pop(), !e.length) return i;\n    const n = i.samplers.map(e => f(e.extent)),\n      o = await this._createSampler(e[e.length - 1], t, s, n);\n    if (0 === o.samplers.length) return i;\n    const l = i.samplers.concat(o.samplers),\n      a = new T(l, s.noDataValue);\n    return this._createSamplerAllContinue(e, t, a, s);\n  }\n  async _queryAllContinue(e, t, s) {\n    const n = e.pop(),\n      o = t.geometry.coordinates,\n      l = t.sampleInfo;\n    i(l);\n    const a = [],\n      r = [];\n    for (let i = 0; i < o.length; i++) {\n      const t = l[i];\n      t.demResolution >= 0 ? t.source || (t.source = n) : e.length && (a.push(o[i]), r.push(i));\n    }\n    if (!e.length || 0 === a.length) return t;\n    const c = t.geometry.clone(a),\n      u = await this.query(e[e.length - 1], c, s),\n      h = u.sampleInfo;\n    if (!h) throw new Error(\"no sampleInfo\");\n    return r.forEach((e, t) => {\n      o[e].z = u.geometry.coordinates[t].z, l[e].demResolution = h[t].demResolution;\n    }), this._queryAllContinue(e, t, s);\n  }\n  async _createQueryResult(e, t) {\n    const s = await e.geometry.project(e.outSpatialReference, t);\n    i(s);\n    const n = {\n      geometry: s.export(),\n      noDataValue: e.options.noDataValue\n    };\n    return e.options.returnSampleInfo && (n.sampleInfo = this._extractSampleInfo(e)), e.geometry.coordinates.forEach(e => {\n      e.tile = null, e.elevationTile = null;\n    }), n;\n  }\n  async _createGeometryDescriptor(e, i, s) {\n    let n;\n    const o = e.layer.tileInfo.spatialReference;\n    if (i instanceof x ? n = await i.project(o, s) : (await p([{\n      source: i.spatialReference,\n      dest: o\n    }], {\n      signal: s\n    }), n = m(i, o)), !n) throw new t(\"elevation-query:spatial-reference-mismatch\", `Cannot query elevation in '${i.spatialReference.wkid}' on an elevation service in '${o.wkid}'`);\n    e.geometry = x.fromGeometry(n);\n  }\n  async _selectTiles(e, i) {\n    const s = e.options.demResolution;\n    if (\"geometry\" === e.type && this._preselectOutsideLayerExtent(e), \"number\" == typeof s) this._selectTilesClosestResolution(e);else if (\"finest-contiguous\" === s) await this._selectTilesFinestContiguous(e, i);else {\n      if (\"auto\" !== s) throw new t(\"elevation-query:invalid-dem-resolution\", `Invalid dem resolution value '${s}', expected a number, \"finest-contiguous\" or \"auto\"`);\n      await this._selectTilesAuto(e, i);\n    }\n  }\n  _preselectOutsideLayerExtent(e) {\n    if (s(e.layer.fullExtent)) return;\n    const t = new v(null);\n    t.sample = () => e.options.noDataValue, e.outsideExtentTile = t;\n    const i = e.layer.fullExtent;\n    e.geometry.coordinates.forEach(e => {\n      const s = e.x,\n        n = e.y;\n      (s < i.xmin || s > i.xmax || n < i.ymin || n > i.ymax) && (e.elevationTile = t);\n    });\n  }\n  _selectTilesClosestResolution(e) {\n    const t = e.layer.tileInfo,\n      i = this._findNearestDemResolutionLODIndex(t, e.options.demResolution);\n    e.selectTilesAtLOD(i);\n  }\n  _findNearestDemResolutionLODIndex(e, t) {\n    const i = t / r(e.spatialReference);\n    let s = e.lods[0],\n      n = 0;\n    for (let o = 1; o < e.lods.length; o++) {\n      const t = e.lods[o];\n      Math.abs(t.resolution - i) < Math.abs(s.resolution - i) && (s = t, n = o);\n    }\n    return n;\n  }\n  async _selectTilesFinestContiguous(e, t) {\n    const i = I(e.layer.tileInfo, e.options.minDemResolution);\n    await this._selectTilesFinestContiguousAt(e, i, t);\n  }\n  async _selectTilesFinestContiguousAt(e, i, s) {\n    const n = e.layer;\n    if (e.selectTilesAtLOD(i), i < 0) return;\n    const a = n.tilemapCache,\n      r = e.getTilesToFetch();\n    try {\n      if (a) await o(Promise.all(r.map(e => a.fetchAvailability(e.level, e.row, e.col, {\n        signal: s\n      }))), s);else if (await this._populateElevationTiles(e, s), !e.allElevationTilesFetched()) throw e.clearElevationTiles(), new t(\"elevation-query:has-unavailable-tiles\");\n    } catch (c) {\n      l(c), await this._selectTilesFinestContiguousAt(e, i - 1, s);\n    }\n  }\n  async _populateElevationTiles(e, t) {\n    const i = e.getTilesToFetch(),\n      s = {},\n      l = e.options.cache,\n      r = e.options.noDataValue,\n      c = i.map(async i => {\n        if (null == i.id) return;\n        const o = `${e.layer.uid}:${i.id}:${r}`,\n          a = n(l) ? l.get(o) : null,\n          c = n(a) ? a : await e.layer.fetchTile(i.level, i.row, i.col, {\n            noDataValue: r,\n            signal: t\n          });\n        n(l) && l.put(o, c), s[i.id] = new v(i, c);\n      });\n    await o(a(c), t), e.populateElevationTiles(s);\n  }\n  async _selectTilesAuto(t, i) {\n    this._selectTilesAutoFinest(t), this._reduceTilesForMaximumRequests(t);\n    const s = t.layer.tilemapCache;\n    if (!s) return this._selectTilesAutoPrefetchUpsample(t, i);\n    const n = t.getTilesToFetch(),\n      a = {},\n      r = n.map(async t => {\n        const n = new w(null, 0, 0, 0, d()),\n          o = await e(s.fetchAvailabilityUpsample(t.level, t.row, t.col, n, {\n            signal: i\n          }));\n        !1 !== o.ok ? null != t.id && (a[t.id] = n) : l(o.error);\n      });\n    await o(Promise.all(r), i), t.remapTiles(a);\n  }\n  _reduceTilesForMaximumRequests(e) {\n    const t = e.layer.tileInfo;\n    let i = 0;\n    const s = {},\n      n = e => {\n        null != e.id && (e.id in s ? s[e.id]++ : (s[e.id] = 1, i++));\n      },\n      o = e => {\n        if (null == e.id) return;\n        const t = s[e.id];\n        1 === t ? (delete s[e.id], i--) : s[e.id] = t - 1;\n      };\n    e.forEachTileToFetch(n, o);\n    let l = !0;\n    for (; l && (l = !1, e.forEachTileToFetch(s => {\n      i <= e.options.maximumAutoTileRequests || (o(s), t.upsampleTile(s) && (l = !0), n(s));\n    }, o), l););\n  }\n  _selectTilesAutoFinest(e) {\n    const t = I(e.layer.tileInfo, e.options.minDemResolution);\n    e.selectTilesAtLOD(t, e.options.maximumAutoTileRequests);\n  }\n  async _selectTilesAutoPrefetchUpsample(e, t) {\n    const i = e.layer.tileInfo;\n    await this._populateElevationTiles(e, t);\n    let s = !1;\n    e.forEachTileToFetch((e, t) => {\n      i.upsampleTile(e) ? s = !0 : t();\n    }), s && (await this._selectTilesAutoPrefetchUpsample(e, t));\n  }\n  _sampleGeometryWithElevation(e) {\n    e.geometry.coordinates.forEach(t => {\n      const i = t.elevationTile;\n      let s = e.options.noDataValue;\n      if (i) {\n        const e = i.sample(t.x, t.y);\n        n(e) ? s = e : t.elevationTile = null;\n      }\n      t.z = s;\n    });\n  }\n  _extractSampleInfo(e) {\n    const t = e.layer.tileInfo,\n      i = r(t.spatialReference);\n    return e.geometry.coordinates.map(s => {\n      let n = -1;\n      if (s.elevationTile && s.elevationTile !== e.outsideExtentTile) {\n        n = t.lodAt(s.elevationTile.tile.level).resolution * i;\n      }\n      return {\n        demResolution: n\n      };\n    });\n  }\n}\nclass x {\n  export() {\n    return this._exporter(this.coordinates, this.spatialReference);\n  }\n  clone(e) {\n    const t = new x();\n    return t.geometry = this.geometry, t.spatialReference = this.spatialReference, t.coordinates = e || this.coordinates.map(e => e.clone()), t._exporter = this._exporter, t;\n  }\n  async project(e, t) {\n    if (this.spatialReference.equals(e)) return this.clone();\n    await p([{\n      source: this.spatialReference,\n      dest: e\n    }], {\n      signal: t\n    });\n    const i = new c({\n        spatialReference: this.spatialReference,\n        points: this.coordinates.map(e => [e.x, e.y])\n      }),\n      s = m(i, e);\n    if (!s) return null;\n    const n = this.coordinates.map((e, t) => {\n        const i = e.clone(),\n          n = s.points[t];\n        return i.x = n[0], i.y = n[1], i;\n      }),\n      o = this.clone(n);\n    return o.spatialReference = e, o;\n  }\n  static fromGeometry(e) {\n    const t = new x();\n    if (t.geometry = e, t.spatialReference = e.spatialReference, e instanceof x) t.coordinates = e.coordinates.map(e => e.clone()), t._exporter = (t, i) => {\n      const s = e.clone(t);\n      return s.spatialReference = i, s;\n    };else switch (e.type) {\n      case \"point\":\n        {\n          const i = e,\n            {\n              hasZ: s,\n              hasM: n\n            } = i;\n          t.coordinates = s && n ? [new _(i.x, i.y, i.z, i.m)] : s ? [new _(i.x, i.y, i.z)] : n ? [new _(i.x, i.y, null, i.m)] : [new _(i.x, i.y)], t._exporter = (t, i) => e.hasM ? new u(t[0].x, t[0].y, t[0].z, t[0].m, i) : new u(t[0].x, t[0].y, t[0].z, i);\n          break;\n        }\n      case \"multipoint\":\n        {\n          const i = e,\n            {\n              hasZ: s,\n              hasM: n\n            } = i;\n          t.coordinates = s && n ? i.points.map(e => new _(e[0], e[1], e[2], e[3])) : s ? i.points.map(e => new _(e[0], e[1], e[2])) : n ? i.points.map(e => new _(e[0], e[1], null, e[2])) : i.points.map(e => new _(e[0], e[1])), t._exporter = (t, i) => e.hasM ? new c({\n            points: t.map(e => [e.x, e.y, e.z, e.m]),\n            hasZ: !0,\n            hasM: !0,\n            spatiaReference: i\n          }) : new c(t.map(e => [e.x, e.y, e.z]), i);\n          break;\n        }\n      case \"polyline\":\n        {\n          const i = e,\n            s = [],\n            n = [],\n            {\n              hasZ: o,\n              hasM: l\n            } = e;\n          let a = 0;\n          for (const e of i.paths) if (n.push([a, a + e.length]), a += e.length, o && l) for (const t of e) s.push(new _(t[0], t[1], t[2], t[3]));else if (o) for (const t of e) s.push(new _(t[0], t[1], t[2]));else if (l) for (const t of e) s.push(new _(t[0], t[1], null, t[2]));else for (const t of e) s.push(new _(t[0], t[1]));\n          t.coordinates = s, t._exporter = (t, i) => {\n            const s = e.hasM ? t.map(e => [e.x, e.y, e.z, e.m]) : t.map(e => [e.x, e.y, e.z]),\n              o = n.map(e => s.slice(e[0], e[1]));\n            return new h({\n              paths: o,\n              hasM: e.hasM,\n              hasZ: !0,\n              spatialReference: i\n            });\n          };\n          break;\n        }\n    }\n    return t;\n  }\n}\nclass _ {\n  constructor(e, t) {\n    let i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let s = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    let n = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    let o = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n    this.x = e, this.y = t, this.z = i, this.m = s, this.tile = n, this.elevationTile = o;\n  }\n  clone() {\n    return new _(this.x, this.y, this.z, this.m);\n  }\n}\nclass E {\n  constructor(e, t) {\n    this.layer = e, this.options = t;\n  }\n}\nclass R extends E {\n  constructor(e, t, i) {\n    super(e, i), this.outSpatialReference = t, this.type = \"geometry\";\n  }\n  selectTilesAtLOD(e) {\n    if (e < 0) this.geometry.coordinates.forEach(e => {\n      e.tile = null;\n    });else {\n      const t = this.layer.tileInfo,\n        i = t.lods[e].level;\n      this.geometry.coordinates.forEach(e => {\n        e.tile = t.tileAt(i, e.x, e.y);\n      });\n    }\n  }\n  allElevationTilesFetched() {\n    return !this.geometry.coordinates.some(e => !e.elevationTile);\n  }\n  clearElevationTiles() {\n    for (const e of this.geometry.coordinates) e.elevationTile !== this.outsideExtentTile && (e.elevationTile = null);\n  }\n  populateElevationTiles(e) {\n    for (const t of this.geometry.coordinates) !t.elevationTile && t.tile?.id && (t.elevationTile = e[t.tile.id]);\n  }\n  remapTiles(e) {\n    for (const t of this.geometry.coordinates) {\n      const i = t.tile?.id;\n      t.tile = i ? e[i] : null;\n    }\n  }\n  getTilesToFetch() {\n    const e = {},\n      t = [];\n    for (const i of this.geometry.coordinates) {\n      const s = i.tile;\n      if (!s) continue;\n      const n = i.tile?.id;\n      i.elevationTile || !n || e[n] || (e[n] = s, t.push(s));\n    }\n    return t;\n  }\n  forEachTileToFetch(e) {\n    for (const t of this.geometry.coordinates) t.tile && !t.elevationTile && e(t.tile, () => {\n      t.tile = null;\n    });\n  }\n}\nclass q extends E {\n  constructor(e, t, i, s) {\n    super(e, i), this.type = \"extent\", this.elevationTiles = [], this._candidateTiles = [], this._fetchedCandidates = new Set(), this.extent = t.intersection(e.fullExtent), this.maskExtents = s;\n  }\n  selectTilesAtLOD(e, t) {\n    const i = this._maximumLodForRequests(t),\n      s = Math.min(i, e);\n    s < 0 ? this._candidateTiles.length = 0 : this._selectCandidateTilesCoveringExtentAt(s);\n  }\n  _maximumLodForRequests(e) {\n    const t = this.layer.tileInfo;\n    if (!e) return t.lods.length - 1;\n    const i = this.extent;\n    if (s(i)) return -1;\n    for (let s = t.lods.length - 1; s >= 0; s--) {\n      const n = t.lods[s],\n        o = n.resolution * t.size[0],\n        l = n.resolution * t.size[1];\n      if (Math.ceil(i.width / o) * Math.ceil(i.height / l) <= e) return s;\n    }\n    return -1;\n  }\n  allElevationTilesFetched() {\n    return this._candidateTiles.length === this.elevationTiles.length;\n  }\n  clearElevationTiles() {\n    this.elevationTiles.length = 0, this._fetchedCandidates.clear();\n  }\n  populateElevationTiles(e) {\n    for (const t of this._candidateTiles) {\n      const i = t.id && e[t.id];\n      i && (this._fetchedCandidates.add(t), this.elevationTiles.push(i));\n    }\n  }\n  remapTiles(e) {\n    this._candidateTiles = this._uniqueNonOverlappingTiles(this._candidateTiles.map(t => e[t.id]));\n  }\n  getTilesToFetch() {\n    return this._candidateTiles;\n  }\n  forEachTileToFetch(e, t) {\n    const i = this._candidateTiles;\n    this._candidateTiles = [], i.forEach(i => {\n      if (this._fetchedCandidates.has(i)) return void (t && t(i));\n      let s = !1;\n      e(i, () => s = !0), s ? t && t(i) : this._candidateTiles.push(i);\n    }), this._candidateTiles = this._uniqueNonOverlappingTiles(this._candidateTiles, t);\n  }\n  _uniqueNonOverlappingTiles(e, t) {\n    const i = {},\n      s = [];\n    for (const o of e) {\n      const e = o.id;\n      e && !i[e] ? (i[e] = o, s.push(o)) : t && t(o);\n    }\n    const n = s.sort((e, t) => e.level - t.level);\n    return n.filter((e, i) => {\n      for (let s = 0; s < i; s++) {\n        const i = n[s].extent;\n        if (i && e.extent && y(i, e.extent)) return t && t(e), !1;\n      }\n      return !0;\n    });\n  }\n  _selectCandidateTilesCoveringExtentAt(e) {\n    this._candidateTiles.length = 0;\n    const t = this.extent;\n    if (s(t)) return;\n    const i = this.layer.tileInfo,\n      n = i.lods[e],\n      o = i.tileAt(n.level, t.xmin, t.ymin),\n      l = o.extent;\n    if (s(l)) return;\n    const a = n.resolution * i.size[0],\n      r = n.resolution * i.size[1],\n      c = Math.ceil((t.xmax - l[0]) / a),\n      u = Math.ceil((t.ymax - l[1]) / r);\n    for (let s = 0; s < u; s++) for (let e = 0; e < c; e++) {\n      const t = new w(null, o.level, o.row - s, o.col + e);\n      i.updateTileInfo(t), this._tileIsMasked(t) || this._candidateTiles.push(t);\n    }\n  }\n  _tileIsMasked(e) {\n    return !!this.maskExtents && this.maskExtents.some(t => e.extent && y(t, e.extent));\n  }\n}\nfunction I(e) {\n  let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let i = e.lods.length - 1;\n  if (t > 0) {\n    const s = t / r(e.spatialReference),\n      n = e.lods.findIndex(e => e.resolution < s);\n    0 === n ? i = 0 : n > 0 && (i = n - 1);\n  }\n  return i;\n}\nconst A = {\n  maximumAutoTileRequests: 20,\n  noDataValue: 0,\n  returnSampleInfo: !1,\n  demResolution: \"auto\",\n  minDemResolution: 0\n};\nexport { g as ElevationQuery, x as GeometryDescriptor, I as getFinestLodIndex };","map":{"version":3,"names":["result","e","t","assertIsSome","i","isNone","s","isSome","n","whenOrAbort","o","throwIfAbortError","l","eachAlways","a","getMetersPerUnitForSR","r","c","u","h","initializeProjection","p","project","m","fromExtent","f","create","d","contains","y","MultiTileElevationSampler","T","ElevationTile","v","TileKey","w","g","queryAll","ignoreInvisibleLayers","filter","visible","slice","length","x","fromGeometry","returnSampleInfo","A","query","_queryAllContinue","geometry","export","sampleInfo","type","R","spatialReference","signal","load","_createGeometryDescriptor","_selectTiles","_populateElevationTiles","_sampleGeometryWithElevation","_createQueryResult","createSampler","_createSampler","createSamplerAll","_createSamplerAllContinue","tileInfo","equals","source","dest","q","elevationTiles","layer","options","noDataValue","pop","samplers","map","extent","concat","coordinates","demResolution","push","clone","Error","forEach","z","outSpatialReference","_extractSampleInfo","tile","elevationTile","wkid","_preselectOutsideLayerExtent","_selectTilesClosestResolution","_selectTilesFinestContiguous","_selectTilesAuto","fullExtent","sample","outsideExtentTile","xmin","xmax","ymin","ymax","_findNearestDemResolutionLODIndex","selectTilesAtLOD","lods","Math","abs","resolution","I","minDemResolution","_selectTilesFinestContiguousAt","tilemapCache","getTilesToFetch","Promise","all","fetchAvailability","level","row","col","allElevationTilesFetched","clearElevationTiles","cache","id","uid","get","fetchTile","put","populateElevationTiles","_selectTilesAutoFinest","_reduceTilesForMaximumRequests","_selectTilesAutoPrefetchUpsample","fetchAvailabilityUpsample","ok","error","remapTiles","forEachTileToFetch","maximumAutoTileRequests","upsampleTile","lodAt","_exporter","points","hasZ","hasM","_","spatiaReference","paths","constructor","arguments","undefined","E","tileAt","some","_candidateTiles","_fetchedCandidates","Set","intersection","maskExtents","_maximumLodForRequests","min","_selectCandidateTilesCoveringExtentAt","size","ceil","width","height","clear","add","_uniqueNonOverlappingTiles","has","sort","updateTileInfo","_tileIsMasked","findIndex","ElevationQuery","GeometryDescriptor","getFinestLodIndex"],"sources":["C:/code-challenge-react/frontend/node_modules/@arcgis/core/layers/support/ElevationQuery.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport{result as e}from\"../../core/asyncUtils.js\";import t from\"../../core/Error.js\";import{assertIsSome as i,isNone as s,isSome as n}from\"../../core/maybe.js\";import{whenOrAbort as o,throwIfAbortError as l,eachAlways as a}from\"../../core/promiseUtils.js\";import{getMetersPerUnitForSR as r}from\"../../core/unitUtils.js\";import c from\"../../geometry/Multipoint.js\";import u from\"../../geometry/Point.js\";import h from\"../../geometry/Polyline.js\";import{initializeProjection as p,project as m}from\"../../geometry/projection.js\";import{fromExtent as f,create as d,contains as y}from\"../../geometry/support/aaBoundingRect.js\";import{MultiTileElevationSampler as T}from\"./ElevationSampler.js\";import{ElevationTile as v}from\"./ElevationTile.js\";import{TileKey as w}from\"./TileKey.js\";class g{async queryAll(e,i,s){if(!(e=s&&s.ignoreInvisibleLayers?e.filter((e=>e.visible)):e.slice()).length)throw new t(\"elevation-query:invalid-layer\",\"Elevation queries require at least one elevation layer to fetch tiles from\");const n=x.fromGeometry(i);let o=!1;s&&s.returnSampleInfo||(o=!0);const l={...A,...s,returnSampleInfo:!0},a=await this.query(e[e.length-1],n,l),r=await this._queryAllContinue(e,a,l);return r.geometry=r.geometry.export(),o&&delete r.sampleInfo,r}async query(e,i,s){if(!e)throw new t(\"elevation-query:invalid-layer\",\"Elevation queries require an elevation layer to fetch tiles from\");if(!i||!(i instanceof x)&&\"point\"!==i.type&&\"multipoint\"!==i.type&&\"polyline\"!==i.type)throw new t(\"elevation-query:invalid-geometry\",\"Only point, polyline and multipoint geometries can be used to query elevation\");const n={...A,...s},o=new R(e,i.spatialReference,n),l=n.signal;return await e.load({signal:l}),await this._createGeometryDescriptor(o,i,l),await this._selectTiles(o,l),await this._populateElevationTiles(o,l),this._sampleGeometryWithElevation(o),this._createQueryResult(o,l)}async createSampler(e,i,s){if(!e)throw new t(\"elevation-query:invalid-layer\",\"Elevation queries require an elevation layer to fetch tiles from\");if(!i||\"extent\"!==i.type)throw new t(\"elevation-query:invalid-extent\",\"Invalid or undefined extent\");const n={...A,...s};return this._createSampler(e,i,n)}async createSamplerAll(e,i,s){if(!(e=s&&s.ignoreInvisibleLayers?e.filter((e=>e.visible)):e.slice()).length)throw new t(\"elevation-query:invalid-layer\",\"Elevation queries require at least one elevation layer to fetch tiles from\");if(!i||\"extent\"!==i.type)throw new t(\"elevation-query:invalid-extent\",\"Invalid or undefined extent\");const n={...A,...s,returnSampleInfo:!0},o=await this._createSampler(e[e.length-1],i,n);return this._createSamplerAllContinue(e,i,o,n)}async _createSampler(e,t,i,s){const n=i.signal;await e.load({signal:n});const o=t.spatialReference,l=e.tileInfo.spatialReference;o.equals(l)||(await p([{source:o,dest:l}],{signal:n}),t=m(t,l));const a=new q(e,t,i,s);return await this._selectTiles(a,n),await this._populateElevationTiles(a,n),new T(a.elevationTiles,a.layer.tileInfo,a.options.noDataValue)}async _createSamplerAllContinue(e,t,i,s){if(e.pop(),!e.length)return i;const n=i.samplers.map((e=>f(e.extent))),o=await this._createSampler(e[e.length-1],t,s,n);if(0===o.samplers.length)return i;const l=i.samplers.concat(o.samplers),a=new T(l,s.noDataValue);return this._createSamplerAllContinue(e,t,a,s)}async _queryAllContinue(e,t,s){const n=e.pop(),o=t.geometry.coordinates,l=t.sampleInfo;i(l);const a=[],r=[];for(let i=0;i<o.length;i++){const t=l[i];t.demResolution>=0?t.source||(t.source=n):e.length&&(a.push(o[i]),r.push(i))}if(!e.length||0===a.length)return t;const c=t.geometry.clone(a),u=await this.query(e[e.length-1],c,s),h=u.sampleInfo;if(!h)throw new Error(\"no sampleInfo\");return r.forEach(((e,t)=>{o[e].z=u.geometry.coordinates[t].z,l[e].demResolution=h[t].demResolution})),this._queryAllContinue(e,t,s)}async _createQueryResult(e,t){const s=await e.geometry.project(e.outSpatialReference,t);i(s);const n={geometry:s.export(),noDataValue:e.options.noDataValue};return e.options.returnSampleInfo&&(n.sampleInfo=this._extractSampleInfo(e)),e.geometry.coordinates.forEach((e=>{e.tile=null,e.elevationTile=null})),n}async _createGeometryDescriptor(e,i,s){let n;const o=e.layer.tileInfo.spatialReference;if(i instanceof x?n=await i.project(o,s):(await p([{source:i.spatialReference,dest:o}],{signal:s}),n=m(i,o)),!n)throw new t(\"elevation-query:spatial-reference-mismatch\",`Cannot query elevation in '${i.spatialReference.wkid}' on an elevation service in '${o.wkid}'`);e.geometry=x.fromGeometry(n)}async _selectTiles(e,i){const s=e.options.demResolution;if(\"geometry\"===e.type&&this._preselectOutsideLayerExtent(e),\"number\"==typeof s)this._selectTilesClosestResolution(e);else if(\"finest-contiguous\"===s)await this._selectTilesFinestContiguous(e,i);else{if(\"auto\"!==s)throw new t(\"elevation-query:invalid-dem-resolution\",`Invalid dem resolution value '${s}', expected a number, \"finest-contiguous\" or \"auto\"`);await this._selectTilesAuto(e,i)}}_preselectOutsideLayerExtent(e){if(s(e.layer.fullExtent))return;const t=new v(null);t.sample=()=>e.options.noDataValue,e.outsideExtentTile=t;const i=e.layer.fullExtent;e.geometry.coordinates.forEach((e=>{const s=e.x,n=e.y;(s<i.xmin||s>i.xmax||n<i.ymin||n>i.ymax)&&(e.elevationTile=t)}))}_selectTilesClosestResolution(e){const t=e.layer.tileInfo,i=this._findNearestDemResolutionLODIndex(t,e.options.demResolution);e.selectTilesAtLOD(i)}_findNearestDemResolutionLODIndex(e,t){const i=t/r(e.spatialReference);let s=e.lods[0],n=0;for(let o=1;o<e.lods.length;o++){const t=e.lods[o];Math.abs(t.resolution-i)<Math.abs(s.resolution-i)&&(s=t,n=o)}return n}async _selectTilesFinestContiguous(e,t){const i=I(e.layer.tileInfo,e.options.minDemResolution);await this._selectTilesFinestContiguousAt(e,i,t)}async _selectTilesFinestContiguousAt(e,i,s){const n=e.layer;if(e.selectTilesAtLOD(i),i<0)return;const a=n.tilemapCache,r=e.getTilesToFetch();try{if(a)await o(Promise.all(r.map((e=>a.fetchAvailability(e.level,e.row,e.col,{signal:s})))),s);else if(await this._populateElevationTiles(e,s),!e.allElevationTilesFetched())throw e.clearElevationTiles(),new t(\"elevation-query:has-unavailable-tiles\")}catch(c){l(c),await this._selectTilesFinestContiguousAt(e,i-1,s)}}async _populateElevationTiles(e,t){const i=e.getTilesToFetch(),s={},l=e.options.cache,r=e.options.noDataValue,c=i.map((async i=>{if(null==i.id)return;const o=`${e.layer.uid}:${i.id}:${r}`,a=n(l)?l.get(o):null,c=n(a)?a:await e.layer.fetchTile(i.level,i.row,i.col,{noDataValue:r,signal:t});n(l)&&l.put(o,c),s[i.id]=new v(i,c)}));await o(a(c),t),e.populateElevationTiles(s)}async _selectTilesAuto(t,i){this._selectTilesAutoFinest(t),this._reduceTilesForMaximumRequests(t);const s=t.layer.tilemapCache;if(!s)return this._selectTilesAutoPrefetchUpsample(t,i);const n=t.getTilesToFetch(),a={},r=n.map((async t=>{const n=new w(null,0,0,0,d()),o=await e(s.fetchAvailabilityUpsample(t.level,t.row,t.col,n,{signal:i}));!1!==o.ok?null!=t.id&&(a[t.id]=n):l(o.error)}));await o(Promise.all(r),i),t.remapTiles(a)}_reduceTilesForMaximumRequests(e){const t=e.layer.tileInfo;let i=0;const s={},n=e=>{null!=e.id&&(e.id in s?s[e.id]++:(s[e.id]=1,i++))},o=e=>{if(null==e.id)return;const t=s[e.id];1===t?(delete s[e.id],i--):s[e.id]=t-1};e.forEachTileToFetch(n,o);let l=!0;for(;l&&(l=!1,e.forEachTileToFetch((s=>{i<=e.options.maximumAutoTileRequests||(o(s),t.upsampleTile(s)&&(l=!0),n(s))}),o),l););}_selectTilesAutoFinest(e){const t=I(e.layer.tileInfo,e.options.minDemResolution);e.selectTilesAtLOD(t,e.options.maximumAutoTileRequests)}async _selectTilesAutoPrefetchUpsample(e,t){const i=e.layer.tileInfo;await this._populateElevationTiles(e,t);let s=!1;e.forEachTileToFetch(((e,t)=>{i.upsampleTile(e)?s=!0:t()})),s&&await this._selectTilesAutoPrefetchUpsample(e,t)}_sampleGeometryWithElevation(e){e.geometry.coordinates.forEach((t=>{const i=t.elevationTile;let s=e.options.noDataValue;if(i){const e=i.sample(t.x,t.y);n(e)?s=e:t.elevationTile=null}t.z=s}))}_extractSampleInfo(e){const t=e.layer.tileInfo,i=r(t.spatialReference);return e.geometry.coordinates.map((s=>{let n=-1;if(s.elevationTile&&s.elevationTile!==e.outsideExtentTile){n=t.lodAt(s.elevationTile.tile.level).resolution*i}return{demResolution:n}}))}}class x{export(){return this._exporter(this.coordinates,this.spatialReference)}clone(e){const t=new x;return t.geometry=this.geometry,t.spatialReference=this.spatialReference,t.coordinates=e||this.coordinates.map((e=>e.clone())),t._exporter=this._exporter,t}async project(e,t){if(this.spatialReference.equals(e))return this.clone();await p([{source:this.spatialReference,dest:e}],{signal:t});const i=new c({spatialReference:this.spatialReference,points:this.coordinates.map((e=>[e.x,e.y]))}),s=m(i,e);if(!s)return null;const n=this.coordinates.map(((e,t)=>{const i=e.clone(),n=s.points[t];return i.x=n[0],i.y=n[1],i})),o=this.clone(n);return o.spatialReference=e,o}static fromGeometry(e){const t=new x;if(t.geometry=e,t.spatialReference=e.spatialReference,e instanceof x)t.coordinates=e.coordinates.map((e=>e.clone())),t._exporter=(t,i)=>{const s=e.clone(t);return s.spatialReference=i,s};else switch(e.type){case\"point\":{const i=e,{hasZ:s,hasM:n}=i;t.coordinates=s&&n?[new _(i.x,i.y,i.z,i.m)]:s?[new _(i.x,i.y,i.z)]:n?[new _(i.x,i.y,null,i.m)]:[new _(i.x,i.y)],t._exporter=(t,i)=>e.hasM?new u(t[0].x,t[0].y,t[0].z,t[0].m,i):new u(t[0].x,t[0].y,t[0].z,i);break}case\"multipoint\":{const i=e,{hasZ:s,hasM:n}=i;t.coordinates=s&&n?i.points.map((e=>new _(e[0],e[1],e[2],e[3]))):s?i.points.map((e=>new _(e[0],e[1],e[2]))):n?i.points.map((e=>new _(e[0],e[1],null,e[2]))):i.points.map((e=>new _(e[0],e[1]))),t._exporter=(t,i)=>e.hasM?new c({points:t.map((e=>[e.x,e.y,e.z,e.m])),hasZ:!0,hasM:!0,spatiaReference:i}):new c(t.map((e=>[e.x,e.y,e.z])),i);break}case\"polyline\":{const i=e,s=[],n=[],{hasZ:o,hasM:l}=e;let a=0;for(const e of i.paths)if(n.push([a,a+e.length]),a+=e.length,o&&l)for(const t of e)s.push(new _(t[0],t[1],t[2],t[3]));else if(o)for(const t of e)s.push(new _(t[0],t[1],t[2]));else if(l)for(const t of e)s.push(new _(t[0],t[1],null,t[2]));else for(const t of e)s.push(new _(t[0],t[1]));t.coordinates=s,t._exporter=(t,i)=>{const s=e.hasM?t.map((e=>[e.x,e.y,e.z,e.m])):t.map((e=>[e.x,e.y,e.z])),o=n.map((e=>s.slice(e[0],e[1])));return new h({paths:o,hasM:e.hasM,hasZ:!0,spatialReference:i})};break}}return t}}class _{constructor(e,t,i=null,s=null,n=null,o=null){this.x=e,this.y=t,this.z=i,this.m=s,this.tile=n,this.elevationTile=o}clone(){return new _(this.x,this.y,this.z,this.m)}}class E{constructor(e,t){this.layer=e,this.options=t}}class R extends E{constructor(e,t,i){super(e,i),this.outSpatialReference=t,this.type=\"geometry\"}selectTilesAtLOD(e){if(e<0)this.geometry.coordinates.forEach((e=>{e.tile=null}));else{const t=this.layer.tileInfo,i=t.lods[e].level;this.geometry.coordinates.forEach((e=>{e.tile=t.tileAt(i,e.x,e.y)}))}}allElevationTilesFetched(){return!this.geometry.coordinates.some((e=>!e.elevationTile))}clearElevationTiles(){for(const e of this.geometry.coordinates)e.elevationTile!==this.outsideExtentTile&&(e.elevationTile=null)}populateElevationTiles(e){for(const t of this.geometry.coordinates)!t.elevationTile&&t.tile?.id&&(t.elevationTile=e[t.tile.id])}remapTiles(e){for(const t of this.geometry.coordinates){const i=t.tile?.id;t.tile=i?e[i]:null}}getTilesToFetch(){const e={},t=[];for(const i of this.geometry.coordinates){const s=i.tile;if(!s)continue;const n=i.tile?.id;i.elevationTile||!n||e[n]||(e[n]=s,t.push(s))}return t}forEachTileToFetch(e){for(const t of this.geometry.coordinates)t.tile&&!t.elevationTile&&e(t.tile,(()=>{t.tile=null}))}}class q extends E{constructor(e,t,i,s){super(e,i),this.type=\"extent\",this.elevationTiles=[],this._candidateTiles=[],this._fetchedCandidates=new Set,this.extent=t.intersection(e.fullExtent),this.maskExtents=s}selectTilesAtLOD(e,t){const i=this._maximumLodForRequests(t),s=Math.min(i,e);s<0?this._candidateTiles.length=0:this._selectCandidateTilesCoveringExtentAt(s)}_maximumLodForRequests(e){const t=this.layer.tileInfo;if(!e)return t.lods.length-1;const i=this.extent;if(s(i))return-1;for(let s=t.lods.length-1;s>=0;s--){const n=t.lods[s],o=n.resolution*t.size[0],l=n.resolution*t.size[1];if(Math.ceil(i.width/o)*Math.ceil(i.height/l)<=e)return s}return-1}allElevationTilesFetched(){return this._candidateTiles.length===this.elevationTiles.length}clearElevationTiles(){this.elevationTiles.length=0,this._fetchedCandidates.clear()}populateElevationTiles(e){for(const t of this._candidateTiles){const i=t.id&&e[t.id];i&&(this._fetchedCandidates.add(t),this.elevationTiles.push(i))}}remapTiles(e){this._candidateTiles=this._uniqueNonOverlappingTiles(this._candidateTiles.map((t=>e[t.id])))}getTilesToFetch(){return this._candidateTiles}forEachTileToFetch(e,t){const i=this._candidateTiles;this._candidateTiles=[],i.forEach((i=>{if(this._fetchedCandidates.has(i))return void(t&&t(i));let s=!1;e(i,(()=>s=!0)),s?t&&t(i):this._candidateTiles.push(i)})),this._candidateTiles=this._uniqueNonOverlappingTiles(this._candidateTiles,t)}_uniqueNonOverlappingTiles(e,t){const i={},s=[];for(const o of e){const e=o.id;e&&!i[e]?(i[e]=o,s.push(o)):t&&t(o)}const n=s.sort(((e,t)=>e.level-t.level));return n.filter(((e,i)=>{for(let s=0;s<i;s++){const i=n[s].extent;if(i&&e.extent&&y(i,e.extent))return t&&t(e),!1}return!0}))}_selectCandidateTilesCoveringExtentAt(e){this._candidateTiles.length=0;const t=this.extent;if(s(t))return;const i=this.layer.tileInfo,n=i.lods[e],o=i.tileAt(n.level,t.xmin,t.ymin),l=o.extent;if(s(l))return;const a=n.resolution*i.size[0],r=n.resolution*i.size[1],c=Math.ceil((t.xmax-l[0])/a),u=Math.ceil((t.ymax-l[1])/r);for(let s=0;s<u;s++)for(let e=0;e<c;e++){const t=new w(null,o.level,o.row-s,o.col+e);i.updateTileInfo(t),this._tileIsMasked(t)||this._candidateTiles.push(t)}}_tileIsMasked(e){return!!this.maskExtents&&this.maskExtents.some((t=>e.extent&&y(t,e.extent)))}}function I(e,t=0){let i=e.lods.length-1;if(t>0){const s=t/r(e.spatialReference),n=e.lods.findIndex((e=>e.resolution<s));0===n?i=0:n>0&&(i=n-1)}return i}const A={maximumAutoTileRequests:20,noDataValue:0,returnSampleInfo:!1,demResolution:\"auto\",minDemResolution:0};export{g as ElevationQuery,x as GeometryDescriptor,I as getFinestLodIndex};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}