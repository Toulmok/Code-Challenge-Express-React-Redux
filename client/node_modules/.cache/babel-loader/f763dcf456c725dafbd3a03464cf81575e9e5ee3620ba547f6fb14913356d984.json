{"ast":null,"code":"export function autoFormatTitle(phoneNumberString) {\n  try {\n    var cleaned = (\"\" + phoneNumberString).replace(/\\D/g, \"\");\n    var match = cleaned.match(/^(1|)?(\\d{0,3})?(\\d{0,3})?(\\d{0,4})?$/);\n    var intlCode = match[1] ? \"+1 \" : \"\";\n    return [intlCode, match[2] ? \"(\" : \"\", match[2], match[3] ? \") \" : \"\", match[3], match[4] ? \"-\" : \"\", match[4]].join(\"\");\n  } catch (err) {\n    return \"\";\n  }\n}\nexport function patternMatch(_ref) {\n  let {\n    input,\n    template\n  } = _ref;\n  try {\n    let j = 0;\n    let plaintext = \"\";\n    let countj = 0;\n    while (j < template.length) {\n      if (countj > input.length - 1) {\n        template = template.substring(0, j);\n        break;\n      }\n      if (template[j] == input[j]) {\n        j++;\n        countj++;\n        continue;\n      }\n      if (template[j] == \"x\") {\n        template = template.substring(0, j) + input[countj] + template.substring(j + 1);\n        plaintext = plaintext + input[countj];\n        countj++;\n      }\n      j++;\n    }\n    return template;\n  } catch {\n    return \"\";\n  }\n}","map":{"version":3,"names":["autoFormatTitle","phoneNumberString","cleaned","replace","match","intlCode","join","err","patternMatch","_ref","input","template","j","plaintext","countj","length","substring"],"sources":["C:/code-challenge-react/frontend/src/components/main/query-form-helpers.js"],"sourcesContent":["export function autoFormatTitle(phoneNumberString) {\r\n    try {\r\n        var cleaned = (\"\" + phoneNumberString).replace(/\\D/g, \"\");\r\n        var match = cleaned.match(/^(1|)?(\\d{0,3})?(\\d{0,3})?(\\d{0,4})?$/);\r\n        var intlCode = match[1] ? \"+1 \" : \"\";\r\n        return [\r\n          intlCode,\r\n          match[2] ? \"(\" : \"\",\r\n          match[2],\r\n          match[3] ? \") \" : \"\",\r\n          match[3],\r\n          match[4] ? \"-\" : \"\",\r\n          match[4],\r\n        ].join(\"\");\r\n      } catch (err) {\r\n        return \"\";\r\n      }\r\n}\r\n\r\nexport function patternMatch({ input, template }) {\r\n  try {\r\n    let j = 0;\r\n    let plaintext = \"\";\r\n    let countj = 0;\r\n    while (j < template.length) {\r\n      if (countj > input.length - 1) {\r\n        template = template.substring(0, j);\r\n        break;\r\n      }\r\n\r\n      if (template[j] == input[j]) {\r\n        j++;\r\n        countj++;\r\n        continue;\r\n      }\r\n\r\n      if (template[j] == \"x\") {\r\n        template =\r\n          template.substring(0, j) + input[countj] + template.substring(j + 1);\r\n        plaintext = plaintext + input[countj];\r\n        countj++;\r\n      }\r\n      j++;\r\n    }\r\n\r\n    return template;\r\n  } catch {\r\n    return \"\";\r\n  }\r\n}"],"mappings":"AAAA,OAAO,SAASA,eAAeA,CAACC,iBAAiB,EAAE;EAC/C,IAAI;IACA,IAAIC,OAAO,GAAG,CAAC,EAAE,GAAGD,iBAAiB,EAAEE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IACzD,IAAIC,KAAK,GAAGF,OAAO,CAACE,KAAK,CAAC,uCAAuC,CAAC;IAClE,IAAIC,QAAQ,GAAGD,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,EAAE;IACpC,OAAO,CACLC,QAAQ,EACRD,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,EACnBA,KAAK,CAAC,CAAC,CAAC,EACRA,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,EAAE,EACpBA,KAAK,CAAC,CAAC,CAAC,EACRA,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,EACnBA,KAAK,CAAC,CAAC,CAAC,CACT,CAACE,IAAI,CAAC,EAAE,CAAC;EACZ,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ,OAAO,EAAE;EACX;AACN;AAEA,OAAO,SAASC,YAAYA,CAAAC,IAAA,EAAsB;EAAA,IAArB;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAAF,IAAA;EAC9C,IAAI;IACF,IAAIG,CAAC,GAAG,CAAC;IACT,IAAIC,SAAS,GAAG,EAAE;IAClB,IAAIC,MAAM,GAAG,CAAC;IACd,OAAOF,CAAC,GAAGD,QAAQ,CAACI,MAAM,EAAE;MAC1B,IAAID,MAAM,GAAGJ,KAAK,CAACK,MAAM,GAAG,CAAC,EAAE;QAC7BJ,QAAQ,GAAGA,QAAQ,CAACK,SAAS,CAAC,CAAC,EAAEJ,CAAC,CAAC;QACnC;MACF;MAEA,IAAID,QAAQ,CAACC,CAAC,CAAC,IAAIF,KAAK,CAACE,CAAC,CAAC,EAAE;QAC3BA,CAAC,EAAE;QACHE,MAAM,EAAE;QACR;MACF;MAEA,IAAIH,QAAQ,CAACC,CAAC,CAAC,IAAI,GAAG,EAAE;QACtBD,QAAQ,GACNA,QAAQ,CAACK,SAAS,CAAC,CAAC,EAAEJ,CAAC,CAAC,GAAGF,KAAK,CAACI,MAAM,CAAC,GAAGH,QAAQ,CAACK,SAAS,CAACJ,CAAC,GAAG,CAAC,CAAC;QACtEC,SAAS,GAAGA,SAAS,GAAGH,KAAK,CAACI,MAAM,CAAC;QACrCA,MAAM,EAAE;MACV;MACAF,CAAC,EAAE;IACL;IAEA,OAAOD,QAAQ;EACjB,CAAC,CAAC,MAAM;IACN,OAAO,EAAE;EACX;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}