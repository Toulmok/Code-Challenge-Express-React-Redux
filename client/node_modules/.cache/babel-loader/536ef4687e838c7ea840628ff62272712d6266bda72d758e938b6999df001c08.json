{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport e from \"./TileInfo.js\";\nconst r = {\n  type: e,\n  json: {\n    origins: {\n      service: {\n        read: {\n          source: [\"tileInfo\", \"minScale\", \"maxScale\", \"minLOD\", \"maxLOD\"],\n          reader: n\n        }\n      }\n    }\n  }\n};\nfunction n(r, n, l, o) {\n  if (!r) return null;\n  const {\n    minScale: i,\n    maxScale: t,\n    minLOD: m,\n    maxLOD: s\n  } = n;\n  if (null != m && null != s) return o && o.ignoreMinMaxLOD ? e.fromJSON(r) : e.fromJSON({\n    ...r,\n    lods: r.lods.filter(_ref => {\n      let {\n        level: e\n      } = _ref;\n      return null != e && e >= m && e <= s;\n    })\n  });\n  if (0 !== i && 0 !== t) {\n    const n = e => Math.round(1e4 * e) / 1e4,\n      l = i ? n(i) : 1 / 0,\n      o = t ? n(t) : -1 / 0;\n    return e.fromJSON({\n      ...r,\n      lods: r.lods.filter(e => {\n        const r = n(e.scale);\n        return r <= l && r >= o;\n      })\n    });\n  }\n  return e.fromJSON(r);\n}\nexport { n as readServiceTileInfo, r as serviceTileInfoProperty };","map":{"version":3,"names":["e","r","type","json","origins","service","read","source","reader","n","l","o","minScale","i","maxScale","t","minLOD","m","maxLOD","s","ignoreMinMaxLOD","fromJSON","lods","filter","_ref","level","Math","round","scale","readServiceTileInfo","serviceTileInfoProperty"],"sources":["C:/code-challenge-react/client/node_modules/@arcgis/core/layers/support/serviceTileInfoProperty.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport e from\"./TileInfo.js\";const r={type:e,json:{origins:{service:{read:{source:[\"tileInfo\",\"minScale\",\"maxScale\",\"minLOD\",\"maxLOD\"],reader:n}}}}};function n(r,n,l,o){if(!r)return null;const{minScale:i,maxScale:t,minLOD:m,maxLOD:s}=n;if(null!=m&&null!=s)return o&&o.ignoreMinMaxLOD?e.fromJSON(r):e.fromJSON({...r,lods:r.lods.filter((({level:e})=>null!=e&&e>=m&&e<=s))});if(0!==i&&0!==t){const n=e=>Math.round(1e4*e)/1e4,l=i?n(i):1/0,o=t?n(t):-1/0;return e.fromJSON({...r,lods:r.lods.filter((e=>{const r=n(e.scale);return r<=l&&r>=o}))})}return e.fromJSON(r)}export{n as readServiceTileInfo,r as serviceTileInfoProperty};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAOA,CAAC,MAAK,eAAe;AAAC,MAAMC,CAAC,GAAC;EAACC,IAAI,EAACF,CAAC;EAACG,IAAI,EAAC;IAACC,OAAO,EAAC;MAACC,OAAO,EAAC;QAACC,IAAI,EAAC;UAACC,MAAM,EAAC,CAAC,UAAU,EAAC,UAAU,EAAC,UAAU,EAAC,QAAQ,EAAC,QAAQ,CAAC;UAACC,MAAM,EAACC;QAAC;MAAC;IAAC;EAAC;AAAC,CAAC;AAAC,SAASA,CAACA,CAACR,CAAC,EAACQ,CAAC,EAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAG,CAACV,CAAC,EAAC,OAAO,IAAI;EAAC,MAAK;IAACW,QAAQ,EAACC,CAAC;IAACC,QAAQ,EAACC,CAAC;IAACC,MAAM,EAACC,CAAC;IAACC,MAAM,EAACC;EAAC,CAAC,GAACV,CAAC;EAAC,IAAG,IAAI,IAAEQ,CAAC,IAAE,IAAI,IAAEE,CAAC,EAAC,OAAOR,CAAC,IAAEA,CAAC,CAACS,eAAe,GAACpB,CAAC,CAACqB,QAAQ,CAACpB,CAAC,CAAC,GAACD,CAAC,CAACqB,QAAQ,CAAC;IAAC,GAAGpB,CAAC;IAACqB,IAAI,EAACrB,CAAC,CAACqB,IAAI,CAACC,MAAM,CAAEC,IAAA;MAAA,IAAC;QAACC,KAAK,EAACzB;MAAC,CAAC,GAAAwB,IAAA;MAAA,OAAG,IAAI,IAAExB,CAAC,IAAEA,CAAC,IAAEiB,CAAC,IAAEjB,CAAC,IAAEmB,CAAC;IAAA;EAAE,CAAC,CAAC;EAAC,IAAG,CAAC,KAAGN,CAAC,IAAE,CAAC,KAAGE,CAAC,EAAC;IAAC,MAAMN,CAAC,GAACT,CAAC,IAAE0B,IAAI,CAACC,KAAK,CAAC,GAAG,GAAC3B,CAAC,CAAC,GAAC,GAAG;MAACU,CAAC,GAACG,CAAC,GAACJ,CAAC,CAACI,CAAC,CAAC,GAAC,CAAC,GAAC,CAAC;MAACF,CAAC,GAACI,CAAC,GAACN,CAAC,CAACM,CAAC,CAAC,GAAC,CAAC,CAAC,GAAC,CAAC;IAAC,OAAOf,CAAC,CAACqB,QAAQ,CAAC;MAAC,GAAGpB,CAAC;MAACqB,IAAI,EAACrB,CAAC,CAACqB,IAAI,CAACC,MAAM,CAAEvB,CAAC,IAAE;QAAC,MAAMC,CAAC,GAACQ,CAAC,CAACT,CAAC,CAAC4B,KAAK,CAAC;QAAC,OAAO3B,CAAC,IAAES,CAAC,IAAET,CAAC,IAAEU,CAAC;MAAA,CAAC;IAAE,CAAC,CAAC;EAAA;EAAC,OAAOX,CAAC,CAACqB,QAAQ,CAACpB,CAAC,CAAC;AAAA;AAAC,SAAOQ,CAAC,IAAIoB,mBAAmB,EAAC5B,CAAC,IAAI6B,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}