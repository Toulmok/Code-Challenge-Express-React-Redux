{"ast":null,"code":"//https://www.newline.co/fullstack-react/30-days-of-react/day-21/\nconst apiMiddleware = store => next => action => {\n  if (!action.meta || action.meta.type !== 'api') {\n    return next(action);\n  }\n  // This is an api request\n\n  // Find the request URL and compose request options from meta\n  const {\n    url\n  } = action.meta;\n  const fetchOptions = Object.assign({}, action.meta);\n\n  // Make the request\n  fetch(url, fetchOptions)\n  // convert the response to json\n  .then(resp => resp.json()).then(json => {\n    if (typeof action.meta.onSuccess === 'function') {\n      action.meta.onSuccess(json);\n    }\n    return json; // For the next promise in the chain\n  }).then(json => {\n    // respond back to the user\n    // by dispatching the original action without\n    // the meta object\n    let newAction = Object.assign({}, action, {\n      payload: json.dateString\n    });\n    delete newAction.meta;\n    store.dispatch(newAction);\n  });\n};","map":{"version":3,"names":["apiMiddleware","store","next","action","meta","type","url","fetchOptions","Object","assign","fetch","then","resp","json","onSuccess","newAction","payload","dateString","dispatch"],"sources":["C:/code-challenge-react/frontend/src/middleware/apiMiddleware.js"],"sourcesContent":["//https://www.newline.co/fullstack-react/30-days-of-react/day-21/\r\nconst apiMiddleware = store => next => action => {\r\n    if (!action.meta || action.meta.type !== 'api') {\r\n      return next(action);\r\n    }\r\n    // This is an api request\r\n  \r\n    // Find the request URL and compose request options from meta\r\n    const {url} = action.meta;\r\n    const fetchOptions = Object.assign({}, action.meta);\r\n  \r\n    // Make the request\r\n    fetch(url, fetchOptions)\r\n      // convert the response to json\r\n      .then(resp => resp.json())\r\n      .then(json => {\r\n        if (typeof action.meta.onSuccess === 'function') {\r\n          action.meta.onSuccess(json);\r\n        }\r\n        return json; // For the next promise in the chain\r\n      })\r\n      .then(json => {\r\n        // respond back to the user\r\n        // by dispatching the original action without\r\n        // the meta object\r\n        let newAction = Object.assign({}, action, {\r\n          payload: json.dateString\r\n        });\r\n        delete newAction.meta;\r\n        store.dispatch(newAction);\r\n      })\r\n  }"],"mappings":"AAAA;AACA,MAAMA,aAAa,GAAGC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;EAC7C,IAAI,CAACA,MAAM,CAACC,IAAI,IAAID,MAAM,CAACC,IAAI,CAACC,IAAI,KAAK,KAAK,EAAE;IAC9C,OAAOH,IAAI,CAACC,MAAM,CAAC;EACrB;EACA;;EAEA;EACA,MAAM;IAACG;EAAG,CAAC,GAAGH,MAAM,CAACC,IAAI;EACzB,MAAMG,YAAY,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEN,MAAM,CAACC,IAAI,CAAC;;EAEnD;EACAM,KAAK,CAACJ,GAAG,EAAEC,YAAY;EACrB;EAAA,CACCI,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,EAAE,CAAC,CACzBF,IAAI,CAACE,IAAI,IAAI;IACZ,IAAI,OAAOV,MAAM,CAACC,IAAI,CAACU,SAAS,KAAK,UAAU,EAAE;MAC/CX,MAAM,CAACC,IAAI,CAACU,SAAS,CAACD,IAAI,CAAC;IAC7B;IACA,OAAOA,IAAI,CAAC,CAAC;EACf,CAAC,CAAC,CACDF,IAAI,CAACE,IAAI,IAAI;IACZ;IACA;IACA;IACA,IAAIE,SAAS,GAAGP,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEN,MAAM,EAAE;MACxCa,OAAO,EAAEH,IAAI,CAACI;IAChB,CAAC,CAAC;IACF,OAAOF,SAAS,CAACX,IAAI;IACrBH,KAAK,CAACiB,QAAQ,CAACH,SAAS,CAAC;EAC3B,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}