{"ast":null,"code":"import { request, cleanUrl, ArcGISRequestError } from \"./index.js\";\n/**\n * Revokes a token generated via any oAuth 2.0 method. `token` can be either a refresh token OR an access token. If you are using  {@linkcode ArcGISIdentityManager} you should use  {@linkcode ArcGISIdentityManager.destroy} instead. Cannot revoke API keys or tokens generated by {@linkcode ApplicationCredentialsManager}.\n *\n * See [`revokeToken`](https://developers.arcgis.com/rest/users-groups-and-items/revoke-token.htm) on the ArcGIS REST API for more details.\n */\nexport function revokeToken(requestOptions) {\n  var url = \"\".concat(cleanUrl(requestOptions.portal || \"https://www.arcgis.com/sharing/rest\"), \"/oauth2/revokeToken/\");\n  var token = requestOptions.token;\n  var clientId = requestOptions.clientId;\n  delete requestOptions.portal;\n  delete requestOptions.clientId;\n  delete requestOptions.token;\n  var options = Object.assign(Object.assign({}, requestOptions), {\n    httpMethod: \"POST\",\n    params: {\n      client_id: clientId,\n      auth_token: token\n    }\n  });\n  return request(url, options).then(function (response) {\n    if (!response.success) {\n      throw new ArcGISRequestError(\"Unable to revoke token\", 500, response, url, options);\n    }\n    return response;\n  });\n}","map":{"version":3,"names":["request","cleanUrl","ArcGISRequestError","revokeToken","requestOptions","url","concat","portal","token","clientId","options","Object","assign","httpMethod","params","client_id","auth_token","then","response","success"],"sources":["C:\\code-challenge-react\\node_modules\\@esri\\arcgis-rest-request\\src\\revoke-token.ts"],"sourcesContent":["import {\n  IRequestOptions,\n  request,\n  cleanUrl,\n  ArcGISRequestError,\n  appendCustomParams\n} from \"./index.js\";\n\nexport interface IRevokeTokenOptions extends IRequestOptions {\n  /**\n   * The token or refresh token to revoke. If a refresh token is passed all access tokens generated with that refresh token are also revoked.\n   */\n  token: string;\n\n  /**\n   * The portal of the tokens to revoke. Defaults to `https://www.arcgis.com/sharing/rest`.\n   */\n  portal?: string;\n\n  /**\n   * The client id fo the application that generated the tokens. Applications can only revoke tokens they created.\n   */\n  clientId: string;\n}\n\nexport interface IRevokeTokenResponse {\n  /**\n   * Indicates if the token was revoked. A success response will also returned for invalid tokens, expired tokens or of an unsupported type of token to prevent leaking information about the provided token.\n   */\n  success: boolean;\n}\n\n/**\n * Revokes a token generated via any oAuth 2.0 method. `token` can be either a refresh token OR an access token. If you are using  {@linkcode ArcGISIdentityManager} you should use  {@linkcode ArcGISIdentityManager.destroy} instead. Cannot revoke API keys or tokens generated by {@linkcode ApplicationCredentialsManager}.\n *\n * See [`revokeToken`](https://developers.arcgis.com/rest/users-groups-and-items/revoke-token.htm) on the ArcGIS REST API for more details.\n */\nexport function revokeToken(\n  requestOptions: IRevokeTokenOptions\n): Promise<IRevokeTokenResponse> {\n  const url = `${cleanUrl(\n    requestOptions.portal || \"https://www.arcgis.com/sharing/rest\"\n  )}/oauth2/revokeToken/`;\n\n  const token = requestOptions.token;\n  const clientId = requestOptions.clientId;\n\n  delete requestOptions.portal;\n  delete requestOptions.clientId;\n  delete requestOptions.token;\n\n  const options: IRequestOptions = {\n    ...requestOptions,\n    httpMethod: \"POST\",\n    params: {\n      client_id: clientId,\n      auth_token: token\n    }\n  };\n\n  return request(url, options).then((response) => {\n    if (!response.success) {\n      throw new ArcGISRequestError(\n        \"Unable to revoke token\",\n        500,\n        response,\n        url,\n        options\n      );\n    }\n    return response;\n  });\n}\n"],"mappings":"AAAA,SAEEA,OAAO,EACPC,QAAQ,EACRC,kBAAkB,QAEb,YAAY;AA0BnB;;;;;AAKA,OAAM,SAAUC,WAAWA,CACzBC,cAAmC;EAEnC,IAAMC,GAAG,MAAAC,MAAA,CAAML,QAAQ,CACrBG,cAAc,CAACG,MAAM,IAAI,qCAAqC,CAC/D,yBAAsB;EAEvB,IAAMC,KAAK,GAAGJ,cAAc,CAACI,KAAK;EAClC,IAAMC,QAAQ,GAAGL,cAAc,CAACK,QAAQ;EAExC,OAAOL,cAAc,CAACG,MAAM;EAC5B,OAAOH,cAAc,CAACK,QAAQ;EAC9B,OAAOL,cAAc,CAACI,KAAK;EAE3B,IAAME,OAAO,GAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACRR,cAAc;IACjBS,UAAU,EAAE,MAAM;IAClBC,MAAM,EAAE;MACNC,SAAS,EAAEN,QAAQ;MACnBO,UAAU,EAAER;;EACb,EACF;EAED,OAAOR,OAAO,CAACK,GAAG,EAAEK,OAAO,CAAC,CAACO,IAAI,CAAC,UAACC,QAAQ,EAAI;IAC7C,IAAI,CAACA,QAAQ,CAACC,OAAO,EAAE;MACrB,MAAM,IAAIjB,kBAAkB,CAC1B,wBAAwB,EACxB,GAAG,EACHgB,QAAQ,EACRb,GAAG,EACHK,OAAO,CACR;;IAEH,OAAOQ,QAAQ;EACjB,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}