{"ast":null,"code":"/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n/**\n * Checks parameters to see if we should use FormData to send the request\n * @param params The object whose keys will be encoded.\n * @return A boolean indicating if FormData will be required.\n */\nexport function requiresFormData(params) {\n  return Object.keys(params).some(function (key) {\n    var value = params[key];\n    if (!value) {\n      return false;\n    }\n    if (value && value.toParam) {\n      value = value.toParam();\n    }\n    var type = value.constructor.name;\n    switch (type) {\n      case \"Array\":\n        return false;\n      case \"Object\":\n        return false;\n      case \"Date\":\n        return false;\n      case \"Function\":\n        return false;\n      case \"Boolean\":\n        return false;\n      case \"String\":\n        return false;\n      case \"Number\":\n        return false;\n      default:\n        return true;\n    }\n  });\n}\n/**\n * Converts parameters to the proper representation to send to the ArcGIS REST API.\n * @param params The object whose keys will be encoded.\n * @return A new object with properly encoded values.\n */\nexport function processParams(params) {\n  var newParams = {};\n  Object.keys(params).forEach(function (key) {\n    var _a, _b;\n    var param = params[key];\n    if (param && param.toParam) {\n      param = param.toParam();\n    }\n    if (!param && param !== 0 && typeof param !== \"boolean\" && typeof param !== \"string\") {\n      return;\n    }\n    var type = param.constructor.name;\n    var value;\n    // properly encodes objects, arrays and dates for arcgis.com and other services.\n    // ported from https://github.com/Esri/esri-leaflet/blob/master/src/Request.js#L22-L30\n    // also see https://github.com/Esri/arcgis-rest-js/issues/18:\n    // null, undefined, function are excluded. If you want to send an empty key you need to send an empty string \"\".\n    switch (type) {\n      case \"Array\":\n        // Based on the first element of the array, classify array as an array of arrays, an array of objects\n        // to be stringified, or an array of non-objects to be comma-separated\n        // eslint-disable-next-line no-case-declarations\n        var firstElementType = (_b = (_a = param[0]) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name;\n        value = firstElementType === \"Array\" ? param // pass thru array of arrays\n        : firstElementType === \"Object\" ? JSON.stringify(param) // stringify array of objects\n        : param.join(\",\"); // join other types of array elements\n        break;\n      case \"Object\":\n        value = JSON.stringify(param);\n        break;\n      case \"Date\":\n        value = param.valueOf();\n        break;\n      case \"Function\":\n        value = null;\n        break;\n      case \"Boolean\":\n        value = param + \"\";\n        break;\n      default:\n        value = param;\n        break;\n    }\n    if (value || value === 0 || typeof value === \"string\" || Array.isArray(value)) {\n      newParams[key] = value;\n    }\n  });\n  return newParams;\n}","map":{"version":3,"names":["requiresFormData","params","Object","keys","some","key","value","toParam","type","constructor","name","processParams","newParams","forEach","param","firstElementType","_b","_a","JSON","stringify","join","valueOf","Array","isArray"],"sources":["C:\\code-challenge-react\\node_modules\\@esri\\arcgis-rest-request\\src\\utils\\process-params.ts"],"sourcesContent":["/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * Checks parameters to see if we should use FormData to send the request\n * @param params The object whose keys will be encoded.\n * @return A boolean indicating if FormData will be required.\n */\nexport function requiresFormData(params: any) {\n  return Object.keys(params).some((key) => {\n    let value = params[key];\n\n    if (!value) {\n      return false;\n    }\n\n    if (value && value.toParam) {\n      value = value.toParam();\n    }\n\n    const type = value.constructor.name;\n\n    switch (type) {\n      case \"Array\":\n        return false;\n      case \"Object\":\n        return false;\n      case \"Date\":\n        return false;\n      case \"Function\":\n        return false;\n      case \"Boolean\":\n        return false;\n      case \"String\":\n        return false;\n      case \"Number\":\n        return false;\n      default:\n        return true;\n    }\n  });\n}\n\n/**\n * Converts parameters to the proper representation to send to the ArcGIS REST API.\n * @param params The object whose keys will be encoded.\n * @return A new object with properly encoded values.\n */\nexport function processParams(params: any): any {\n  const newParams: any = {};\n\n  Object.keys(params).forEach((key) => {\n    let param = params[key];\n\n    if (param && param.toParam) {\n      param = param.toParam();\n    }\n\n    if (\n      !param &&\n      param !== 0 &&\n      typeof param !== \"boolean\" &&\n      typeof param !== \"string\"\n    ) {\n      return;\n    }\n\n    const type = param.constructor.name;\n\n    let value: any;\n\n    // properly encodes objects, arrays and dates for arcgis.com and other services.\n    // ported from https://github.com/Esri/esri-leaflet/blob/master/src/Request.js#L22-L30\n    // also see https://github.com/Esri/arcgis-rest-js/issues/18:\n    // null, undefined, function are excluded. If you want to send an empty key you need to send an empty string \"\".\n    switch (type) {\n      case \"Array\":\n        // Based on the first element of the array, classify array as an array of arrays, an array of objects\n        // to be stringified, or an array of non-objects to be comma-separated\n        // eslint-disable-next-line no-case-declarations\n        const firstElementType = param[0]?.constructor?.name;\n        value =\n          firstElementType === \"Array\"\n            ? param // pass thru array of arrays\n            : firstElementType === \"Object\"\n            ? JSON.stringify(param) // stringify array of objects\n            : param.join(\",\"); // join other types of array elements\n        break;\n      case \"Object\":\n        value = JSON.stringify(param);\n        break;\n      case \"Date\":\n        value = param.valueOf();\n        break;\n      case \"Function\":\n        value = null;\n        break;\n      case \"Boolean\":\n        value = param + \"\";\n        break;\n      default:\n        value = param;\n        break;\n    }\n    if (\n      value ||\n      value === 0 ||\n      typeof value === \"string\" ||\n      Array.isArray(value)\n    ) {\n      newParams[key] = value;\n    }\n  });\n\n  return newParams;\n}\n"],"mappings":"AAAA;;AAGA;;;;;AAKA,OAAM,SAAUA,gBAAgBA,CAACC,MAAW;EAC1C,OAAOC,MAAM,CAACC,IAAI,CAACF,MAAM,CAAC,CAACG,IAAI,CAAC,UAACC,GAAG,EAAI;IACtC,IAAIC,KAAK,GAAGL,MAAM,CAACI,GAAG,CAAC;IAEvB,IAAI,CAACC,KAAK,EAAE;MACV,OAAO,KAAK;;IAGd,IAAIA,KAAK,IAAIA,KAAK,CAACC,OAAO,EAAE;MAC1BD,KAAK,GAAGA,KAAK,CAACC,OAAO,EAAE;;IAGzB,IAAMC,IAAI,GAAGF,KAAK,CAACG,WAAW,CAACC,IAAI;IAEnC,QAAQF,IAAI;MACV,KAAK,OAAO;QACV,OAAO,KAAK;MACd,KAAK,QAAQ;QACX,OAAO,KAAK;MACd,KAAK,MAAM;QACT,OAAO,KAAK;MACd,KAAK,UAAU;QACb,OAAO,KAAK;MACd,KAAK,SAAS;QACZ,OAAO,KAAK;MACd,KAAK,QAAQ;QACX,OAAO,KAAK;MACd,KAAK,QAAQ;QACX,OAAO,KAAK;MACd;QACE,OAAO,IAAI;IAAC;EAElB,CAAC,CAAC;AACJ;AAEA;;;;;AAKA,OAAM,SAAUG,aAAaA,CAACV,MAAW;EACvC,IAAMW,SAAS,GAAQ,EAAE;EAEzBV,MAAM,CAACC,IAAI,CAACF,MAAM,CAAC,CAACY,OAAO,CAAC,UAACR,GAAG,EAAI;;IAClC,IAAIS,KAAK,GAAGb,MAAM,CAACI,GAAG,CAAC;IAEvB,IAAIS,KAAK,IAAIA,KAAK,CAACP,OAAO,EAAE;MAC1BO,KAAK,GAAGA,KAAK,CAACP,OAAO,EAAE;;IAGzB,IACE,CAACO,KAAK,IACNA,KAAK,KAAK,CAAC,IACX,OAAOA,KAAK,KAAK,SAAS,IAC1B,OAAOA,KAAK,KAAK,QAAQ,EACzB;MACA;;IAGF,IAAMN,IAAI,GAAGM,KAAK,CAACL,WAAW,CAACC,IAAI;IAEnC,IAAIJ,KAAU;IAEd;IACA;IACA;IACA;IACA,QAAQE,IAAI;MACV,KAAK,OAAO;QACV;QACA;QACA;QACA,IAAMO,gBAAgB,GAAG,CAAAC,EAAA,IAAAC,EAAA,GAAAH,KAAK,CAAC,CAAC,CAAC,cAAAG,EAAA,uBAAAA,EAAA,CAAER,WAAW,cAAAO,EAAA,uBAAAA,EAAA,CAAEN,IAAI;QACpDJ,KAAK,GACHS,gBAAgB,KAAK,OAAO,GACxBD,KAAK,CAAC;QAAA,EACNC,gBAAgB,KAAK,QAAQ,GAC7BG,IAAI,CAACC,SAAS,CAACL,KAAK,CAAC,CAAC;QAAA,EACtBA,KAAK,CAACM,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QACvB;MACF,KAAK,QAAQ;QACXd,KAAK,GAAGY,IAAI,CAACC,SAAS,CAACL,KAAK,CAAC;QAC7B;MACF,KAAK,MAAM;QACTR,KAAK,GAAGQ,KAAK,CAACO,OAAO,EAAE;QACvB;MACF,KAAK,UAAU;QACbf,KAAK,GAAG,IAAI;QACZ;MACF,KAAK,SAAS;QACZA,KAAK,GAAGQ,KAAK,GAAG,EAAE;QAClB;MACF;QACER,KAAK,GAAGQ,KAAK;QACb;IAAM;IAEV,IACER,KAAK,IACLA,KAAK,KAAK,CAAC,IACX,OAAOA,KAAK,KAAK,QAAQ,IACzBgB,KAAK,CAACC,OAAO,CAACjB,KAAK,CAAC,EACpB;MACAM,SAAS,CAACP,GAAG,CAAC,GAAGC,KAAK;;EAE1B,CAAC,CAAC;EAEF,OAAOM,SAAS;AAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}