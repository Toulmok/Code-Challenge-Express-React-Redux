{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport { f as e } from \"./vec2f64.js\";\nimport { NoiseTextureRenderMode as o } from \"../views/3d/environment/NoiseTextureAtlasConfiguration.js\";\nimport { TILE_ROWS as t, WEATHER_TILE_SIZE as r, WEATHER_MAP_SIZE as a, TILE_SIZE as l, ATLAS_SIZE as i } from \"../views/3d/environment/NoiseTextureAtlasDimensions.js\";\nimport { ScreenSpacePass as d } from \"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl.js\";\nimport { Float2PassUniform as f } from \"../views/3d/webgl-engine/core/shaderModules/Float2PassUniform.js\";\nimport { NoParameters as n, glsl as p } from \"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";\nimport { ShaderBuilder as c } from \"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";\nclass s extends n {\n  constructor() {\n    super(...arguments), this.weatherTile = e(0, 0);\n  }\n}\nfunction u(e) {\n  const n = new c();\n  if (n.include(d, !1), n.fragment.code.add(p`float remap(float x, float low1, float high1, float low2, float high2) {\nreturn low2 + (x - low1) * (high2 - low2) / (high1 - low1);\n}`), e.mode === o.Full) {\n    const e = 2,\n      o = 8;\n    n.fragment.code.add(p`\n    float saturate(float x) {\n      return clamp(x, 0.0, 1.0);\n    }\n\n    // Safer modulo for positive and negative values\n    vec3 modulo(vec3 m, float n){\n      return mod(mod(m, n) + n, n);\n    }\n\n    vec3 hash(vec3 p3, float frequency){\n      p3 = modulo(p3, frequency);\n      p3 = fract(p3 * vec3(0.1031, 0.1030, 0.0973));\n      p3 += dot(p3, p3.yxz + 33.33);\n      return -1.0 + 2.0 * fract((p3.xxy + p3.yxx) * p3.zyx);\n    }\n\n    // 5th order polynomial interpolation\n    vec3 fade(vec3 t){\n      return (t * t * t) * (t * (t * 6.0 - 15.0) + 10.0);\n    }\n\n    float gradientNoise(vec3 p, float frequency){\n      // Cell point is in\n      vec3 i = floor(p);\n\n      // Position in the cell in [0, 1]\n      vec3 f = fract(p);\n\n      // Interpolation value for gradient mixing\n      vec3 u = fade(f);\n\n      // Trilinear interpolation of gradients at cube vertices around point\n      return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0), frequency), f - vec3(0.0,0.0,0.0) ),\n                            dot( hash( i + vec3(1.0,0.0,0.0), frequency), f - vec3(1.0,0.0,0.0) ), u.x),\n                       mix( dot( hash( i + vec3(0.0,1.0,0.0), frequency), f - vec3(0.0,1.0,0.0) ),\n                            dot( hash( i + vec3(1.0,1.0,0.0), frequency), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\n                  mix( mix( dot( hash( i + vec3(0.0,0.0,1.0), frequency), f - vec3(0.0,0.0,1.0) ),\n                            dot( hash( i + vec3(1.0,0.0,1.0), frequency), f - vec3(1.0,0.0,1.0) ), u.x),\n                       mix( dot( hash( i + vec3(0.0,1.0,1.0), frequency), f - vec3(0.0,1.0,1.0) ),\n                            dot( hash( i + vec3(1.0,1.0,1.0), frequency), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\n    }\n\n    float getPerlinNoise(vec3 pos, float frequency) {\n      float octaveFrequencyFactor = 2.0;\n      float sum = 0.0;\n      float weightSum = 0.0;\n      float weight = 1.0;\n\n      for (int oct = 0; oct < 3; oct++) {\n        vec3 p = pos * frequency;\n        float val = 0.5 + 0.5 * gradientNoise(p, frequency);\n        sum += val * weight;\n        weightSum += weight;\n        weight *= 0.5;\n        frequency *= octaveFrequencyFactor;\n      }\n\n      float noise = (sum / weightSum);\n      noise = saturate(noise);\n      return noise;\n    }\n\n    float worley(vec3 pos, float numCells) {\n      vec3 p = pos * numCells;\n      float d = 1.0e10;\n\n      for (int x = -1; x <= 1; x++) {\n        for (int y = -1; y <= 1; y++) {\n          for (int z = -1; z <= 1; z++) {\n            vec3 tp = floor(p) + vec3(x, y, z);\n            tp = p - tp - (hash(tp, numCells) * 0.5 + 0.5);\n            d = min(d, dot(tp, tp));\n          }\n        }\n      }\n\n      return 1.0 - clamp(d, 0.0, 1.0);\n    }\n\n    vec3 get3Dfrom2D(vec2 uv) {\n      vec2 tile = floor(uv);\n      float z = floor(${p.float(t)} * tile.y + tile.x);\n      return vec3(fract(uv), z);\n    }\n\n    float getTextureForPointPerlinWorley(vec3 p) {\n      float perlinNoise = getPerlinNoise(p, ${p.float(o)});\n\n      float worley0 = worley(p, ${p.float(e)} * 2.0);\n      float worley1 = worley(p, ${p.float(e)} * 8.0);\n      float worley2 = worley(p, ${p.float(e)} * 14.0);\n\n      float worleyFBM = worley0 * 0.625 + worley1 * 0.25 + worley2 * 0.125;\n      return remap(perlinNoise, 0.0, 1.0, worleyFBM, 1.0);\n    }\n\n    float getTextureForPointWorley(vec3 p) {\n      float worley0 = worley(p, ${p.float(e)});\n      float worley1 = worley(p, ${p.float(e)} * 2.0);\n      float worley2 = worley(p, ${p.float(e)} * 4.0);\n      float worley3 = worley(p, ${p.float(e)} * 8.0);\n\n      float FBM0 = worley0 * 0.625 + worley1 * 0.25 + worley2 * 0.125;\n      float FBM1 = worley1 * 0.625 + worley2 * 0.25 + worley3 * 0.125;\n      float FBM2 = worley2 * 0.75 + worley3 * 0.25;\n\n      return FBM0 * 0.625 + FBM1 * 0.25 + FBM2 * 0.125;\n    }\n  `);\n  }\n  return n.fragment.uniforms.add(new f(\"weatherTile\", e => e.weatherTile)), n.fragment.code.add(p`\n    vec2 modulo(vec2 m, float n){\n      return mod(mod(m, n) + n, n);\n    }\n\n    vec2 hash(vec2 p){\n      // Get position of p in weather tile\n      p = modulo(p, ${p.float(r)});\n\n      // Get global coordinates of p\n      p += weatherTile * ${p.float(r)};\n\n      // Limit position to avoid numerical instability\n      p = modulo(p, ${p.float(a)});\n\n      vec3 p3 = fract(vec3(p.xyx) * vec3(0.1031, 0.1030, 0.0973));\n      p3 += dot(p3, p3.yzx + 33.33);\n      return 2.0 * fract((p3.xx + p3.yz) * p3.zy) - 1.0;\n    }\n\n    vec2 fade(vec2 t){\n      return (t * t * t) * (t * (t * 6.0 - 15.0) + 10.0);\n    }\n\n    float gradientNoise(vec2 p){\n      vec2 i = floor( p );\n      vec2 f = fract( p );\n\n      vec2 u = fade(f);\n\n      // Bilinear interpolation of gradients at cell vertices around point\n      return  mix(\n                mix(dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                    dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix(dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                    dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x),\n                u.y);\n    }\n\n    float worley(vec2 p){\n      float d = 1.0e10;\n      for (int x = -1; x <= 1; x++){\n        for (int y = -1; y <= 1; y++){\n                vec2 tp = floor(p) + vec2(x, y);\n                tp = p - tp - (0.5 + 0.5 * hash(tp));\n                d = min(d, dot(tp, tp));\n            }\n        }\n      return 1.0 - clamp(d, 0.0, 1.0);\n    }\n  `), n.fragment.code.add(p`void main() {`), e.mode === o.Full && n.fragment.code.add(p`\n        float padWidth = 1.0;\n        float paddedSize = ${p.float(l)} + 2.0 * padWidth;\n        float tileCount = ${p.float(t)} * ${p.float(t)};\n        vec2 tile = floor((gl_FragCoord.xy - 0.5) / paddedSize);\n\n        bool padCell = false;\n        if (mod(gl_FragCoord.x, paddedSize) == 0.5 || mod(gl_FragCoord.x, paddedSize) == paddedSize - 0.5) {\n          padCell = true;\n        }\n\n        if (mod(gl_FragCoord.y, paddedSize) == 0.5 || mod(gl_FragCoord.y, paddedSize) == paddedSize - 0.5) {\n          padCell = true;\n        }\n\n        bool startPadX = false;\n        bool startPadY = false;\n        bool endPadX = false;\n        bool endPadY = false;\n\n        if (gl_FragCoord.x == tile.x * paddedSize + 0.5) {\n          startPadX = true;\n        }\n\n        if (gl_FragCoord.y == tile.y * paddedSize + 0.5) {\n          startPadY = true;\n        }\n\n        if (gl_FragCoord.x == (tile.x + 1.0) * paddedSize - 0.5) {\n          endPadX = true;\n        }\n\n        if (gl_FragCoord.y == (tile.y + 1.0) * paddedSize - 0.5) {\n          endPadY = true;\n        }\n\n        vec2 padding = vec2(2.0 * padWidth) * tile;\n        vec2 uv;\n\n        if (padCell) {\n          vec2 pixel = gl_FragCoord.xy - padWidth - padding;\n\n          if (startPadX) {\n            pixel.x += ${p.float(l)};\n          }\n\n          if (startPadY) {\n            pixel.y += ${p.float(l)};\n          }\n\n          if (endPadX) {\n            pixel.x -= ${p.float(l)};\n          }\n\n          if (endPadY) {\n            pixel.y -= ${p.float(l)};\n          }\n\n          uv = vec2(pixel.xy / ${p.float(l)});\n        } else {\n          vec2 pixel = gl_FragCoord.xy - padWidth - padding;\n          uv = vec2(pixel.xy / ${p.float(l)});\n        }\n\n        vec3 p_ = get3Dfrom2D(uv);\n        vec3 p = p_;\n        p.z /= (${p.float(t)} * ${p.float(t)});\n\n        float worleyPerlinNoise = getTextureForPointPerlinWorley(p);\n        float worleyNoise = getTextureForPointWorley(p);\n\n        gl_FragColor.r = saturate(remap(worleyPerlinNoise, worleyNoise, 1.0, 0.0, 1.0));\n\n        p_ = mod(p_ + 1.0, ${p.float(t)} * ${p.float(t)});\n        p = p_;\n        p.z /= (${p.float(t)} * ${p.float(t)});\n\n        worleyPerlinNoise = getTextureForPointPerlinWorley(p);\n        worleyNoise = getTextureForPointWorley(p);\n\n        gl_FragColor.g = saturate(remap(worleyPerlinNoise, worleyNoise, 1.0, 0.0, 1.0));\n      `), n.fragment.code.add(p`\n      vec2 mapUV = ${p.float(r)} * (gl_FragCoord.xy / ${p.float(i)});\n      float map = abs(gradientNoise(mapUV));\n      map = remap(map, 0.25 * (1.0 - worley(8.0 * mapUV)), 1.0, 0.0, 1.0);\n\n      ${e.mode === o.Full ? p`gl_FragColor.ba = vec2(0.0, map);` : p`gl_FragColor = vec4(map);`};\n    }\n  `), n;\n}\nconst v = Object.freeze(Object.defineProperty({\n  __proto__: null,\n  NoiseTextureAtlasPassParameters: s,\n  build: u\n}, Symbol.toStringTag, {\n  value: \"Module\"\n}));\nexport { s as N, v as a, u as b };","map":{"version":3,"names":["f","e","NoiseTextureRenderMode","o","TILE_ROWS","t","WEATHER_TILE_SIZE","r","WEATHER_MAP_SIZE","a","TILE_SIZE","l","ATLAS_SIZE","i","ScreenSpacePass","d","Float2PassUniform","NoParameters","n","glsl","p","ShaderBuilder","c","s","constructor","arguments","weatherTile","u","include","fragment","code","add","mode","Full","float","uniforms","v","Object","freeze","defineProperty","__proto__","NoiseTextureAtlasPassParameters","build","Symbol","toStringTag","value","N","b"],"sources":["C:/code-challenge-react/frontend/node_modules/@arcgis/core/chunks/NoiseTextureAtlas.glsl.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport{f as e}from\"./vec2f64.js\";import{NoiseTextureRenderMode as o}from\"../views/3d/environment/NoiseTextureAtlasConfiguration.js\";import{TILE_ROWS as t,WEATHER_TILE_SIZE as r,WEATHER_MAP_SIZE as a,TILE_SIZE as l,ATLAS_SIZE as i}from\"../views/3d/environment/NoiseTextureAtlasDimensions.js\";import{ScreenSpacePass as d}from\"../views/3d/webgl-engine/core/shaderLibrary/ScreenSpacePass.glsl.js\";import{Float2PassUniform as f}from\"../views/3d/webgl-engine/core/shaderModules/Float2PassUniform.js\";import{NoParameters as n,glsl as p}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as c}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";class s extends n{constructor(){super(...arguments),this.weatherTile=e(0,0)}}function u(e){const n=new c;if(n.include(d,!1),n.fragment.code.add(p`float remap(float x, float low1, float high1, float low2, float high2) {\nreturn low2 + (x - low1) * (high2 - low2) / (high1 - low1);\n}`),e.mode===o.Full){const e=2,o=8;n.fragment.code.add(p`\n    float saturate(float x) {\n      return clamp(x, 0.0, 1.0);\n    }\n\n    // Safer modulo for positive and negative values\n    vec3 modulo(vec3 m, float n){\n      return mod(mod(m, n) + n, n);\n    }\n\n    vec3 hash(vec3 p3, float frequency){\n      p3 = modulo(p3, frequency);\n      p3 = fract(p3 * vec3(0.1031, 0.1030, 0.0973));\n      p3 += dot(p3, p3.yxz + 33.33);\n      return -1.0 + 2.0 * fract((p3.xxy + p3.yxx) * p3.zyx);\n    }\n\n    // 5th order polynomial interpolation\n    vec3 fade(vec3 t){\n      return (t * t * t) * (t * (t * 6.0 - 15.0) + 10.0);\n    }\n\n    float gradientNoise(vec3 p, float frequency){\n      // Cell point is in\n      vec3 i = floor(p);\n\n      // Position in the cell in [0, 1]\n      vec3 f = fract(p);\n\n      // Interpolation value for gradient mixing\n      vec3 u = fade(f);\n\n      // Trilinear interpolation of gradients at cube vertices around point\n      return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0), frequency), f - vec3(0.0,0.0,0.0) ),\n                            dot( hash( i + vec3(1.0,0.0,0.0), frequency), f - vec3(1.0,0.0,0.0) ), u.x),\n                       mix( dot( hash( i + vec3(0.0,1.0,0.0), frequency), f - vec3(0.0,1.0,0.0) ),\n                            dot( hash( i + vec3(1.0,1.0,0.0), frequency), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\n                  mix( mix( dot( hash( i + vec3(0.0,0.0,1.0), frequency), f - vec3(0.0,0.0,1.0) ),\n                            dot( hash( i + vec3(1.0,0.0,1.0), frequency), f - vec3(1.0,0.0,1.0) ), u.x),\n                       mix( dot( hash( i + vec3(0.0,1.0,1.0), frequency), f - vec3(0.0,1.0,1.0) ),\n                            dot( hash( i + vec3(1.0,1.0,1.0), frequency), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\n    }\n\n    float getPerlinNoise(vec3 pos, float frequency) {\n      float octaveFrequencyFactor = 2.0;\n      float sum = 0.0;\n      float weightSum = 0.0;\n      float weight = 1.0;\n\n      for (int oct = 0; oct < 3; oct++) {\n        vec3 p = pos * frequency;\n        float val = 0.5 + 0.5 * gradientNoise(p, frequency);\n        sum += val * weight;\n        weightSum += weight;\n        weight *= 0.5;\n        frequency *= octaveFrequencyFactor;\n      }\n\n      float noise = (sum / weightSum);\n      noise = saturate(noise);\n      return noise;\n    }\n\n    float worley(vec3 pos, float numCells) {\n      vec3 p = pos * numCells;\n      float d = 1.0e10;\n\n      for (int x = -1; x <= 1; x++) {\n        for (int y = -1; y <= 1; y++) {\n          for (int z = -1; z <= 1; z++) {\n            vec3 tp = floor(p) + vec3(x, y, z);\n            tp = p - tp - (hash(tp, numCells) * 0.5 + 0.5);\n            d = min(d, dot(tp, tp));\n          }\n        }\n      }\n\n      return 1.0 - clamp(d, 0.0, 1.0);\n    }\n\n    vec3 get3Dfrom2D(vec2 uv) {\n      vec2 tile = floor(uv);\n      float z = floor(${p.float(t)} * tile.y + tile.x);\n      return vec3(fract(uv), z);\n    }\n\n    float getTextureForPointPerlinWorley(vec3 p) {\n      float perlinNoise = getPerlinNoise(p, ${p.float(o)});\n\n      float worley0 = worley(p, ${p.float(e)} * 2.0);\n      float worley1 = worley(p, ${p.float(e)} * 8.0);\n      float worley2 = worley(p, ${p.float(e)} * 14.0);\n\n      float worleyFBM = worley0 * 0.625 + worley1 * 0.25 + worley2 * 0.125;\n      return remap(perlinNoise, 0.0, 1.0, worleyFBM, 1.0);\n    }\n\n    float getTextureForPointWorley(vec3 p) {\n      float worley0 = worley(p, ${p.float(e)});\n      float worley1 = worley(p, ${p.float(e)} * 2.0);\n      float worley2 = worley(p, ${p.float(e)} * 4.0);\n      float worley3 = worley(p, ${p.float(e)} * 8.0);\n\n      float FBM0 = worley0 * 0.625 + worley1 * 0.25 + worley2 * 0.125;\n      float FBM1 = worley1 * 0.625 + worley2 * 0.25 + worley3 * 0.125;\n      float FBM2 = worley2 * 0.75 + worley3 * 0.25;\n\n      return FBM0 * 0.625 + FBM1 * 0.25 + FBM2 * 0.125;\n    }\n  `)}return n.fragment.uniforms.add(new f(\"weatherTile\",(e=>e.weatherTile))),n.fragment.code.add(p`\n    vec2 modulo(vec2 m, float n){\n      return mod(mod(m, n) + n, n);\n    }\n\n    vec2 hash(vec2 p){\n      // Get position of p in weather tile\n      p = modulo(p, ${p.float(r)});\n\n      // Get global coordinates of p\n      p += weatherTile * ${p.float(r)};\n\n      // Limit position to avoid numerical instability\n      p = modulo(p, ${p.float(a)});\n\n      vec3 p3 = fract(vec3(p.xyx) * vec3(0.1031, 0.1030, 0.0973));\n      p3 += dot(p3, p3.yzx + 33.33);\n      return 2.0 * fract((p3.xx + p3.yz) * p3.zy) - 1.0;\n    }\n\n    vec2 fade(vec2 t){\n      return (t * t * t) * (t * (t * 6.0 - 15.0) + 10.0);\n    }\n\n    float gradientNoise(vec2 p){\n      vec2 i = floor( p );\n      vec2 f = fract( p );\n\n      vec2 u = fade(f);\n\n      // Bilinear interpolation of gradients at cell vertices around point\n      return  mix(\n                mix(dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                    dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix(dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                    dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x),\n                u.y);\n    }\n\n    float worley(vec2 p){\n      float d = 1.0e10;\n      for (int x = -1; x <= 1; x++){\n        for (int y = -1; y <= 1; y++){\n                vec2 tp = floor(p) + vec2(x, y);\n                tp = p - tp - (0.5 + 0.5 * hash(tp));\n                d = min(d, dot(tp, tp));\n            }\n        }\n      return 1.0 - clamp(d, 0.0, 1.0);\n    }\n  `),n.fragment.code.add(p`void main() {`),e.mode===o.Full&&n.fragment.code.add(p`\n        float padWidth = 1.0;\n        float paddedSize = ${p.float(l)} + 2.0 * padWidth;\n        float tileCount = ${p.float(t)} * ${p.float(t)};\n        vec2 tile = floor((gl_FragCoord.xy - 0.5) / paddedSize);\n\n        bool padCell = false;\n        if (mod(gl_FragCoord.x, paddedSize) == 0.5 || mod(gl_FragCoord.x, paddedSize) == paddedSize - 0.5) {\n          padCell = true;\n        }\n\n        if (mod(gl_FragCoord.y, paddedSize) == 0.5 || mod(gl_FragCoord.y, paddedSize) == paddedSize - 0.5) {\n          padCell = true;\n        }\n\n        bool startPadX = false;\n        bool startPadY = false;\n        bool endPadX = false;\n        bool endPadY = false;\n\n        if (gl_FragCoord.x == tile.x * paddedSize + 0.5) {\n          startPadX = true;\n        }\n\n        if (gl_FragCoord.y == tile.y * paddedSize + 0.5) {\n          startPadY = true;\n        }\n\n        if (gl_FragCoord.x == (tile.x + 1.0) * paddedSize - 0.5) {\n          endPadX = true;\n        }\n\n        if (gl_FragCoord.y == (tile.y + 1.0) * paddedSize - 0.5) {\n          endPadY = true;\n        }\n\n        vec2 padding = vec2(2.0 * padWidth) * tile;\n        vec2 uv;\n\n        if (padCell) {\n          vec2 pixel = gl_FragCoord.xy - padWidth - padding;\n\n          if (startPadX) {\n            pixel.x += ${p.float(l)};\n          }\n\n          if (startPadY) {\n            pixel.y += ${p.float(l)};\n          }\n\n          if (endPadX) {\n            pixel.x -= ${p.float(l)};\n          }\n\n          if (endPadY) {\n            pixel.y -= ${p.float(l)};\n          }\n\n          uv = vec2(pixel.xy / ${p.float(l)});\n        } else {\n          vec2 pixel = gl_FragCoord.xy - padWidth - padding;\n          uv = vec2(pixel.xy / ${p.float(l)});\n        }\n\n        vec3 p_ = get3Dfrom2D(uv);\n        vec3 p = p_;\n        p.z /= (${p.float(t)} * ${p.float(t)});\n\n        float worleyPerlinNoise = getTextureForPointPerlinWorley(p);\n        float worleyNoise = getTextureForPointWorley(p);\n\n        gl_FragColor.r = saturate(remap(worleyPerlinNoise, worleyNoise, 1.0, 0.0, 1.0));\n\n        p_ = mod(p_ + 1.0, ${p.float(t)} * ${p.float(t)});\n        p = p_;\n        p.z /= (${p.float(t)} * ${p.float(t)});\n\n        worleyPerlinNoise = getTextureForPointPerlinWorley(p);\n        worleyNoise = getTextureForPointWorley(p);\n\n        gl_FragColor.g = saturate(remap(worleyPerlinNoise, worleyNoise, 1.0, 0.0, 1.0));\n      `),n.fragment.code.add(p`\n      vec2 mapUV = ${p.float(r)} * (gl_FragCoord.xy / ${p.float(i)});\n      float map = abs(gradientNoise(mapUV));\n      map = remap(map, 0.25 * (1.0 - worley(8.0 * mapUV)), 1.0, 0.0, 1.0);\n\n      ${e.mode===o.Full?p`gl_FragColor.ba = vec2(0.0, map);`:p`gl_FragColor = vec4(map);`};\n    }\n  `),n}const v=Object.freeze(Object.defineProperty({__proto__:null,NoiseTextureAtlasPassParameters:s,build:u},Symbol.toStringTag,{value:\"Module\"}));export{s as N,v as a,u as b};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAAOA,CAAC,IAAIC,CAAC,QAAK,cAAc;AAAC,SAAOC,sBAAsB,IAAIC,CAAC,QAAK,2DAA2D;AAAC,SAAOC,SAAS,IAAIC,CAAC,EAACC,iBAAiB,IAAIC,CAAC,EAACC,gBAAgB,IAAIC,CAAC,EAACC,SAAS,IAAIC,CAAC,EAACC,UAAU,IAAIC,CAAC,QAAK,wDAAwD;AAAC,SAAOC,eAAe,IAAIC,CAAC,QAAK,qEAAqE;AAAC,SAAOC,iBAAiB,IAAIhB,CAAC,QAAK,kEAAkE;AAAC,SAAOiB,YAAY,IAAIC,CAAC,EAACC,IAAI,IAAIC,CAAC,QAAK,2DAA2D;AAAC,SAAOC,aAAa,IAAIC,CAAC,QAAK,8DAA8D;AAAC,MAAMC,CAAC,SAASL,CAAC;EAACM,WAAWA,CAAA,EAAE;IAAC,KAAK,CAAC,GAAGC,SAAS,CAAC,EAAC,IAAI,CAACC,WAAW,GAACzB,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;EAAA;AAAC;AAAC,SAAS0B,CAACA,CAAC1B,CAAC,EAAC;EAAC,MAAMiB,CAAC,GAAC,IAAII,CAAC;EAAC,IAAGJ,CAAC,CAACU,OAAO,CAACb,CAAC,EAAC,CAAC,CAAC,CAAC,EAACG,CAAC,CAACW,QAAQ,CAACC,IAAI,CAACC,GAAG,CAACX,CAAE;AACh0B;AACA,EAAE,CAAC,EAACnB,CAAC,CAAC+B,IAAI,KAAG7B,CAAC,CAAC8B,IAAI,EAAC;IAAC,MAAMhC,CAAC,GAAC,CAAC;MAACE,CAAC,GAAC,CAAC;IAACe,CAAC,CAACW,QAAQ,CAACC,IAAI,CAACC,GAAG,CAACX,CAAE;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwBA,CAAC,CAACc,KAAK,CAAC7B,CAAC,CAAE;AACnC;AACA;AACA;AACA;AACA,8CAA8Ce,CAAC,CAACc,KAAK,CAAC/B,CAAC,CAAE;AACzD;AACA,kCAAkCiB,CAAC,CAACc,KAAK,CAACjC,CAAC,CAAE;AAC7C,kCAAkCmB,CAAC,CAACc,KAAK,CAACjC,CAAC,CAAE;AAC7C,kCAAkCmB,CAAC,CAACc,KAAK,CAACjC,CAAC,CAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkCmB,CAAC,CAACc,KAAK,CAACjC,CAAC,CAAE;AAC7C,kCAAkCmB,CAAC,CAACc,KAAK,CAACjC,CAAC,CAAE;AAC7C,kCAAkCmB,CAAC,CAACc,KAAK,CAACjC,CAAC,CAAE;AAC7C,kCAAkCmB,CAAC,CAACc,KAAK,CAACjC,CAAC,CAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,CAAC;EAAA;EAAC,OAAOiB,CAAC,CAACW,QAAQ,CAACM,QAAQ,CAACJ,GAAG,CAAC,IAAI/B,CAAC,CAAC,aAAa,EAAEC,CAAC,IAAEA,CAAC,CAACyB,WAAW,CAAE,CAAC,EAACR,CAAC,CAACW,QAAQ,CAACC,IAAI,CAACC,GAAG,CAACX,CAAE;AACnG;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsBA,CAAC,CAACc,KAAK,CAAC3B,CAAC,CAAE;AACjC;AACA;AACA,2BAA2Ba,CAAC,CAACc,KAAK,CAAC3B,CAAC,CAAE;AACtC;AACA;AACA,sBAAsBa,CAAC,CAACc,KAAK,CAACzB,CAAC,CAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,CAAC,EAACS,CAAC,CAACW,QAAQ,CAACC,IAAI,CAACC,GAAG,CAACX,CAAE,eAAc,CAAC,EAACnB,CAAC,CAAC+B,IAAI,KAAG7B,CAAC,CAAC8B,IAAI,IAAEf,CAAC,CAACW,QAAQ,CAACC,IAAI,CAACC,GAAG,CAACX,CAAE;AAClF;AACA,6BAA6BA,CAAC,CAACc,KAAK,CAACvB,CAAC,CAAE;AACxC,4BAA4BS,CAAC,CAACc,KAAK,CAAC7B,CAAC,CAAE,MAAKe,CAAC,CAACc,KAAK,CAAC7B,CAAC,CAAE;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyBe,CAAC,CAACc,KAAK,CAACvB,CAAC,CAAE;AACpC;AACA;AACA;AACA,yBAAyBS,CAAC,CAACc,KAAK,CAACvB,CAAC,CAAE;AACpC;AACA;AACA;AACA,yBAAyBS,CAAC,CAACc,KAAK,CAACvB,CAAC,CAAE;AACpC;AACA;AACA;AACA,yBAAyBS,CAAC,CAACc,KAAK,CAACvB,CAAC,CAAE;AACpC;AACA;AACA,iCAAiCS,CAAC,CAACc,KAAK,CAACvB,CAAC,CAAE;AAC5C;AACA;AACA,iCAAiCS,CAAC,CAACc,KAAK,CAACvB,CAAC,CAAE;AAC5C;AACA;AACA;AACA;AACA,kBAAkBS,CAAC,CAACc,KAAK,CAAC7B,CAAC,CAAE,MAAKe,CAAC,CAACc,KAAK,CAAC7B,CAAC,CAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6Be,CAAC,CAACc,KAAK,CAAC7B,CAAC,CAAE,MAAKe,CAAC,CAACc,KAAK,CAAC7B,CAAC,CAAE;AACxD;AACA,kBAAkBe,CAAC,CAACc,KAAK,CAAC7B,CAAC,CAAE,MAAKe,CAAC,CAACc,KAAK,CAAC7B,CAAC,CAAE;AAC7C;AACA;AACA;AACA;AACA;AACA,OAAO,CAAC,EAACa,CAAC,CAACW,QAAQ,CAACC,IAAI,CAACC,GAAG,CAACX,CAAE;AAC/B,qBAAqBA,CAAC,CAACc,KAAK,CAAC3B,CAAC,CAAE,yBAAwBa,CAAC,CAACc,KAAK,CAACrB,CAAC,CAAE;AACnE;AACA;AACA;AACA,QAAQZ,CAAC,CAAC+B,IAAI,KAAG7B,CAAC,CAAC8B,IAAI,GAACb,CAAE,mCAAkC,GAACA,CAAE,2BAA2B;AAC1F;AACA,GAAG,CAAC,EAACF,CAAC;AAAA;AAAC,MAAMkB,CAAC,GAACC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACE,cAAc,CAAC;EAACC,SAAS,EAAC,IAAI;EAACC,+BAA+B,EAAClB,CAAC;EAACmB,KAAK,EAACf;AAAC,CAAC,EAACgB,MAAM,CAACC,WAAW,EAAC;EAACC,KAAK,EAAC;AAAQ,CAAC,CAAC,CAAC;AAAC,SAAOtB,CAAC,IAAIuB,CAAC,EAACV,CAAC,IAAI3B,CAAC,EAACkB,CAAC,IAAIoB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}