{"ast":null,"code":"import _objectSpread from \"C:/code-challenge-react/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/code-challenge-react/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/code-challenge-react/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport \"../../core/has.js\";\nimport { isPowerOfTwo as t } from \"../../core/mathUtils.js\";\nimport { isSome as e, isNone as i, unwrap as r } from \"../../core/maybe.js\";\nimport { checkWebGLError as o } from \"./checkWebGLError.js\";\nimport { ContextType as s } from \"./context-util.js\";\nimport { TextureType as a, TextureSamplingMode as n, TextureWrapMode as l, ResourceType as h, PixelType as p, PixelFormat as _, SizedPixelFormat as m, CompressedTextureFormat as d } from \"./enums.js\";\nvar u = {\n    target: a.TEXTURE_2D,\n    samplingMode: n.LINEAR,\n    wrapMode: l.REPEAT,\n    flipped: !1,\n    hasMipmap: !1,\n    isOpaque: !1,\n    unpackAlignment: 4,\n    preMultiplyAlpha: !1,\n    isImmutable: !1\n  },\n  c = 4;\nvar E = /*#__PURE__*/function () {\n  function E(t, e) {\n    var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    _classCallCheck(this, E);\n    this._context = t, this.type = \"texture\", this._glName = null, this._samplingModeDirty = !1, this._wrapModeDirty = !1, this._wasImmutablyAllocated = !1, t.instanceCounter.increment(h.Texture, this), this._descriptor = _objectSpread(_objectSpread({}, u), e);\n    for (var _r in u) {\n      void 0 === this._descriptor[_r] && (this._descriptor[_r] = u[_r]);\n    }\n    if (t.type !== s.WEBGL2 && (this._descriptor.isImmutable && (this._descriptor.isImmutable = !1), A(this._descriptor.target))) throw new Error(\"3D and array textures are not supported in WebGL1\");\n    this._descriptor.target === a.TEXTURE_CUBE_MAP ? this._setDataCubeMap(i) : this.setData(i);\n  }\n  _createClass(E, [{\n    key: \"glName\",\n    get: function get() {\n      return this._glName;\n    }\n  }, {\n    key: \"descriptor\",\n    get: function get() {\n      return this._descriptor;\n    }\n  }, {\n    key: \"isDirty\",\n    get: function get() {\n      return this._samplingModeDirty || this._wrapModeDirty;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this._context.gl && this._glName && (this._context.unbindTexture(this), this._context.gl.deleteTexture(this._glName), this._glName = null, this._context.instanceCounter.decrement(h.Texture, this));\n    }\n  }, {\n    key: \"release\",\n    value: function release() {\n      this.dispose();\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(t, e) {\n      var i = this._descriptor;\n      if (i.width !== t || i.height !== e) {\n        if (this._wasImmutablyAllocated) throw new Error(\"Immutable textures can't be resized!\");\n        i.width = t, i.height = e, this._descriptor.target === a.TEXTURE_CUBE_MAP ? this._setDataCubeMap(null) : this.setData(null);\n      }\n    }\n  }, {\n    key: \"_setDataCubeMap\",\n    value: function _setDataCubeMap() {\n      var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      for (var _e = a.TEXTURE_CUBE_MAP_POSITIVE_X; _e <= a.TEXTURE_CUBE_MAP_NEGATIVE_Z; _e++) this._setData(t, _e);\n    }\n  }, {\n    key: \"setData\",\n    value: function setData(t) {\n      this._setData(t);\n    }\n  }, {\n    key: \"_setData\",\n    value: function _setData(t, i) {\n      var _s$depth,\n        _s$internalFormat,\n        _this = this;\n      if (!this._context || !this._context.gl) return;\n      var r = this._context.gl;\n      this._glName || (this._glName = r.createTexture()), void 0 === t && (t = null);\n      var s = this._descriptor,\n        a = i !== null && i !== void 0 ? i : s.target,\n        n = A(a);\n      null === t && (s.width = s.width || c, s.height = s.height || c, n && (s.depth = (_s$depth = s.depth) !== null && _s$depth !== void 0 ? _s$depth : 1));\n      var l = this._context.bindTexture(this, E.TEXTURE_UNIT_FOR_UPDATES);\n      this._context.setActiveTexture(E.TEXTURE_UNIT_FOR_UPDATES), E._validateTexture(this._context, s), this._configurePixelStorage(), o(r);\n      var h = s.pixelFormat;\n      var p = (_s$internalFormat = s.internalFormat) !== null && _s$internalFormat !== void 0 ? _s$internalFormat : this._deriveInternalFormat(h, s.dataType);\n      if (f(t)) {\n        var _e2 = t.width,\n          _i = t.height;\n        var _l = 1;\n        t instanceof HTMLVideoElement && (_e2 = t.videoWidth, _i = t.videoHeight), s.width && s.height, n && s.depth, s.isImmutable && !this._wasImmutablyAllocated && this._texStorage(a, p, s.hasMipmap, _e2, _i, _l), this._texImage(a, 0, p, _e2, _i, _l, t), o(r), s.hasMipmap && this.generateMipmap(), void 0 === s.width && (s.width = _e2), void 0 === s.height && (s.height = _i), n && void 0 === s.depth && (s.depth = _l);\n      } else {\n        var _i2 = s.width,\n          _l2 = s.height,\n          _h = s.depth;\n        if (null == _i2 || null == _l2) throw new Error(\"Width and height must be specified!\");\n        if (n && null == _h) throw new Error(\"Depth must be specified!\");\n        if (s.isImmutable && !this._wasImmutablyAllocated && this._texStorage(a, p, s.hasMipmap, _i2, _l2, _h), r.DEPTH24_STENCIL8 && p === r.DEPTH_STENCIL && (p = r.DEPTH24_STENCIL8), x(t)) {\n          var _o = t.levels,\n            _n = w(a, _i2, _l2, _h),\n            _2 = Math.min(_n - 1, _o.length - 1);\n          e(this._context.gl2) ? r.texParameteri(s.target, this._context.gl2.TEXTURE_MAX_LEVEL, _2) : s.hasMipmap = s.hasMipmap && _n === _o.length;\n          var _m = p;\n          if (!T(_m)) throw new Error(\"Attempting to use compressed data with an umcompressed format!\");\n          this._forEachMipmapLevel(function (t, e, i, r) {\n            var s = _o[Math.min(t, _o.length - 1)];\n            _this._compressedTexImage(a, t, _m, e, i, r, s);\n          }, _2);\n        } else e(t) ? (this._texImage(a, 0, p, _i2, _l2, _h, t), o(r), s.hasMipmap && this.generateMipmap()) : this._forEachMipmapLevel(function (t, e, i, s) {\n          _this._texImage(a, t, p, e, i, s, null), o(r);\n        });\n      }\n      E._applySamplingMode(r, this._descriptor), E._applyWrapMode(r, this._descriptor), E._applyAnisotropicFilteringParameters(this._context, this._descriptor), o(r), this._context.bindTexture(l, E.TEXTURE_UNIT_FOR_UPDATES);\n    }\n  }, {\n    key: \"updateData\",\n    value: function updateData(t, r, o, s, a, n) {\n      var _p$internalFormat;\n      var l = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n      n || console.error(\"An attempt to use uninitialized data!\"), this._glName || console.error(\"An attempt to update uninitialized texture!\");\n      var h = this._context.gl,\n        p = this._descriptor,\n        _ = p.pixelFormat,\n        m = p.dataType,\n        d = p.target,\n        u = p.isImmutable,\n        c = (_p$internalFormat = p.internalFormat) !== null && _p$internalFormat !== void 0 ? _p$internalFormat : this._deriveInternalFormat(_, m);\n      if (u && !this._wasImmutablyAllocated) throw new Error(\"Cannot update immutable texture before allocation!\");\n      var g = this._context.bindTexture(this, E.TEXTURE_UNIT_FOR_UPDATES, !0);\n      if ((r < 0 || o < 0 || s > p.width || a > p.height || r + s > p.width || o + a > p.height) && console.error(\"An attempt to update out of bounds of the texture!\"), this._configurePixelStorage(), l) {\n        if (i(this._context.gl2)) return void console.error(\"Webgl2 must be enabled to use dataRowOffset!\");\n        h.pixelStorei(this._context.gl2.UNPACK_SKIP_ROWS, l);\n      }\n      if (f(n) ? e(this._context.gl2) ? this._context.gl2.texSubImage2D(d, t, r, o, s, a, _, m, n) : h.texSubImage2D(d, t, r, o, _, m, n) : x(n) ? h.compressedTexSubImage2D(d, t, r, o, s, a, c, n.levels[t]) : h.texSubImage2D(d, t, r, o, s, a, _, m, n), l) {\n        if (i(this._context.gl2)) return void console.error(\"Webgl2 must be enabled to use dataRowOffset!\");\n        h.pixelStorei(this._context.gl2.UNPACK_SKIP_ROWS, 0);\n      }\n      this._context.bindTexture(g, E.TEXTURE_UNIT_FOR_UPDATES);\n    }\n  }, {\n    key: \"updateData3D\",\n    value: function updateData3D(t, e, r, o, s, a, n, l) {\n      var _p$internalFormat2;\n      l || console.error(\"An attempt to use uninitialized data!\"), this._glName || console.error(\"An attempt to update uninitialized texture!\");\n      var h = this._context.gl2;\n      if (i(h)) throw new Error(\"3D textures are not supported in WebGL1\");\n      var p = this._descriptor,\n        _ = p.pixelFormat,\n        m = p.dataType,\n        d = p.isImmutable,\n        u = p.target,\n        c = (_p$internalFormat2 = p.internalFormat) !== null && _p$internalFormat2 !== void 0 ? _p$internalFormat2 : this._deriveInternalFormat(_, m);\n      if (d && !this._wasImmutablyAllocated) throw new Error(\"Cannot update immutable texture before allocation!\");\n      A(u) || console.warn(\"Attempting to set 3D texture data on a non-3D texture\");\n      var g = this._context.bindTexture(this, E.TEXTURE_UNIT_FOR_UPDATES);\n      if (this._context.setActiveTexture(E.TEXTURE_UNIT_FOR_UPDATES), (e < 0 || r < 0 || o < 0 || s > p.width || a > p.height || n > p.depth || e + s > p.width || r + a > p.height || o + n > p.depth) && console.error(\"An attempt to update out of bounds of the texture!\"), this._configurePixelStorage(), x(l)) l = l.levels[t], h.compressedTexSubImage3D(u, t, e, r, o, s, a, n, c, l);else {\n        var _i3 = l;\n        h.texSubImage3D(u, t, e, r, o, s, a, n, _, m, _i3);\n      }\n      this._context.bindTexture(g, E.TEXTURE_UNIT_FOR_UPDATES);\n    }\n  }, {\n    key: \"generateMipmap\",\n    value: function generateMipmap() {\n      var t = this._descriptor;\n      if (!t.hasMipmap) {\n        if (this._wasImmutablyAllocated) throw new Error(\"Cannot add mipmaps to immutable texture after allocation\");\n        t.hasMipmap = !0, this._samplingModeDirty = !0, E._validateTexture(this._context, t);\n      }\n      t.samplingMode === n.LINEAR ? (this._samplingModeDirty = !0, t.samplingMode = n.LINEAR_MIPMAP_NEAREST) : t.samplingMode === n.NEAREST && (this._samplingModeDirty = !0, t.samplingMode = n.NEAREST_MIPMAP_NEAREST);\n      var e = this._context.bindTexture(this, E.TEXTURE_UNIT_FOR_UPDATES);\n      this._context.setActiveTexture(E.TEXTURE_UNIT_FOR_UPDATES);\n      this._context.gl.generateMipmap(t.target), this._context.bindTexture(e, E.TEXTURE_UNIT_FOR_UPDATES);\n    }\n  }, {\n    key: \"setSamplingMode\",\n    value: function setSamplingMode(t) {\n      t !== this._descriptor.samplingMode && (this._descriptor.samplingMode = t, this._samplingModeDirty = !0);\n    }\n  }, {\n    key: \"setWrapMode\",\n    value: function setWrapMode(t) {\n      t !== this._descriptor.wrapMode && (this._descriptor.wrapMode = t, E._validateTexture(this._context, this._descriptor), this._wrapModeDirty = !0);\n    }\n  }, {\n    key: \"applyChanges\",\n    value: function applyChanges() {\n      var t = this._context.gl,\n        e = this._descriptor;\n      this._samplingModeDirty && (E._applySamplingMode(t, e), this._samplingModeDirty = !1), this._wrapModeDirty && (E._applyWrapMode(t, e), this._wrapModeDirty = !1);\n    }\n  }, {\n    key: \"_deriveInternalFormat\",\n    value: function _deriveInternalFormat(t, e) {\n      if (this._context.type === s.WEBGL1) return t;\n      switch (e) {\n        case p.FLOAT:\n          switch (t) {\n            case _.RGBA:\n              return m.RGBA32F;\n            case _.RGB:\n              return m.RGB32F;\n            default:\n              throw new Error(\"Unable to derive format\");\n          }\n        case p.UNSIGNED_BYTE:\n          switch (t) {\n            case _.RGBA:\n              return m.RGBA8;\n            case _.RGB:\n              return m.RGB8;\n          }\n        default:\n          return t;\n      }\n    }\n  }, {\n    key: \"_configurePixelStorage\",\n    value: function _configurePixelStorage() {\n      var t = this._context.gl,\n        _this$_descriptor = this._descriptor,\n        e = _this$_descriptor.unpackAlignment,\n        i = _this$_descriptor.flipped,\n        r = _this$_descriptor.preMultiplyAlpha;\n      t.pixelStorei(t.UNPACK_ALIGNMENT, e), t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL, i ? 1 : 0), t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL, r ? 1 : 0);\n    }\n  }, {\n    key: \"_texStorage\",\n    value: function _texStorage(t, e, r, o, s, a) {\n      var n = this._context.gl2;\n      if (i(n)) throw new Error(\"Immutable textures are not supported in WebGL1\");\n      if (!g(e)) throw new Error(\"Immutable textures must have a sized internal format\");\n      if (!this._descriptor.isImmutable) return;\n      var l = r ? w(t, o, s, a) : 1;\n      if (A(t)) {\n        if (null == a) throw new Error(\"Missing depth dimension for 3D texture upload\");\n        n.texStorage3D(t, l, e, o, s, a);\n      } else n.texStorage2D(t, l, e, o, s);\n      this._wasImmutablyAllocated = !0;\n    }\n  }, {\n    key: \"_texImage\",\n    value: function _texImage(t, i, o, a, n, l, h) {\n      var p = this._context.gl;\n      var _ = null;\n      var m = this._context.type === s.WEBGL2,\n        d = A(t),\n        _this$_descriptor2 = this._descriptor,\n        u = _this$_descriptor2.isImmutable,\n        c = _this$_descriptor2.pixelFormat,\n        _E = _this$_descriptor2.dataType;\n      if (m && (_ = p), m || !f(h)) {\n        if (u) {\n          if (e(h)) {\n            var _e3 = h;\n            if (d) {\n              if (null == l) throw new Error(\"Missing depth dimension for 3D texture upload\");\n              _.texSubImage3D(t, i, 0, 0, 0, a, n, l, c, _E, _e3);\n            } else p.texSubImage2D(t, i, 0, 0, a, n, c, _E, _e3);\n          }\n        } else {\n          var _e4 = r(h);\n          if (d) {\n            if (null == l) throw new Error(\"Missing depth dimension for 3D texture upload\");\n            _.texImage3D(t, i, o, a, n, l, 0, c, _E, _e4);\n          } else p.texImage2D(t, i, o, a, n, 0, c, _E, _e4);\n        }\n      } else p.texImage2D(t, 0, o, c, _E, h);\n    }\n  }, {\n    key: \"_compressedTexImage\",\n    value: function _compressedTexImage(t, i, r, o, a, n, l) {\n      var h = this._context.gl;\n      var p = null;\n      var _ = A(t),\n        m = this._descriptor.isImmutable;\n      if (_) {\n        if (this._context.type !== s.WEBGL2) throw new Error(\"3D textures are not supported in WebGL1\");\n        p = h;\n      }\n      if (m) {\n        if (e(l)) if (_) {\n          if (null == n) throw new Error(\"Missing depth dimension for 3D texture upload\");\n          p.compressedTexSubImage3D(t, i, 0, 0, 0, o, a, n, r, l);\n        } else h.compressedTexSubImage2D(t, i, 0, 0, o, a, r, l);\n      } else if (_) {\n        if (null == n) throw new Error(\"Missing depth dimension for 3D texture upload\");\n        p.compressedTexImage3D(t, i, r, o, a, n, 0, l);\n      } else h.compressedTexImage2D(t, i, r, o, a, 0, l);\n    }\n  }, {\n    key: \"_forEachMipmapLevel\",\n    value: function _forEachMipmapLevel(t) {\n      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1 / 0;\n      var _this$_descriptor3 = this._descriptor,\n        i = _this$_descriptor3.width,\n        r = _this$_descriptor3.height,\n        o = _this$_descriptor3.depth,\n        s = _this$_descriptor3.hasMipmap,\n        n = _this$_descriptor3.target;\n      var l = n === a.TEXTURE_3D;\n      if (null == i || null == r || l && null == o) throw new Error(\"Missing texture dimensions for mipmap calculation\");\n      for (var _a = 0; t(_a, i, r, o), s && (1 !== i || 1 !== r || l && 1 !== o) && !(_a >= e); ++_a) i = Math.max(1, i >> 1), r = Math.max(1, r >> 1), l && (o = Math.max(1, o >> 1));\n    }\n  }], [{\n    key: \"_validateTexture\",\n    value: function _validateTexture(e, i) {\n      (null != i.width && i.width < 0 || null != i.height && i.height < 0 || null != i.depth && i.depth < 0) && console.error(\"Negative dimension parameters are not allowed!\");\n      var r = e.type === s.WEBGL2,\n        o = null != i.width && t(i.width) && null != i.height && t(i.height);\n      r || !i.isImmutable && !A(i.target) || console.error(\"Immutable and 3D-like textures are not supported in WebGL1!\"), r || o || (\"number\" == typeof i.wrapMode ? i.wrapMode !== l.CLAMP_TO_EDGE && console.error(\"Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!\") : i.wrapMode.s === l.CLAMP_TO_EDGE && i.wrapMode.t === l.CLAMP_TO_EDGE || console.error(\"Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!\"), i.hasMipmap && console.error(\"Mipmapping requires power-of-two textures!\"));\n    }\n  }, {\n    key: \"_applySamplingMode\",\n    value: function _applySamplingMode(t, e) {\n      var i = e.samplingMode,\n        r = e.samplingMode;\n      i === n.LINEAR_MIPMAP_NEAREST || i === n.LINEAR_MIPMAP_LINEAR ? (i = n.LINEAR, e.hasMipmap || (r = n.LINEAR)) : i !== n.NEAREST_MIPMAP_NEAREST && i !== n.NEAREST_MIPMAP_LINEAR || (i = n.NEAREST, e.hasMipmap || (r = n.NEAREST)), t.texParameteri(e.target, t.TEXTURE_MAG_FILTER, i), t.texParameteri(e.target, t.TEXTURE_MIN_FILTER, r);\n    }\n  }, {\n    key: \"_applyWrapMode\",\n    value: function _applyWrapMode(t, e) {\n      \"number\" == typeof e.wrapMode ? (t.texParameteri(e.target, t.TEXTURE_WRAP_S, e.wrapMode), t.texParameteri(e.target, t.TEXTURE_WRAP_T, e.wrapMode)) : (t.texParameteri(e.target, t.TEXTURE_WRAP_S, e.wrapMode.s), t.texParameteri(e.target, t.TEXTURE_WRAP_T, e.wrapMode.t));\n    }\n  }, {\n    key: \"_applyAnisotropicFilteringParameters\",\n    value: function _applyAnisotropicFilteringParameters(t, e) {\n      var _e$maxAnisotropy;\n      var i = t.capabilities.textureFilterAnisotropic;\n      if (!i) return;\n      t.gl.texParameterf(e.target, i.TEXTURE_MAX_ANISOTROPY, (_e$maxAnisotropy = e.maxAnisotropy) !== null && _e$maxAnisotropy !== void 0 ? _e$maxAnisotropy : 1);\n    }\n  }]);\n  return E;\n}();\nfunction g(t) {\n  return t in m;\n}\nfunction T(t) {\n  return t in d;\n}\nfunction x(t) {\n  return e(t) && \"type\" in t && \"compressed\" === t.type;\n}\nfunction M(t) {\n  return e(t) && \"byteLength\" in t;\n}\nfunction f(t) {\n  return e(t) && !x(t) && !M(t);\n}\nfunction A(t) {\n  return t === a.TEXTURE_3D || t === a.TEXTURE_2D_ARRAY;\n}\nfunction w(t, e, i) {\n  var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  var o = Math.max(e, i);\n  return t === a.TEXTURE_3D && (o = Math.max(o, r)), Math.round(Math.log(o) / Math.LN2) + 1;\n}\nE.TEXTURE_UNIT_FOR_UPDATES = 0;\nexport { E as Texture };","map":{"version":3,"names":["isPowerOfTwo","t","isSome","e","isNone","i","unwrap","r","checkWebGLError","o","ContextType","s","TextureType","a","TextureSamplingMode","n","TextureWrapMode","l","ResourceType","h","PixelType","p","PixelFormat","_","SizedPixelFormat","m","CompressedTextureFormat","d","u","target","TEXTURE_2D","samplingMode","LINEAR","wrapMode","REPEAT","flipped","hasMipmap","isOpaque","unpackAlignment","preMultiplyAlpha","isImmutable","c","E","arguments","length","undefined","_classCallCheck","_context","type","_glName","_samplingModeDirty","_wrapModeDirty","_wasImmutablyAllocated","instanceCounter","increment","Texture","_descriptor","_objectSpread","WEBGL2","A","Error","TEXTURE_CUBE_MAP","_setDataCubeMap","setData","_createClass","key","get","value","dispose","gl","unbindTexture","deleteTexture","decrement","release","resize","width","height","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_Z","_setData","_s$depth","_s$internalFormat","_this","createTexture","depth","bindTexture","TEXTURE_UNIT_FOR_UPDATES","setActiveTexture","_validateTexture","_configurePixelStorage","pixelFormat","internalFormat","_deriveInternalFormat","dataType","f","HTMLVideoElement","videoWidth","videoHeight","_texStorage","_texImage","generateMipmap","DEPTH24_STENCIL8","DEPTH_STENCIL","x","levels","w","Math","min","gl2","texParameteri","TEXTURE_MAX_LEVEL","T","_forEachMipmapLevel","_compressedTexImage","_applySamplingMode","_applyWrapMode","_applyAnisotropicFilteringParameters","updateData","_p$internalFormat","console","error","g","pixelStorei","UNPACK_SKIP_ROWS","texSubImage2D","compressedTexSubImage2D","updateData3D","_p$internalFormat2","warn","compressedTexSubImage3D","texSubImage3D","LINEAR_MIPMAP_NEAREST","NEAREST","NEAREST_MIPMAP_NEAREST","setSamplingMode","setWrapMode","applyChanges","WEBGL1","FLOAT","RGBA","RGBA32F","RGB","RGB32F","UNSIGNED_BYTE","RGBA8","RGB8","_this$_descriptor","UNPACK_ALIGNMENT","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","texStorage3D","texStorage2D","_this$_descriptor2","texImage3D","texImage2D","compressedTexImage3D","compressedTexImage2D","_this$_descriptor3","TEXTURE_3D","max","CLAMP_TO_EDGE","LINEAR_MIPMAP_LINEAR","NEAREST_MIPMAP_LINEAR","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","_e$maxAnisotropy","capabilities","textureFilterAnisotropic","texParameterf","TEXTURE_MAX_ANISOTROPY","maxAnisotropy","M","TEXTURE_2D_ARRAY","round","log","LN2"],"sources":["C:/code-challenge-react/frontend/node_modules/@arcgis/core/views/webgl/Texture.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport\"../../core/has.js\";import{isPowerOfTwo as t}from\"../../core/mathUtils.js\";import{isSome as e,isNone as i,unwrap as r}from\"../../core/maybe.js\";import{checkWebGLError as o}from\"./checkWebGLError.js\";import{ContextType as s}from\"./context-util.js\";import{TextureType as a,TextureSamplingMode as n,TextureWrapMode as l,ResourceType as h,PixelType as p,PixelFormat as _,SizedPixelFormat as m,CompressedTextureFormat as d}from\"./enums.js\";const u={target:a.TEXTURE_2D,samplingMode:n.LINEAR,wrapMode:l.REPEAT,flipped:!1,hasMipmap:!1,isOpaque:!1,unpackAlignment:4,preMultiplyAlpha:!1,isImmutable:!1},c=4;let E=class{constructor(t,e,i=null){this._context=t,this.type=\"texture\",this._glName=null,this._samplingModeDirty=!1,this._wrapModeDirty=!1,this._wasImmutablyAllocated=!1,t.instanceCounter.increment(h.Texture,this),this._descriptor={...u,...e};for(const r in u){void 0===this._descriptor[r]&&(this._descriptor[r]=u[r])}if(t.type!==s.WEBGL2&&(this._descriptor.isImmutable&&(this._descriptor.isImmutable=!1),A(this._descriptor.target)))throw new Error(\"3D and array textures are not supported in WebGL1\");this._descriptor.target===a.TEXTURE_CUBE_MAP?this._setDataCubeMap(i):this.setData(i)}get glName(){return this._glName}get descriptor(){return this._descriptor}get isDirty(){return this._samplingModeDirty||this._wrapModeDirty}dispose(){this._context.gl&&this._glName&&(this._context.unbindTexture(this),this._context.gl.deleteTexture(this._glName),this._glName=null,this._context.instanceCounter.decrement(h.Texture,this))}release(){this.dispose()}resize(t,e){const i=this._descriptor;if(i.width!==t||i.height!==e){if(this._wasImmutablyAllocated)throw new Error(\"Immutable textures can't be resized!\");i.width=t,i.height=e,this._descriptor.target===a.TEXTURE_CUBE_MAP?this._setDataCubeMap(null):this.setData(null)}}_setDataCubeMap(t=null){for(let e=a.TEXTURE_CUBE_MAP_POSITIVE_X;e<=a.TEXTURE_CUBE_MAP_NEGATIVE_Z;e++)this._setData(t,e)}setData(t){this._setData(t)}_setData(t,i){if(!this._context||!this._context.gl)return;const r=this._context.gl;this._glName||(this._glName=r.createTexture()),void 0===t&&(t=null);const s=this._descriptor,a=i??s.target,n=A(a);null===t&&(s.width=s.width||c,s.height=s.height||c,n&&(s.depth=s.depth??1));const l=this._context.bindTexture(this,E.TEXTURE_UNIT_FOR_UPDATES);this._context.setActiveTexture(E.TEXTURE_UNIT_FOR_UPDATES),E._validateTexture(this._context,s),this._configurePixelStorage(),o(r);const h=s.pixelFormat;let p=s.internalFormat??this._deriveInternalFormat(h,s.dataType);if(f(t)){let e=t.width,i=t.height;const l=1;t instanceof HTMLVideoElement&&(e=t.videoWidth,i=t.videoHeight),s.width&&s.height,n&&s.depth,s.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(a,p,s.hasMipmap,e,i,l),this._texImage(a,0,p,e,i,l,t),o(r),s.hasMipmap&&this.generateMipmap(),void 0===s.width&&(s.width=e),void 0===s.height&&(s.height=i),n&&void 0===s.depth&&(s.depth=l)}else{const{width:i,height:l,depth:h}=s;if(null==i||null==l)throw new Error(\"Width and height must be specified!\");if(n&&null==h)throw new Error(\"Depth must be specified!\");if(s.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(a,p,s.hasMipmap,i,l,h),r.DEPTH24_STENCIL8&&p===r.DEPTH_STENCIL&&(p=r.DEPTH24_STENCIL8),x(t)){const o=t.levels,n=w(a,i,l,h),_=Math.min(n-1,o.length-1);e(this._context.gl2)?r.texParameteri(s.target,this._context.gl2.TEXTURE_MAX_LEVEL,_):s.hasMipmap=s.hasMipmap&&n===o.length;const m=p;if(!T(m))throw new Error(\"Attempting to use compressed data with an umcompressed format!\");this._forEachMipmapLevel(((t,e,i,r)=>{const s=o[Math.min(t,o.length-1)];this._compressedTexImage(a,t,m,e,i,r,s)}),_)}else e(t)?(this._texImage(a,0,p,i,l,h,t),o(r),s.hasMipmap&&this.generateMipmap()):this._forEachMipmapLevel(((t,e,i,s)=>{this._texImage(a,t,p,e,i,s,null),o(r)}))}E._applySamplingMode(r,this._descriptor),E._applyWrapMode(r,this._descriptor),E._applyAnisotropicFilteringParameters(this._context,this._descriptor),o(r),this._context.bindTexture(l,E.TEXTURE_UNIT_FOR_UPDATES)}updateData(t,r,o,s,a,n,l=0){n||console.error(\"An attempt to use uninitialized data!\"),this._glName||console.error(\"An attempt to update uninitialized texture!\");const h=this._context.gl,p=this._descriptor,{pixelFormat:_,dataType:m,target:d,isImmutable:u}=p,c=p.internalFormat??this._deriveInternalFormat(_,m);if(u&&!this._wasImmutablyAllocated)throw new Error(\"Cannot update immutable texture before allocation!\");const g=this._context.bindTexture(this,E.TEXTURE_UNIT_FOR_UPDATES,!0);if((r<0||o<0||s>p.width||a>p.height||r+s>p.width||o+a>p.height)&&console.error(\"An attempt to update out of bounds of the texture!\"),this._configurePixelStorage(),l){if(i(this._context.gl2))return void console.error(\"Webgl2 must be enabled to use dataRowOffset!\");h.pixelStorei(this._context.gl2.UNPACK_SKIP_ROWS,l)}if(f(n)?e(this._context.gl2)?this._context.gl2.texSubImage2D(d,t,r,o,s,a,_,m,n):h.texSubImage2D(d,t,r,o,_,m,n):x(n)?h.compressedTexSubImage2D(d,t,r,o,s,a,c,n.levels[t]):h.texSubImage2D(d,t,r,o,s,a,_,m,n),l){if(i(this._context.gl2))return void console.error(\"Webgl2 must be enabled to use dataRowOffset!\");h.pixelStorei(this._context.gl2.UNPACK_SKIP_ROWS,0)}this._context.bindTexture(g,E.TEXTURE_UNIT_FOR_UPDATES)}updateData3D(t,e,r,o,s,a,n,l){l||console.error(\"An attempt to use uninitialized data!\"),this._glName||console.error(\"An attempt to update uninitialized texture!\");const h=this._context.gl2;if(i(h))throw new Error(\"3D textures are not supported in WebGL1\");const p=this._descriptor,{pixelFormat:_,dataType:m,isImmutable:d,target:u}=p,c=p.internalFormat??this._deriveInternalFormat(_,m);if(d&&!this._wasImmutablyAllocated)throw new Error(\"Cannot update immutable texture before allocation!\");A(u)||console.warn(\"Attempting to set 3D texture data on a non-3D texture\");const g=this._context.bindTexture(this,E.TEXTURE_UNIT_FOR_UPDATES);if(this._context.setActiveTexture(E.TEXTURE_UNIT_FOR_UPDATES),(e<0||r<0||o<0||s>p.width||a>p.height||n>p.depth||e+s>p.width||r+a>p.height||o+n>p.depth)&&console.error(\"An attempt to update out of bounds of the texture!\"),this._configurePixelStorage(),x(l))l=l.levels[t],h.compressedTexSubImage3D(u,t,e,r,o,s,a,n,c,l);else{const i=l;h.texSubImage3D(u,t,e,r,o,s,a,n,_,m,i)}this._context.bindTexture(g,E.TEXTURE_UNIT_FOR_UPDATES)}generateMipmap(){const t=this._descriptor;if(!t.hasMipmap){if(this._wasImmutablyAllocated)throw new Error(\"Cannot add mipmaps to immutable texture after allocation\");t.hasMipmap=!0,this._samplingModeDirty=!0,E._validateTexture(this._context,t)}t.samplingMode===n.LINEAR?(this._samplingModeDirty=!0,t.samplingMode=n.LINEAR_MIPMAP_NEAREST):t.samplingMode===n.NEAREST&&(this._samplingModeDirty=!0,t.samplingMode=n.NEAREST_MIPMAP_NEAREST);const e=this._context.bindTexture(this,E.TEXTURE_UNIT_FOR_UPDATES);this._context.setActiveTexture(E.TEXTURE_UNIT_FOR_UPDATES);this._context.gl.generateMipmap(t.target),this._context.bindTexture(e,E.TEXTURE_UNIT_FOR_UPDATES)}setSamplingMode(t){t!==this._descriptor.samplingMode&&(this._descriptor.samplingMode=t,this._samplingModeDirty=!0)}setWrapMode(t){t!==this._descriptor.wrapMode&&(this._descriptor.wrapMode=t,E._validateTexture(this._context,this._descriptor),this._wrapModeDirty=!0)}applyChanges(){const t=this._context.gl,e=this._descriptor;this._samplingModeDirty&&(E._applySamplingMode(t,e),this._samplingModeDirty=!1),this._wrapModeDirty&&(E._applyWrapMode(t,e),this._wrapModeDirty=!1)}_deriveInternalFormat(t,e){if(this._context.type===s.WEBGL1)return t;switch(e){case p.FLOAT:switch(t){case _.RGBA:return m.RGBA32F;case _.RGB:return m.RGB32F;default:throw new Error(\"Unable to derive format\")}case p.UNSIGNED_BYTE:switch(t){case _.RGBA:return m.RGBA8;case _.RGB:return m.RGB8}default:return t}}_configurePixelStorage(){const t=this._context.gl,{unpackAlignment:e,flipped:i,preMultiplyAlpha:r}=this._descriptor;t.pixelStorei(t.UNPACK_ALIGNMENT,e),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,i?1:0),t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,r?1:0)}_texStorage(t,e,r,o,s,a){const n=this._context.gl2;if(i(n))throw new Error(\"Immutable textures are not supported in WebGL1\");if(!g(e))throw new Error(\"Immutable textures must have a sized internal format\");if(!this._descriptor.isImmutable)return;const l=r?w(t,o,s,a):1;if(A(t)){if(null==a)throw new Error(\"Missing depth dimension for 3D texture upload\");n.texStorage3D(t,l,e,o,s,a)}else n.texStorage2D(t,l,e,o,s);this._wasImmutablyAllocated=!0}_texImage(t,i,o,a,n,l,h){const p=this._context.gl;let _=null;const m=this._context.type===s.WEBGL2,d=A(t),{isImmutable:u,pixelFormat:c,dataType:E}=this._descriptor;if(m&&(_=p),m||!f(h))if(u){if(e(h)){const e=h;if(d){if(null==l)throw new Error(\"Missing depth dimension for 3D texture upload\");_.texSubImage3D(t,i,0,0,0,a,n,l,c,E,e)}else p.texSubImage2D(t,i,0,0,a,n,c,E,e)}}else{const e=r(h);if(d){if(null==l)throw new Error(\"Missing depth dimension for 3D texture upload\");_.texImage3D(t,i,o,a,n,l,0,c,E,e)}else p.texImage2D(t,i,o,a,n,0,c,E,e)}else p.texImage2D(t,0,o,c,E,h)}_compressedTexImage(t,i,r,o,a,n,l){const h=this._context.gl;let p=null;const _=A(t),m=this._descriptor.isImmutable;if(_){if(this._context.type!==s.WEBGL2)throw new Error(\"3D textures are not supported in WebGL1\");p=h}if(m){if(e(l))if(_){if(null==n)throw new Error(\"Missing depth dimension for 3D texture upload\");p.compressedTexSubImage3D(t,i,0,0,0,o,a,n,r,l)}else h.compressedTexSubImage2D(t,i,0,0,o,a,r,l)}else if(_){if(null==n)throw new Error(\"Missing depth dimension for 3D texture upload\");p.compressedTexImage3D(t,i,r,o,a,n,0,l)}else h.compressedTexImage2D(t,i,r,o,a,0,l)}_forEachMipmapLevel(t,e=1/0){let{width:i,height:r,depth:o,hasMipmap:s,target:n}=this._descriptor;const l=n===a.TEXTURE_3D;if(null==i||null==r||l&&null==o)throw new Error(\"Missing texture dimensions for mipmap calculation\");for(let a=0;t(a,i,r,o),s&&(1!==i||1!==r||l&&1!==o)&&!(a>=e);++a)i=Math.max(1,i>>1),r=Math.max(1,r>>1),l&&(o=Math.max(1,o>>1))}static _validateTexture(e,i){(null!=i.width&&i.width<0||null!=i.height&&i.height<0||null!=i.depth&&i.depth<0)&&console.error(\"Negative dimension parameters are not allowed!\");const r=e.type===s.WEBGL2,o=null!=i.width&&t(i.width)&&null!=i.height&&t(i.height);r||!i.isImmutable&&!A(i.target)||console.error(\"Immutable and 3D-like textures are not supported in WebGL1!\"),r||o||(\"number\"==typeof i.wrapMode?i.wrapMode!==l.CLAMP_TO_EDGE&&console.error(\"Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!\"):i.wrapMode.s===l.CLAMP_TO_EDGE&&i.wrapMode.t===l.CLAMP_TO_EDGE||console.error(\"Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!\"),i.hasMipmap&&console.error(\"Mipmapping requires power-of-two textures!\"))}static _applySamplingMode(t,e){let i=e.samplingMode,r=e.samplingMode;i===n.LINEAR_MIPMAP_NEAREST||i===n.LINEAR_MIPMAP_LINEAR?(i=n.LINEAR,e.hasMipmap||(r=n.LINEAR)):i!==n.NEAREST_MIPMAP_NEAREST&&i!==n.NEAREST_MIPMAP_LINEAR||(i=n.NEAREST,e.hasMipmap||(r=n.NEAREST)),t.texParameteri(e.target,t.TEXTURE_MAG_FILTER,i),t.texParameteri(e.target,t.TEXTURE_MIN_FILTER,r)}static _applyWrapMode(t,e){\"number\"==typeof e.wrapMode?(t.texParameteri(e.target,t.TEXTURE_WRAP_S,e.wrapMode),t.texParameteri(e.target,t.TEXTURE_WRAP_T,e.wrapMode)):(t.texParameteri(e.target,t.TEXTURE_WRAP_S,e.wrapMode.s),t.texParameteri(e.target,t.TEXTURE_WRAP_T,e.wrapMode.t))}static _applyAnisotropicFilteringParameters(t,e){const i=t.capabilities.textureFilterAnisotropic;if(!i)return;t.gl.texParameterf(e.target,i.TEXTURE_MAX_ANISOTROPY,e.maxAnisotropy??1)}};function g(t){return t in m}function T(t){return t in d}function x(t){return e(t)&&\"type\"in t&&\"compressed\"===t.type}function M(t){return e(t)&&\"byteLength\"in t}function f(t){return e(t)&&!x(t)&&!M(t)}function A(t){return t===a.TEXTURE_3D||t===a.TEXTURE_2D_ARRAY}function w(t,e,i,r=1){let o=Math.max(e,i);return t===a.TEXTURE_3D&&(o=Math.max(o,r)),Math.round(Math.log(o)/Math.LN2)+1}E.TEXTURE_UNIT_FOR_UPDATES=0;export{E as Texture};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}