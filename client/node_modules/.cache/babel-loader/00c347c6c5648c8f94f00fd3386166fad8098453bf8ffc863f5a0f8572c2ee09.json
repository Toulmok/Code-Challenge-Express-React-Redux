{"ast":null,"code":"import { default as storeState } from '../store/store';\nimport { LOAD_PORTAL, SET_IDENTITY, GET_USER_ITEMS, SET_USER_ITEMS, GET_USER_TAGS, SET_USER_TAGS, UPDATE_ITEM_TAGS } from '../constants/action-types';\nconst portal = {\n  user: {\n    username: ''\n  }\n};\nconst qParamArray = ['title', 'type', 'created', 'tag'];\n\n/**\r\n * Middleware function with the signature\r\n *\r\n * storeInstance =>\r\n * functionToCallWithAnActionThatWillSendItToTheNextMiddleware =>\r\n * actionThatDispatchWasCalledWith =>\r\n * valueToUseAsTheReturnValueOfTheDispatchCall\r\n *\r\n * Typically written as\r\n *\r\n * store => next => action => result\r\n */\nconst arcgisMiddleWare = store => next => action => {\n  switch (action.type) {\n    case LOAD_PORTAL:\n      fetch('/getUser').then(res => res.json()) //.json is asynch; .parse is sync\n      .then(user => {\n        //console.log(user)\n        store.dispatch({\n          type: SET_IDENTITY,\n          username: user.username,\n          fullname: user.fullname,\n          email: user.email,\n          thumbnailurl: user.thumbnailurl\n        });\n      }).then(() => store.dispatch({\n        type: GET_USER_ITEMS\n      })).then(() => {\n        store.dispatch({\n          type: GET_USER_TAGS\n        });\n      });\n      return next(action);\n    case GET_USER_ITEMS:\n      //Does this sanitize?\n      let myUrlGet = new URL(window.location.href); //console.log(myUrlGet.toString())\n      let myUrlHas = new URLSearchParams(myUrlGet.search);\n      if (myUrlHas.has(\"dcreated\")) {\n        let qDCreated = myUrlHas.get(\"dcreated\"); //console.log(qDCreated)\n        if (qDCreated !== '') {\n          let created = new Date(qDCreated);\n          let createdUnix = created.getTime().toString();\n          if (myUrlHas.get(\"rcreated\") === \"before\") {\n            createdUnix = '[0 TO ' + createdUnix + ']';\n          } else if (myUrlHas.get(\"rcreated\") === \"after\") {\n            createdUnix = '[' + createdUnix + ' TO 99999999999999]';\n          } //console.log(createdUnix)\n          myUrlHas.set(\"created\", createdUnix);\n        }\n      }\n      myUrlGet.search = myUrlHas.toString();\n      //const new_url = myUrlGet.toString(); console.log(new_url)\n      window.history.replaceState('', '', myUrlGet.search);\n      let qString = '';\n      for (const field of qParamArray) {\n        if (myUrlHas.has(field)) {\n          if (myUrlGet.searchParams.get(field) !== '') {\n            qString += ' AND ' + field + ':' + myUrlGet.searchParams.get(field);\n          }\n        }\n      }\n      if (portal.user === null) {\n        //console.log(\"query string is \" + qString)\n        return next(action);\n      } else {\n        //portal.user.fetchItems() might be better\n        try {\n          fetch('/getItems', {\n            method: \"POST\",\n            body: JSON.stringify({\n              q: `owner:${storeState.getState().user.username}` + qString,\n              sortField: 'modified',\n              sortOrder: 'desc',\n              num: 20,\n              //max is 100, default is 10\n              start: 1,\n              authentication: undefined\n            }),\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          }).then(res => res.json()) //.json is asynch; .parse is sync\n          .then(_ref => {\n            let {\n              results\n            } = _ref;\n            //console.log(results)\n            store.dispatch({\n              type: SET_USER_ITEMS,\n              userItems: results\n            });\n          });\n        } catch (err) {\n          console.log(err.message);\n        } finally {\n          console.log(storeState.getState().user.username + ' is getting items');\n        }\n      }\n      return next(action);\n    case GET_USER_TAGS:\n      if (portal.user === null) {\n        return next(action);\n      } else {\n        try {\n          return fetch('/getTags').then(res => res.json()) //.json is asynch; .parse is sync\n          .then(tagsObj => {\n            //console.log(tagsObj.tags.map(({tag}) => tag) )\n            store.dispatch({\n              type: SET_USER_TAGS,\n              userTags: tagsObj.tags.map(_ref2 => {\n                let {\n                  tag\n                } = _ref2;\n                return tag;\n              })\n            });\n          });\n        } catch (err) {\n          console.log(err.message);\n        } finally {\n          console.log(storeState.getState().user.username + ' is fetching tags');\n        }\n      }\n      return next(action);\n    case UPDATE_ITEM_TAGS:\n      next(action);\n      const tagsCsv = []; //: { id: string, tag: string, }[] = []\n      document.querySelectorAll(\"input.inputTags\").forEach(input => {\n        if (input.value !== '') {\n          tagsCsv.push({\n            id: input.id.replace('input', ''),\n            //(option as HTMLInputElement)\n            tag: input.value\n          });\n        }\n      }); //console.log(tagsCsv)\n      document.querySelectorAll(\"select.selectTags option:checked\").forEach(option => {\n        if (option.id !== '') {\n          tagsCsv.push({\n            id: option.id.replace(option.value, ''),\n            //(option as HTMLInputElement)\n            tag: option.value\n          });\n        }\n      }); //console.log(tagsCsv)\n\n      let tagsToUpdate = [];\n      tagsCsv.forEach(itemToUpdate => {\n        //__esri.PortalItemUpdateParams\n        console.log(itemToUpdate.tag);\n        tagsToUpdate = storeState.getState().query.userItems.find(item => item.id === itemToUpdate.id).tags.sort();\n        tagsToUpdate.push(itemToUpdate.tag);\n        /*\r\n        if(tagsToUpdate.length !== 0) { console.log(tagsToUpdate)\r\n          tagsToUpdate.push(itemToUpdate.tag)\r\n        } else {\r\n          tagsToUpdate.push(itemToUpdate.tag)\r\n        } */\n        console.log(tagsToUpdate);\n        try {\n          fetch('/updateTags', {\n            method: \"POST\",\n            body: JSON.stringify({\n              item: {\n                id: itemToUpdate.id,\n                tags: tagsToUpdate\n              },\n              authentication: undefined\n            }),\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          }).then(() => window.location.reload());\n        } catch (err) {\n          console.log(err);\n        } finally {\n          console.log(storeState.getState().user.username + ' is updating tags');\n        }\n      });\n    default:\n      return next(action);\n  }\n};\nexport default arcgisMiddleWare;","map":{"version":3,"names":["default","storeState","LOAD_PORTAL","SET_IDENTITY","GET_USER_ITEMS","SET_USER_ITEMS","GET_USER_TAGS","SET_USER_TAGS","UPDATE_ITEM_TAGS","portal","user","username","qParamArray","arcgisMiddleWare","store","next","action","type","fetch","then","res","json","dispatch","fullname","email","thumbnailurl","myUrlGet","URL","window","location","href","myUrlHas","URLSearchParams","search","has","qDCreated","get","created","Date","createdUnix","getTime","toString","set","history","replaceState","qString","field","searchParams","method","body","JSON","stringify","q","getState","sortField","sortOrder","num","start","authentication","undefined","headers","_ref","results","userItems","err","console","log","message","tagsObj","userTags","tags","map","_ref2","tag","tagsCsv","document","querySelectorAll","forEach","input","value","push","id","replace","option","tagsToUpdate","itemToUpdate","query","find","item","sort","reload"],"sources":["C:/code-challenge-react/client/src/middleware/arcgis-portal.js"],"sourcesContent":["import { default as storeState } from '../store/store'\r\n\r\nimport {\r\n  LOAD_PORTAL,\r\n  SET_IDENTITY,\r\n  GET_USER_ITEMS,\r\n  SET_USER_ITEMS,\r\n  GET_USER_TAGS,\r\n  SET_USER_TAGS,\r\n  UPDATE_ITEM_TAGS,\r\n} from '../constants/action-types'\r\n\r\nconst portal = {user: {username: ''}}\r\nconst qParamArray = ['title','type','created','tag']\r\n\r\n/**\r\n * Middleware function with the signature\r\n *\r\n * storeInstance =>\r\n * functionToCallWithAnActionThatWillSendItToTheNextMiddleware =>\r\n * actionThatDispatchWasCalledWith =>\r\n * valueToUseAsTheReturnValueOfTheDispatchCall\r\n *\r\n * Typically written as\r\n *\r\n * store => next => action => result\r\n */\r\nconst arcgisMiddleWare = store => next => (action) => {\r\n  switch (action.type) {\r\n    case LOAD_PORTAL:\r\n      fetch('/getUser')\r\n      .then(res => res.json()) //.json is asynch; .parse is sync\r\n      .then((user) => { //console.log(user)\r\n        store.dispatch({\r\n          type: SET_IDENTITY,\r\n          username: user.username,\r\n          fullname: user.fullname,\r\n          email: user.email,\r\n          thumbnailurl: user.thumbnailurl,\r\n      })})\r\n      .then(() => store.dispatch({ type: GET_USER_ITEMS }) )\r\n      .then(() => { store.dispatch({ type: GET_USER_TAGS }) })\r\n      return next(action)\r\n\r\n    case GET_USER_ITEMS:\r\n      //Does this sanitize?\r\n      let myUrlGet = new URL(window.location.href); //console.log(myUrlGet.toString())\r\n      let myUrlHas = new URLSearchParams(myUrlGet.search)\r\n\r\n      if(myUrlHas.has(\"dcreated\")) {\r\n        let qDCreated = myUrlHas.get(\"dcreated\"); //console.log(qDCreated)\r\n        if((qDCreated !== '')){\r\n          let created = new Date(qDCreated)\r\n          let createdUnix = created.getTime().toString()\r\n          if(myUrlHas.get(\"rcreated\")===\"before\") {\r\n            createdUnix = '[0 TO ' + createdUnix + ']'\r\n          } else if (myUrlHas.get(\"rcreated\")===\"after\") {\r\n            createdUnix = '[' + createdUnix + ' TO 99999999999999]'\r\n          } //console.log(createdUnix)\r\n          myUrlHas.set(\"created\",createdUnix)\r\n        }\r\n      }\r\n\r\n      myUrlGet.search = myUrlHas.toString()\r\n      //const new_url = myUrlGet.toString(); console.log(new_url)\r\n      window.history.replaceState('','',myUrlGet.search)\r\n\r\n      let qString = ''\r\n      for (const field of qParamArray) {\r\n        if(myUrlHas.has(field)) {\r\n          if((myUrlGet.searchParams.get(field) !== '')){\r\n            qString += ' AND ' + field + ':' + myUrlGet.searchParams.get(field)\r\n          }\r\n        }\r\n      }\r\n\r\n      if (portal.user === null) { //console.log(\"query string is \" + qString)\r\n        return next(action)\r\n      } else { //portal.user.fetchItems() might be better\r\n        try { \r\n          fetch('/getItems', {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n              q: `owner:${storeState.getState().user.username}` + qString,\r\n              sortField: 'modified',\r\n              sortOrder: 'desc',\r\n              num: 20, //max is 100, default is 10\r\n              start: 1,\r\n              authentication: undefined,\r\n            }),\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n          })\r\n          .then(res => res.json()) //.json is asynch; .parse is sync\r\n          .then(({ results }) => { //console.log(results)\r\n            store.dispatch({ type: SET_USER_ITEMS, userItems: results, })\r\n          })\r\n        }\r\n        catch(err) { console.log(err.message) }\r\n        finally { console.log(storeState.getState().user.username + ' is getting items') }\r\n      }\r\n      return next(action)\r\n\r\n    case GET_USER_TAGS:\r\n      if (portal.user === null) {\r\n        return next(action)\r\n      } else {\r\n        try { \r\n          return fetch('/getTags')\r\n          .then(res => res.json()) //.json is asynch; .parse is sync\r\n          .then( (tagsObj) => { //console.log(tagsObj.tags.map(({tag}) => tag) )\r\n            store.dispatch({ type: SET_USER_TAGS, userTags: tagsObj.tags.map(({tag}) => tag) })\r\n          })\r\n        }\r\n        catch(err) { console.log(err.message) }\r\n        finally { console.log(storeState.getState().user.username + ' is fetching tags') }\r\n      }\r\n      return next(action)\r\n\r\n    case UPDATE_ITEM_TAGS:\r\n      next(action)\r\n\r\n      const tagsCsv = [] //: { id: string, tag: string, }[] = []\r\n      document.querySelectorAll(\"input.inputTags\").forEach(input => {\r\n        if (input.value !== '') {\r\n          tagsCsv.push({\r\n            id: input.id.replace('input',''), //(option as HTMLInputElement)\r\n            tag: input.value,\r\n          })\r\n        }\r\n      }); //console.log(tagsCsv)\r\n      document.querySelectorAll(\"select.selectTags option:checked\").forEach(option => {\r\n        if (option.id !== '') {\r\n          tagsCsv.push({\r\n            id: option.id.replace((option.value),''), //(option as HTMLInputElement)\r\n            tag: option.value,\r\n          })\r\n        }\r\n      }); //console.log(tagsCsv)\r\n\r\n      let tagsToUpdate = []\r\n      tagsCsv.forEach((itemToUpdate) => { //__esri.PortalItemUpdateParams\r\n        console.log(itemToUpdate.tag)\r\n        tagsToUpdate = storeState.getState().query.userItems.find(item => item.id === itemToUpdate.id).tags.sort()\r\n        tagsToUpdate.push(itemToUpdate.tag)\r\n        /*\r\n        if(tagsToUpdate.length !== 0) { console.log(tagsToUpdate)\r\n          tagsToUpdate.push(itemToUpdate.tag)\r\n        } else {\r\n          tagsToUpdate.push(itemToUpdate.tag)\r\n        } */console.log(tagsToUpdate)\r\n        \r\n        try{\r\n          fetch('/updateTags', {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n              item: {\r\n                id: itemToUpdate.id,\r\n                tags: tagsToUpdate,\r\n              },\r\n              authentication: undefined,\r\n            }),\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n          })\r\n          .then(() => window.location.reload())\r\n        }\r\n        catch(err) { console.log(err) }\r\n        finally {console.log(storeState.getState().user.username + ' is updating tags')} \r\n      })\r\n\r\n    default:\r\n      return next(action)\r\n  }\r\n}\r\n\r\nexport default arcgisMiddleWare"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}