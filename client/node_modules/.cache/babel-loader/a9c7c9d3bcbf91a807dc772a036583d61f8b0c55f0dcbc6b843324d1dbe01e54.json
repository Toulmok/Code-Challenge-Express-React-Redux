{"ast":null,"code":"/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport { deg2rad as e } from \"../../../../../core/mathUtils.js\";\nimport { isSome as t, unwrapOr as s } from \"../../../../../core/maybe.js\";\nimport { createLength as i, createArea as o } from \"../../../../../core/quantityUtils.js\";\nimport { s as r, d as n } from \"../../../../../chunks/vec2.js\";\nimport { a as h } from \"../../../../../chunks/vec2f64.js\";\nimport { n as a, i as d, c as g, f as l, o as c, b as p, e as m, g as u, a as _ } from \"../../../../../chunks/vec3.js\";\nimport { c as f } from \"../../../../../chunks/vec3f64.js\";\nimport { c as C } from \"../../../../../chunks/vec4f64.js\";\nimport { getReferenceEllipsoid as S } from \"../../../../../geometry/ellipsoidUtils.js\";\nimport { canProjectWithoutEngine as L, canProjectToWGS84ComparableLonLat as P, projectPointToVector as R, projectPointToWGS84ComparableLonLat as j, projectDirection as M, projectVectorToVector as A } from \"../../../../../geometry/projection.js\";\nimport v from \"../../../../../geometry/SpatialReference.js\";\nimport { getSphericalPCPF as W } from \"../../../../../geometry/spatialReferenceEllipsoidUtils.js\";\nimport { Axis as w } from \"../../../../../geometry/support/Axis.js\";\nimport { segmentIntersects as I } from \"../../../../../geometry/support/intersectsBase.js\";\nimport { areaPoints2d as z } from \"../../../../../geometry/support/triangle.js\";\nimport { MeasurementMode as U } from \"../../interfaces.js\";\nimport { segmentLengthGeodesicVector as G, bestFitPlane as V, fitHemisphere as y, triangleAreaGeodesic as T, planePointDistance as F, boundingSphere as b, segmentLengthGeodesic as E, segmentLengthEuclidean as N } from \"../../support/measurementUtils.js\";\nimport { midpoint as x } from \"../../support/viewUtils.js\";\nimport { getElevationAtPoint as k } from \"../../../support/ElevationProvider.js\";\nimport { makeOrthonormal as q, tangentFrame as D } from \"../../../support/mathUtils.js\";\nimport { compactIndices as B } from \"../../../webgl-engine/lib/Indices.js\";\nimport { triangulate as H } from \"../../../../support/euclideanAreaMeasurementUtils.js\";\nclass X {\n  constructor(e, t) {\n    this.positionsWorldCoords = [], this.positionsRenderCoords = [], this.positionsProjectedWorldCoords = [], this.positionsFittedRenderCoords = [], this.positionsGeographic = [], this.positionsSpherical = [], this.positionsStereographic = [], this.pathSegmentLengths = [], this.geodesicPathSegmentLengths = [], this.perimeterSegmentLengths = [], this.intersectingSegments = new Set(), this.geodesicIntersectingSegments = new Set(), this.triangleIndices = null, this.geodesicTriangleIndices = null, this.areaCentroidWorldCoords = f(), this.areaCentroidRenderCoords = f(), this.geodesicAreaCentroidRenderCoords = f(), this.area = null, this.geodesicArea = null, this.pathLength = null, this.geodesicPathLength = null, this.perimeterLength = null, this._length = 0, this._centroidRenderCoords = f(), this._planeWorldCoords = C(), this._worldUp = f(), this._worldTangent = f(), this._frame = [f(), f(), f()], this._pathVersion = -1, this._validMeasurement = !1, this._hasCursorPoint = !1, this._mode = null, this._tempU = f(), this._tempV = f(), this._tempVec3 = f(), this._tempSphere = {\n      center: f(),\n      radius: 0\n    }, this._sceneView = e, this.unitNormalizer = t;\n  }\n  update(e, s, o, r, n, h, d) {\n    const g = this.unitNormalizer,\n      l = this._sceneView.renderSpatialReference,\n      c = this.unitNormalizer.spatialReference,\n      p = t(s);\n    if (this._pathVersion === e.version && this._validMeasurement === r && !d && this._hasCursorPoint === p && this._mode === h) {\n      return !e.isValidPolygon && (this._updateCursorSegmentLength(e, s), !0);\n    }\n    this._pathVersion = e.version, this._validMeasurement = r, this._hasCursorPoint = p;\n    const m = e.numVertices;\n    this._resize(m);\n    const u = W(o.spatialReference),\n      _ = L(o.spatialReference, u) && P(o.spatialReference),\n      {\n        positionsGeographic: f,\n        positionsWorldCoords: C,\n        positionsRenderCoords: S,\n        positionsSpherical: M\n      } = this;\n    e.forEachVertexPosition((e, t) => {\n      Z(o.elevationProvider, e), R(e, C[t], c), R(e, S[t], l), _ && (j(e, f[t]), R(e, M[t], u), a(M[t], M[t]));\n    });\n    const A = this._updatePathLengths(r);\n    if (this.pathLength = this._length > 1 ? i(g.normalizeDistance(A), \"meters\") : null, _) {\n      const e = this._updateGeodesicPathLengths(r, c);\n      this.geodesicPathLength = this._length > 1 ? i(e, \"meters\") : null;\n    } else this.geodesicPathLength = null;\n    return this._updateCursorSegmentLength(e, s), this._updateMode(e, h), r ? (this._updateArea(o, g, l, c, n), _ && this._updateGeodesicArea(o), !0) : (this.area = null, this.geodesicArea = null, this.perimeterLength = null, this.triangleIndices = null, this.geodesicTriangleIndices = null, this.intersectingSegments.clear(), this.geodesicIntersectingSegments.clear(), !0);\n  }\n  getData() {\n    return {\n      positionsWorldCoords: this.positionsWorldCoords,\n      positionsRenderCoords: this.positionsRenderCoords,\n      positionsProjectedWorldCoords: this.positionsProjectedWorldCoords,\n      positionsFittedRenderCoords: this.positionsFittedRenderCoords,\n      positionsGeographic: this.positionsGeographic,\n      positionsSpherical: this.positionsSpherical,\n      positionsStereographic: this.positionsStereographic,\n      pathSegmentLengths: this.pathSegmentLengths,\n      geodesicPathSegmentLengths: this.geodesicPathSegmentLengths,\n      perimeterSegmentLengths: this.perimeterSegmentLengths,\n      intersectingSegments: this.intersectingSegments,\n      geodesicIntersectingSegments: this.geodesicIntersectingSegments,\n      triangleIndices: this.triangleIndices,\n      geodesicTriangleIndices: this.geodesicTriangleIndices,\n      areaCentroidWorldCoords: this.areaCentroidWorldCoords,\n      areaCentroidRenderCoords: this.areaCentroidRenderCoords,\n      geodesicAreaCentroidRenderCoords: this.geodesicAreaCentroidRenderCoords,\n      fittingMode: this.fittingMode,\n      area: this.area,\n      geodesicArea: this.geodesicArea,\n      pathLength: this.pathLength,\n      geodesicPathLength: this.geodesicPathLength,\n      perimeterLength: this.perimeterLength,\n      cursorSegmentLength: this.cursorSegmentLength,\n      geodesicCursorSegmentLength: this.geodesicCursorSegmentLength,\n      unitNormalizer: this.unitNormalizer,\n      actualMeasurementMode: this.actualMeasurementMode\n    };\n  }\n  _resize(e) {\n    for (e < this._length && (this.positionsWorldCoords.length = e, this.positionsRenderCoords.length = e, this.positionsProjectedWorldCoords.length = e, this.positionsFittedRenderCoords.length = e, this.positionsGeographic.length = e, this.positionsSpherical.length = e, this.positionsStereographic.length = e, this.pathSegmentLengths.length = e, this.geodesicPathSegmentLengths.length = e, this.perimeterSegmentLengths.length = e, this._length = e); this._length < e;) this.positionsWorldCoords.push(f()), this.positionsRenderCoords.push(f()), this.positionsProjectedWorldCoords.push(h()), this.positionsFittedRenderCoords.push(f()), this.positionsGeographic.push(f()), this.positionsSpherical.push(f()), this.positionsStereographic.push(h()), this.pathSegmentLengths.push(0), this.geodesicPathSegmentLengths.push(0), this.perimeterSegmentLengths.push(0), ++this._length;\n  }\n  _updatePathLengths(e) {\n    const t = this.positionsWorldCoords,\n      s = this.pathSegmentLengths;\n    let i = 0;\n    for (let o = 0; o < this._length; ++o) {\n      const r = s[o] = d(t[o], t[(o + 1) % this._length]);\n      (o < this._length - 1 || e) && (i += r);\n    }\n    return i;\n  }\n  _updateGeodesicPathLengths(e, t) {\n    const s = this.positionsGeographic,\n      i = this.geodesicPathSegmentLengths;\n    let o = 0;\n    for (let r = 0; r < this._length; ++r) {\n      const n = i[r] = G(s[r], s[(r + 1) % this._length], t ?? void 0);\n      (r < this._length - 1 || e) && (o += n);\n    }\n    return o;\n  }\n  _updateArea(e, t, s, n, h) {\n    const a = e.renderCoordsHelper,\n      d = this.positionsWorldCoords,\n      f = this.positionsRenderCoords,\n      C = this.positionsProjectedWorldCoords,\n      S = this.positionsFittedRenderCoords,\n      L = this._planeWorldCoords,\n      P = this._centroidRenderCoords;\n    x(f, P), a.worldUpAtPosition(P, this._worldUp), a.worldBasisAtPosition(P, w.X, this._worldTangent), M(P, this._worldUp, s, this._worldUp, n), M(P, this._worldTangent, s, this._worldTangent, n), d.length > 2 && V(d, L), this.fittingMode = this._selectFittingMode(L, d, this._worldUp, h);\n    let R = 0;\n    if (\"horizontal\" === this.fittingMode) {\n      let e = -1 / 0;\n      f.forEach((t, s) => {\n        const i = a.getAltitude(f[s]);\n        i > e && (e = i, R = s);\n      });\n    }\n    const j = d[R];\n    let v = L,\n      W = this._worldTangent;\n    \"horizontal\" === this.fittingMode ? v = this._worldUp : \"vertical\" === this.fittingMode && (v = this._tempVec3, W = this._worldUp, q(L, this._worldUp, v)), g(this._frame[2], v), q(W, v, this._frame[0]), l(this._frame[1], this._frame[0], this._frame[2]), c(this._frame[1], this._frame[1]);\n    const I = this._tempVec3,\n      z = this._tempU,\n      U = this._tempV;\n    for (let i = 0; i < this._length; ++i) {\n      const e = C[i],\n        t = S[i];\n      p(I, d[i], j), r(e, m(this._frame[0], I), m(this._frame[1], I)), u(z, this._frame[0], e[0]), u(U, this._frame[1], e[1]), _(I, z, U), _(I, I, j), A(I, n, t, s);\n    }\n    this.perimeterLength = this._length > 0 ? i(t.normalizeDistance(this._updatePerimeterLengths()), \"meters\") : null, x(S, this.areaCentroidRenderCoords), A(this.areaCentroidRenderCoords, s, this.areaCentroidWorldCoords, n), this._updateIntersectingSegments(), this.area = 0 === this.intersectingSegments.size ? o(t.normalizeArea(this._computeArea()), \"square-meters\") : null;\n  }\n  _updateGeodesicArea(e) {\n    const {\n        renderCoordsHelper: t,\n        spatialReference: s\n      } = e,\n      {\n        positionsSpherical: i,\n        positionsStereographic: n\n      } = this,\n      h = this._tempVec3,\n      a = y(i, h);\n    if (!a) return void (this.geodesicArea = null);\n    const d = this._tempU,\n      g = this._tempV;\n    D(h, d, g);\n    for (let o = 0; o < this._length; ++o) {\n      const e = m(i[o], d),\n        t = m(i[o], g),\n        s = m(i[o], h);\n      r(n[o], e / s, t / s);\n    }\n    u(h, h, S(s).radius), t.toRenderCoords(h, W(s), this.geodesicAreaCentroidRenderCoords), this._updateGeodesicIntersectingSegments(), this.geodesicArea = a && 0 === this.geodesicIntersectingSegments.size ? o(this._computeGeodesicArea(), \"square-meters\") : null;\n  }\n  _updatePerimeterLengths() {\n    const e = this.positionsProjectedWorldCoords,\n      t = this.perimeterSegmentLengths;\n    let s = 0;\n    for (let i = 0; i < this._length; ++i) {\n      s += t[i] = n(e[i], e[(i + 1) % this._length]);\n    }\n    return s;\n  }\n  _updateIntersectingSegments() {\n    const e = this.positionsProjectedWorldCoords,\n      t = this.intersectingSegments;\n    t.clear();\n    for (let s = 0; s < this._length; ++s) for (let i = s + 2; i < this._length; ++i) {\n      if ((i + 1) % this._length === s) continue;\n      const o = e[s],\n        r = e[(s + 1) % this._length],\n        n = e[i],\n        h = e[(i + 1) % this._length];\n      I(o, r, n, h) && (t.add(s), t.add(i));\n    }\n  }\n  _computeArea() {\n    const e = this.positionsProjectedWorldCoords,\n      t = this.triangleIndices = B(H(e));\n    let s = 0;\n    for (let i = 0; i < t.length; i += 3) s += z(e[t[i]], e[t[i + 1]], e[t[i + 2]]);\n    return s;\n  }\n  _updateGeodesicIntersectingSegments() {\n    const e = this.positionsStereographic,\n      t = this.geodesicIntersectingSegments;\n    t.clear();\n    for (let s = 0; s < this._length; ++s) for (let i = s + 2; i < this._length; ++i) {\n      if ((i + 1) % this._length === s) continue;\n      const o = e[s],\n        r = e[(s + 1) % this._length],\n        n = e[i],\n        h = e[(i + 1) % this._length];\n      I(o, r, n, h) && (t.add(s), t.add(i));\n    }\n  }\n  _computeGeodesicArea() {\n    const e = this.positionsGeographic,\n      t = this.positionsStereographic,\n      s = this.geodesicTriangleIndices = B(H(t));\n    let i = 0;\n    for (let o = 0; o < s.length; o += 3) i += T(e[s[o]], e[s[o + 1]], e[s[o + 2]], v.WGS84);\n    return i;\n  }\n  _selectFittingMode(t, s, i, o) {\n    const r = s.map(e => Math.abs(F(t, e))).reduce((e, t) => Math.max(e, t), 0);\n    b(s, this._tempSphere);\n    const n = r / (2 * this._tempSphere.radius),\n      h = n < o.maxRelativeErrorCoplanar,\n      a = n < o.maxRelativeErrorAlmostCoplanar;\n    let d = \"horizontal\";\n    if (h) d = \"oblique\";else if (a) {\n      d = Math.abs(m(i, t)) > Math.cos(e(o.verticalAngleThreshold)) ? \"horizontal\" : \"vertical\";\n    }\n    return d;\n  }\n  _updateCursorSegmentLength(e, s) {\n    const o = e.lastPoint;\n    !e.isValidPolygon && t(o) && t(s) ? (this.geodesicCursorSegmentLength = i(E(o, s), \"meters\"), this.cursorSegmentLength = i(this.unitNormalizer.normalizeDistance(N(o, s, this.unitNormalizer.spatialReference)), \"meters\")) : (this.geodesicCursorSegmentLength = null, this.cursorSegmentLength = null);\n  }\n  _updateMode(e, s) {\n    if (s === U.Auto) {\n      this.actualMeasurementMode = \"euclidean\";\n      let s = 0;\n      null != this.geodesicPathLength && (s += this.geodesicPathLength.value), !e.isValidPolygon && t(this.geodesicCursorSegmentLength) && (s += this.geodesicCursorSegmentLength.value), s > J && (this.actualMeasurementMode = \"geodesic\");\n    } else this.actualMeasurementMode = s === U.Euclidean ? \"euclidean\" : \"geodesic\";\n    null == this.geodesicPathLength && (this.actualMeasurementMode = \"euclidean\"), this._mode = s;\n  }\n}\nfunction Z(e, t) {\n  t.hasZ || (t.z = s(k(e, t, \"ground\"), 0));\n}\nconst J = 1e5;\nexport { X as MeasurementDataManager };","map":{"version":3,"names":["deg2rad","e","isSome","t","unwrapOr","s","createLength","i","createArea","o","r","d","n","a","h","c","g","f","l","b","p","m","u","_","C","getReferenceEllipsoid","S","canProjectWithoutEngine","L","canProjectToWGS84ComparableLonLat","P","projectPointToVector","R","projectPointToWGS84ComparableLonLat","j","projectDirection","M","projectVectorToVector","A","v","getSphericalPCPF","W","Axis","w","segmentIntersects","I","areaPoints2d","z","MeasurementMode","U","segmentLengthGeodesicVector","G","bestFitPlane","V","fitHemisphere","y","triangleAreaGeodesic","T","planePointDistance","F","boundingSphere","segmentLengthGeodesic","E","segmentLengthEuclidean","N","midpoint","x","getElevationAtPoint","k","makeOrthonormal","q","tangentFrame","D","compactIndices","B","triangulate","H","X","constructor","positionsWorldCoords","positionsRenderCoords","positionsProjectedWorldCoords","positionsFittedRenderCoords","positionsGeographic","positionsSpherical","positionsStereographic","pathSegmentLengths","geodesicPathSegmentLengths","perimeterSegmentLengths","intersectingSegments","Set","geodesicIntersectingSegments","triangleIndices","geodesicTriangleIndices","areaCentroidWorldCoords","areaCentroidRenderCoords","geodesicAreaCentroidRenderCoords","area","geodesicArea","pathLength","geodesicPathLength","perimeterLength","_length","_centroidRenderCoords","_planeWorldCoords","_worldUp","_worldTangent","_frame","_pathVersion","_validMeasurement","_hasCursorPoint","_mode","_tempU","_tempV","_tempVec3","_tempSphere","center","radius","_sceneView","unitNormalizer","update","renderSpatialReference","spatialReference","version","isValidPolygon","_updateCursorSegmentLength","numVertices","_resize","forEachVertexPosition","Z","elevationProvider","_updatePathLengths","normalizeDistance","_updateGeodesicPathLengths","_updateMode","_updateArea","_updateGeodesicArea","clear","getData","fittingMode","cursorSegmentLength","geodesicCursorSegmentLength","actualMeasurementMode","length","push","renderCoordsHelper","worldUpAtPosition","worldBasisAtPosition","_selectFittingMode","forEach","getAltitude","_updatePerimeterLengths","_updateIntersectingSegments","size","normalizeArea","_computeArea","toRenderCoords","_updateGeodesicIntersectingSegments","_computeGeodesicArea","add","WGS84","map","Math","abs","reduce","max","maxRelativeErrorCoplanar","maxRelativeErrorAlmostCoplanar","cos","verticalAngleThreshold","lastPoint","Auto","value","J","Euclidean","hasZ","MeasurementDataManager"],"sources":["C:/code-challenge-react/frontend/node_modules/@arcgis/core/views/3d/analysis/AreaMeasurement/support/MeasurementData.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport{deg2rad as e}from\"../../../../../core/mathUtils.js\";import{isSome as t,unwrapOr as s}from\"../../../../../core/maybe.js\";import{createLength as i,createArea as o}from\"../../../../../core/quantityUtils.js\";import{s as r,d as n}from\"../../../../../chunks/vec2.js\";import{a as h}from\"../../../../../chunks/vec2f64.js\";import{n as a,i as d,c as g,f as l,o as c,b as p,e as m,g as u,a as _}from\"../../../../../chunks/vec3.js\";import{c as f}from\"../../../../../chunks/vec3f64.js\";import{c as C}from\"../../../../../chunks/vec4f64.js\";import{getReferenceEllipsoid as S}from\"../../../../../geometry/ellipsoidUtils.js\";import{canProjectWithoutEngine as L,canProjectToWGS84ComparableLonLat as P,projectPointToVector as R,projectPointToWGS84ComparableLonLat as j,projectDirection as M,projectVectorToVector as A}from\"../../../../../geometry/projection.js\";import v from\"../../../../../geometry/SpatialReference.js\";import{getSphericalPCPF as W}from\"../../../../../geometry/spatialReferenceEllipsoidUtils.js\";import{Axis as w}from\"../../../../../geometry/support/Axis.js\";import{segmentIntersects as I}from\"../../../../../geometry/support/intersectsBase.js\";import{areaPoints2d as z}from\"../../../../../geometry/support/triangle.js\";import{MeasurementMode as U}from\"../../interfaces.js\";import{segmentLengthGeodesicVector as G,bestFitPlane as V,fitHemisphere as y,triangleAreaGeodesic as T,planePointDistance as F,boundingSphere as b,segmentLengthGeodesic as E,segmentLengthEuclidean as N}from\"../../support/measurementUtils.js\";import{midpoint as x}from\"../../support/viewUtils.js\";import{getElevationAtPoint as k}from\"../../../support/ElevationProvider.js\";import{makeOrthonormal as q,tangentFrame as D}from\"../../../support/mathUtils.js\";import{compactIndices as B}from\"../../../webgl-engine/lib/Indices.js\";import{triangulate as H}from\"../../../../support/euclideanAreaMeasurementUtils.js\";class X{constructor(e,t){this.positionsWorldCoords=[],this.positionsRenderCoords=[],this.positionsProjectedWorldCoords=[],this.positionsFittedRenderCoords=[],this.positionsGeographic=[],this.positionsSpherical=[],this.positionsStereographic=[],this.pathSegmentLengths=[],this.geodesicPathSegmentLengths=[],this.perimeterSegmentLengths=[],this.intersectingSegments=new Set,this.geodesicIntersectingSegments=new Set,this.triangleIndices=null,this.geodesicTriangleIndices=null,this.areaCentroidWorldCoords=f(),this.areaCentroidRenderCoords=f(),this.geodesicAreaCentroidRenderCoords=f(),this.area=null,this.geodesicArea=null,this.pathLength=null,this.geodesicPathLength=null,this.perimeterLength=null,this._length=0,this._centroidRenderCoords=f(),this._planeWorldCoords=C(),this._worldUp=f(),this._worldTangent=f(),this._frame=[f(),f(),f()],this._pathVersion=-1,this._validMeasurement=!1,this._hasCursorPoint=!1,this._mode=null,this._tempU=f(),this._tempV=f(),this._tempVec3=f(),this._tempSphere={center:f(),radius:0},this._sceneView=e,this.unitNormalizer=t}update(e,s,o,r,n,h,d){const g=this.unitNormalizer,l=this._sceneView.renderSpatialReference,c=this.unitNormalizer.spatialReference,p=t(s);if(this._pathVersion===e.version&&this._validMeasurement===r&&!d&&this._hasCursorPoint===p&&this._mode===h){return!e.isValidPolygon&&(this._updateCursorSegmentLength(e,s),!0)}this._pathVersion=e.version,this._validMeasurement=r,this._hasCursorPoint=p;const m=e.numVertices;this._resize(m);const u=W(o.spatialReference),_=L(o.spatialReference,u)&&P(o.spatialReference),{positionsGeographic:f,positionsWorldCoords:C,positionsRenderCoords:S,positionsSpherical:M}=this;e.forEachVertexPosition(((e,t)=>{Z(o.elevationProvider,e),R(e,C[t],c),R(e,S[t],l),_&&(j(e,f[t]),R(e,M[t],u),a(M[t],M[t]))}));const A=this._updatePathLengths(r);if(this.pathLength=this._length>1?i(g.normalizeDistance(A),\"meters\"):null,_){const e=this._updateGeodesicPathLengths(r,c);this.geodesicPathLength=this._length>1?i(e,\"meters\"):null}else this.geodesicPathLength=null;return this._updateCursorSegmentLength(e,s),this._updateMode(e,h),r?(this._updateArea(o,g,l,c,n),_&&this._updateGeodesicArea(o),!0):(this.area=null,this.geodesicArea=null,this.perimeterLength=null,this.triangleIndices=null,this.geodesicTriangleIndices=null,this.intersectingSegments.clear(),this.geodesicIntersectingSegments.clear(),!0)}getData(){return{positionsWorldCoords:this.positionsWorldCoords,positionsRenderCoords:this.positionsRenderCoords,positionsProjectedWorldCoords:this.positionsProjectedWorldCoords,positionsFittedRenderCoords:this.positionsFittedRenderCoords,positionsGeographic:this.positionsGeographic,positionsSpherical:this.positionsSpherical,positionsStereographic:this.positionsStereographic,pathSegmentLengths:this.pathSegmentLengths,geodesicPathSegmentLengths:this.geodesicPathSegmentLengths,perimeterSegmentLengths:this.perimeterSegmentLengths,intersectingSegments:this.intersectingSegments,geodesicIntersectingSegments:this.geodesicIntersectingSegments,triangleIndices:this.triangleIndices,geodesicTriangleIndices:this.geodesicTriangleIndices,areaCentroidWorldCoords:this.areaCentroidWorldCoords,areaCentroidRenderCoords:this.areaCentroidRenderCoords,geodesicAreaCentroidRenderCoords:this.geodesicAreaCentroidRenderCoords,fittingMode:this.fittingMode,area:this.area,geodesicArea:this.geodesicArea,pathLength:this.pathLength,geodesicPathLength:this.geodesicPathLength,perimeterLength:this.perimeterLength,cursorSegmentLength:this.cursorSegmentLength,geodesicCursorSegmentLength:this.geodesicCursorSegmentLength,unitNormalizer:this.unitNormalizer,actualMeasurementMode:this.actualMeasurementMode}}_resize(e){for(e<this._length&&(this.positionsWorldCoords.length=e,this.positionsRenderCoords.length=e,this.positionsProjectedWorldCoords.length=e,this.positionsFittedRenderCoords.length=e,this.positionsGeographic.length=e,this.positionsSpherical.length=e,this.positionsStereographic.length=e,this.pathSegmentLengths.length=e,this.geodesicPathSegmentLengths.length=e,this.perimeterSegmentLengths.length=e,this._length=e);this._length<e;)this.positionsWorldCoords.push(f()),this.positionsRenderCoords.push(f()),this.positionsProjectedWorldCoords.push(h()),this.positionsFittedRenderCoords.push(f()),this.positionsGeographic.push(f()),this.positionsSpherical.push(f()),this.positionsStereographic.push(h()),this.pathSegmentLengths.push(0),this.geodesicPathSegmentLengths.push(0),this.perimeterSegmentLengths.push(0),++this._length}_updatePathLengths(e){const t=this.positionsWorldCoords,s=this.pathSegmentLengths;let i=0;for(let o=0;o<this._length;++o){const r=s[o]=d(t[o],t[(o+1)%this._length]);(o<this._length-1||e)&&(i+=r)}return i}_updateGeodesicPathLengths(e,t){const s=this.positionsGeographic,i=this.geodesicPathSegmentLengths;let o=0;for(let r=0;r<this._length;++r){const n=i[r]=G(s[r],s[(r+1)%this._length],t??void 0);(r<this._length-1||e)&&(o+=n)}return o}_updateArea(e,t,s,n,h){const a=e.renderCoordsHelper,d=this.positionsWorldCoords,f=this.positionsRenderCoords,C=this.positionsProjectedWorldCoords,S=this.positionsFittedRenderCoords,L=this._planeWorldCoords,P=this._centroidRenderCoords;x(f,P),a.worldUpAtPosition(P,this._worldUp),a.worldBasisAtPosition(P,w.X,this._worldTangent),M(P,this._worldUp,s,this._worldUp,n),M(P,this._worldTangent,s,this._worldTangent,n),d.length>2&&V(d,L),this.fittingMode=this._selectFittingMode(L,d,this._worldUp,h);let R=0;if(\"horizontal\"===this.fittingMode){let e=-1/0;f.forEach(((t,s)=>{const i=a.getAltitude(f[s]);i>e&&(e=i,R=s)}))}const j=d[R];let v=L,W=this._worldTangent;\"horizontal\"===this.fittingMode?v=this._worldUp:\"vertical\"===this.fittingMode&&(v=this._tempVec3,W=this._worldUp,q(L,this._worldUp,v)),g(this._frame[2],v),q(W,v,this._frame[0]),l(this._frame[1],this._frame[0],this._frame[2]),c(this._frame[1],this._frame[1]);const I=this._tempVec3,z=this._tempU,U=this._tempV;for(let i=0;i<this._length;++i){const e=C[i],t=S[i];p(I,d[i],j),r(e,m(this._frame[0],I),m(this._frame[1],I)),u(z,this._frame[0],e[0]),u(U,this._frame[1],e[1]),_(I,z,U),_(I,I,j),A(I,n,t,s)}this.perimeterLength=this._length>0?i(t.normalizeDistance(this._updatePerimeterLengths()),\"meters\"):null,x(S,this.areaCentroidRenderCoords),A(this.areaCentroidRenderCoords,s,this.areaCentroidWorldCoords,n),this._updateIntersectingSegments(),this.area=0===this.intersectingSegments.size?o(t.normalizeArea(this._computeArea()),\"square-meters\"):null}_updateGeodesicArea(e){const{renderCoordsHelper:t,spatialReference:s}=e,{positionsSpherical:i,positionsStereographic:n}=this,h=this._tempVec3,a=y(i,h);if(!a)return void(this.geodesicArea=null);const d=this._tempU,g=this._tempV;D(h,d,g);for(let o=0;o<this._length;++o){const e=m(i[o],d),t=m(i[o],g),s=m(i[o],h);r(n[o],e/s,t/s)}u(h,h,S(s).radius),t.toRenderCoords(h,W(s),this.geodesicAreaCentroidRenderCoords),this._updateGeodesicIntersectingSegments(),this.geodesicArea=a&&0===this.geodesicIntersectingSegments.size?o(this._computeGeodesicArea(),\"square-meters\"):null}_updatePerimeterLengths(){const e=this.positionsProjectedWorldCoords,t=this.perimeterSegmentLengths;let s=0;for(let i=0;i<this._length;++i){s+=t[i]=n(e[i],e[(i+1)%this._length])}return s}_updateIntersectingSegments(){const e=this.positionsProjectedWorldCoords,t=this.intersectingSegments;t.clear();for(let s=0;s<this._length;++s)for(let i=s+2;i<this._length;++i){if((i+1)%this._length===s)continue;const o=e[s],r=e[(s+1)%this._length],n=e[i],h=e[(i+1)%this._length];I(o,r,n,h)&&(t.add(s),t.add(i))}}_computeArea(){const e=this.positionsProjectedWorldCoords,t=this.triangleIndices=B(H(e));let s=0;for(let i=0;i<t.length;i+=3)s+=z(e[t[i]],e[t[i+1]],e[t[i+2]]);return s}_updateGeodesicIntersectingSegments(){const e=this.positionsStereographic,t=this.geodesicIntersectingSegments;t.clear();for(let s=0;s<this._length;++s)for(let i=s+2;i<this._length;++i){if((i+1)%this._length===s)continue;const o=e[s],r=e[(s+1)%this._length],n=e[i],h=e[(i+1)%this._length];I(o,r,n,h)&&(t.add(s),t.add(i))}}_computeGeodesicArea(){const e=this.positionsGeographic,t=this.positionsStereographic,s=this.geodesicTriangleIndices=B(H(t));let i=0;for(let o=0;o<s.length;o+=3)i+=T(e[s[o]],e[s[o+1]],e[s[o+2]],v.WGS84);return i}_selectFittingMode(t,s,i,o){const r=s.map((e=>Math.abs(F(t,e)))).reduce(((e,t)=>Math.max(e,t)),0);b(s,this._tempSphere);const n=r/(2*this._tempSphere.radius),h=n<o.maxRelativeErrorCoplanar,a=n<o.maxRelativeErrorAlmostCoplanar;let d=\"horizontal\";if(h)d=\"oblique\";else if(a){d=Math.abs(m(i,t))>Math.cos(e(o.verticalAngleThreshold))?\"horizontal\":\"vertical\"}return d}_updateCursorSegmentLength(e,s){const o=e.lastPoint;!e.isValidPolygon&&t(o)&&t(s)?(this.geodesicCursorSegmentLength=i(E(o,s),\"meters\"),this.cursorSegmentLength=i(this.unitNormalizer.normalizeDistance(N(o,s,this.unitNormalizer.spatialReference)),\"meters\")):(this.geodesicCursorSegmentLength=null,this.cursorSegmentLength=null)}_updateMode(e,s){if(s===U.Auto){this.actualMeasurementMode=\"euclidean\";let s=0;null!=this.geodesicPathLength&&(s+=this.geodesicPathLength.value),!e.isValidPolygon&&t(this.geodesicCursorSegmentLength)&&(s+=this.geodesicCursorSegmentLength.value),s>J&&(this.actualMeasurementMode=\"geodesic\")}else this.actualMeasurementMode=s===U.Euclidean?\"euclidean\":\"geodesic\";null==this.geodesicPathLength&&(this.actualMeasurementMode=\"euclidean\"),this._mode=s}}function Z(e,t){t.hasZ||(t.z=s(k(e,t,\"ground\"),0))}const J=1e5;export{X as MeasurementDataManager};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}