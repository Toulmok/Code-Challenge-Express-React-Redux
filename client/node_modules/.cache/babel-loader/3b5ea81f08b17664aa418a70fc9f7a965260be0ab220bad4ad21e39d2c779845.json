{"ast":null,"code":"import _regeneratorRuntime from\"C:/code-challenge-react/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/code-challenge-react/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _classCallCheck from\"C:/code-challenge-react/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"C:/code-challenge-react/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"C:/code-challenge-react/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"C:/code-challenge-react/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import React from'react';import{ArcGISIdentityManager}from'@esri/arcgis-rest-request';import{syncAuthToJsApi,updateDisplay}from'./sessionFunctions';// We need to customize the behavior of how ArcGISIdentityManager handles refreshing.\nexport var ManagerWithCustomRefresh=/*#__PURE__*/function(_ArcGISIdentityManage){_inherits(ManagerWithCustomRefresh,_ArcGISIdentityManage);var _super=_createSuper(ManagerWithCustomRefresh);function ManagerWithCustomRefresh(){_classCallCheck(this,ManagerWithCustomRefresh);return _super.apply(this,arguments);}_createClass(ManagerWithCustomRefresh,[{key:\"canRefresh\",get:// This will be false by default because we do not have a refresh token on the client.\n// Forcing this to be `true` will cause ArcGIS REST JS to refresh tokens with our custom `refreshCredentials` method below.\nfunction get(){return true;}// Now we can override the `refreshCredentials` method to change HOW this will be refreshed.\n// This needs to have the signature and return a promise with the new session and call `updateToken` internally.\n},{key:\"refreshCredentials\",value:function(){var _refreshCredentials=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(session){var response,sessionJson;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"/refresh\");case 2:response=_context.sent;_context.next=5;return response.json();case 5:sessionJson=_context.sent;console.log(sessionJson);session.updateToken(sessionJson.token,new Date(sessionJson.tokenExpires));updateDisplay();syncAuthToJsApi();return _context.abrupt(\"return\",session);case 11:case\"end\":return _context.stop();}},_callee);}));function refreshCredentials(_x){return _refreshCredentials.apply(this,arguments);}return refreshCredentials;}()}]);return ManagerWithCustomRefresh;}(ArcGISIdentityManager);export default ManagerWithCustomRefresh;","map":{"version":3,"names":["React","ArcGISIdentityManager","syncAuthToJsApi","updateDisplay","ManagerWithCustomRefresh","_ArcGISIdentityManage","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","get","value","_refreshCredentials","_asyncToGenerator","_regeneratorRuntime","mark","_callee","session","response","sessionJson","wrap","_callee$","_context","prev","next","fetch","sent","json","console","log","updateToken","token","Date","tokenExpires","abrupt","stop","refreshCredentials","_x"],"sources":["C:/code-challenge-react/client/src/components/session/sessionManager.jsx"],"sourcesContent":["import React from 'react'\r\nimport { ArcGISIdentityManager } from '@esri/arcgis-rest-request'\r\nimport { syncAuthToJsApi, updateDisplay } from './sessionFunctions'\r\n\r\n// We need to customize the behavior of how ArcGISIdentityManager handles refreshing.\r\nexport class ManagerWithCustomRefresh extends ArcGISIdentityManager {\r\n  // This will be false by default because we do not have a refresh token on the client.\r\n  // Forcing this to be `true` will cause ArcGIS REST JS to refresh tokens with our custom `refreshCredentials` method below.\r\n  get canRefresh() { return true }\r\n  \r\n  // Now we can override the `refreshCredentials` method to change HOW this will be refreshed.\r\n  // This needs to have the signature and return a promise with the new session and call `updateToken` internally.\r\n  async refreshCredentials(session) {\r\n    const response = await fetch(\"/refresh\")\r\n    const sessionJson = await response.json()\r\n    console.log(sessionJson)\r\n    session.updateToken(sessionJson.token, new Date(sessionJson.tokenExpires))\r\n    updateDisplay()\r\n    syncAuthToJsApi()\r\n    return session\r\n  }\r\n}\r\n\r\nexport default ManagerWithCustomRefresh"],"mappings":"wrBAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,qBAAqB,KAAQ,2BAA2B,CACjE,OAASC,eAAe,CAAEC,aAAa,KAAQ,oBAAoB,CAEnE;AACA,UAAa,CAAAC,wBAAwB,uBAAAC,qBAAA,EAAAC,SAAA,CAAAF,wBAAA,CAAAC,qBAAA,MAAAE,MAAA,CAAAC,YAAA,CAAAJ,wBAAA,WAAAA,yBAAA,EAAAK,eAAA,MAAAL,wBAAA,SAAAG,MAAA,CAAAG,KAAA,MAAAC,SAAA,GAAAC,YAAA,CAAAR,wBAAA,GAAAS,GAAA,cAAAC,GAAA,CACnC;AACA;AACA,SAAAA,IAAA,CAAiB,CAAE,MAAO,KAAI,CAAC,CAE/B;AACA;AAAA,GAAAD,GAAA,sBAAAE,KAAA,gBAAAC,mBAAA,CAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CACA,SAAAC,QAAyBC,OAAO,MAAAC,QAAA,CAAAC,WAAA,QAAAL,mBAAA,GAAAM,IAAA,UAAAC,SAAAC,QAAA,iBAAAA,QAAA,CAAAC,IAAA,CAAAD,QAAA,CAAAE,IAAA,SAAAF,QAAA,CAAAE,IAAA,SACP,CAAAC,KAAK,CAAC,UAAU,CAAC,QAAlCP,QAAQ,CAAAI,QAAA,CAAAI,IAAA,CAAAJ,QAAA,CAAAE,IAAA,SACY,CAAAN,QAAQ,CAACS,IAAI,EAAE,QAAnCR,WAAW,CAAAG,QAAA,CAAAI,IAAA,CACjBE,OAAO,CAACC,GAAG,CAACV,WAAW,CAAC,CACxBF,OAAO,CAACa,WAAW,CAACX,WAAW,CAACY,KAAK,CAAE,GAAI,CAAAC,IAAI,CAACb,WAAW,CAACc,YAAY,CAAC,CAAC,CAC1ElC,aAAa,EAAE,CACfD,eAAe,EAAE,QAAAwB,QAAA,CAAAY,MAAA,UACVjB,OAAO,2BAAAK,QAAA,CAAAa,IAAA,MAAAnB,OAAA,GACf,YAAAoB,mBAAAC,EAAA,SAAAzB,mBAAA,CAAAN,KAAA,MAAAC,SAAA,UAAA6B,kBAAA,eAAApC,wBAAA,GAf2CH,qBAAqB,EAkBnE,cAAe,CAAAG,wBAAwB"},"metadata":{},"sourceType":"module","externalDependencies":[]}